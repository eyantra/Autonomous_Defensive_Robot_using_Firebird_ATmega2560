
group12.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000114  00800200  00002d7e  00002e12  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002d7e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000013  00800314  00800314  00002f26  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  00002f26  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000027f  00000000  00000000  00002f46  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000a5d  00000000  00000000  000031c5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001e1  00000000  00000000  00003c22  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000fd7  00000000  00000000  00003e03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000210  00000000  00000000  00004ddc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002e5  00000000  00000000  00004fec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
       4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
       c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      10:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      14:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      18:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      50:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      64:	0c 94 88 0c 	jmp	0x1910	; 0x1910 <__vector_25>
      68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      74:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
      e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	13 e0       	ldi	r17, 0x03	; 3
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	ee e7       	ldi	r30, 0x7E	; 126
      fc:	fd e2       	ldi	r31, 0x2D	; 45
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a4 31       	cpi	r26, 0x14	; 20
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	13 e0       	ldi	r17, 0x03	; 3
     110:	a4 e1       	ldi	r26, 0x14	; 20
     112:	b3 e0       	ldi	r27, 0x03	; 3
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a7 32       	cpi	r26, 0x27	; 39
     11a:	b1 07       	cpc	r27, r17
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <main>
     122:	0c 94 bd 16 	jmp	0x2d7a	; 0x2d7a <_exit>

00000126 <__bad_interrupt>:
     126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <servo1_pin_config>:
#include <avr/interrupt.h>
#include <util/delay.h>

//Configure PORTB 5 pin for servo motor 1 operation
void servo1_pin_config (void)
{
     12a:	df 93       	push	r29
     12c:	cf 93       	push	r28
     12e:	cd b7       	in	r28, 0x3d	; 61
     130:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x20;  //making PORTB 5 pin output
     132:	a4 e2       	ldi	r26, 0x24	; 36
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	e4 e2       	ldi	r30, 0x24	; 36
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	80 62       	ori	r24, 0x20	; 32
     13e:	8c 93       	st	X, r24
 PORTB = PORTB | 0x20; //setting PORTB 5 pin to logic 1
     140:	a5 e2       	ldi	r26, 0x25	; 37
     142:	b0 e0       	ldi	r27, 0x00	; 0
     144:	e5 e2       	ldi	r30, 0x25	; 37
     146:	f0 e0       	ldi	r31, 0x00	; 0
     148:	80 81       	ld	r24, Z
     14a:	80 62       	ori	r24, 0x20	; 32
     14c:	8c 93       	st	X, r24
}
     14e:	cf 91       	pop	r28
     150:	df 91       	pop	r29
     152:	08 95       	ret

00000154 <servo2_pin_config>:

//Configure PORTB 6 pin for servo motor 2 operation
void servo2_pin_config (void)
{
     154:	df 93       	push	r29
     156:	cf 93       	push	r28
     158:	cd b7       	in	r28, 0x3d	; 61
     15a:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x40;  //making PORTB 6 pin output
     15c:	a4 e2       	ldi	r26, 0x24	; 36
     15e:	b0 e0       	ldi	r27, 0x00	; 0
     160:	e4 e2       	ldi	r30, 0x24	; 36
     162:	f0 e0       	ldi	r31, 0x00	; 0
     164:	80 81       	ld	r24, Z
     166:	80 64       	ori	r24, 0x40	; 64
     168:	8c 93       	st	X, r24
 PORTB = PORTB | 0x40; //setting PORTB 6 pin to logic 1
     16a:	a5 e2       	ldi	r26, 0x25	; 37
     16c:	b0 e0       	ldi	r27, 0x00	; 0
     16e:	e5 e2       	ldi	r30, 0x25	; 37
     170:	f0 e0       	ldi	r31, 0x00	; 0
     172:	80 81       	ld	r24, Z
     174:	80 64       	ori	r24, 0x40	; 64
     176:	8c 93       	st	X, r24
}
     178:	cf 91       	pop	r28
     17a:	df 91       	pop	r29
     17c:	08 95       	ret

0000017e <servo3_pin_config>:

//Configure PORTB 7 pin for servo motor 3 operation
void servo3_pin_config (void)
{
     17e:	df 93       	push	r29
     180:	cf 93       	push	r28
     182:	cd b7       	in	r28, 0x3d	; 61
     184:	de b7       	in	r29, 0x3e	; 62
 DDRB  = DDRB | 0x80;  //making PORTB 7 pin output
     186:	a4 e2       	ldi	r26, 0x24	; 36
     188:	b0 e0       	ldi	r27, 0x00	; 0
     18a:	e4 e2       	ldi	r30, 0x24	; 36
     18c:	f0 e0       	ldi	r31, 0x00	; 0
     18e:	80 81       	ld	r24, Z
     190:	80 68       	ori	r24, 0x80	; 128
     192:	8c 93       	st	X, r24
 PORTB = PORTB | 0x80; //setting PORTB 7 pin to logic 1
     194:	a5 e2       	ldi	r26, 0x25	; 37
     196:	b0 e0       	ldi	r27, 0x00	; 0
     198:	e5 e2       	ldi	r30, 0x25	; 37
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	80 68       	ori	r24, 0x80	; 128
     1a0:	8c 93       	st	X, r24
}
     1a2:	cf 91       	pop	r28
     1a4:	df 91       	pop	r29
     1a6:	08 95       	ret

000001a8 <servo_port_init>:

//Initialize the ports
void servo_port_init(void)
{
     1a8:	df 93       	push	r29
     1aa:	cf 93       	push	r28
     1ac:	cd b7       	in	r28, 0x3d	; 61
     1ae:	de b7       	in	r29, 0x3e	; 62
 servo1_pin_config(); //Configure PORTB 5 pin for servo motor 1 operation
     1b0:	0e 94 95 00 	call	0x12a	; 0x12a <servo1_pin_config>
 servo2_pin_config(); //Configure PORTB 6 pin for servo motor 2 operation
     1b4:	0e 94 aa 00 	call	0x154	; 0x154 <servo2_pin_config>
 servo3_pin_config(); //Configure PORTB 7 pin for servo motor 3 operation 
     1b8:	0e 94 bf 00 	call	0x17e	; 0x17e <servo3_pin_config>
}
     1bc:	cf 91       	pop	r28
     1be:	df 91       	pop	r29
     1c0:	08 95       	ret

000001c2 <timer1_init>:
//TIMER1 initialization in 10 bit fast PWM mode 
//prescale:256
// WGM: 7) PWM 10bit fast, TOP=0x03FF
// actual value: 42.187Hz
void timer1_init(void)
{
     1c2:	df 93       	push	r29
     1c4:	cf 93       	push	r28
     1c6:	cd b7       	in	r28, 0x3d	; 61
     1c8:	de b7       	in	r29, 0x3e	; 62
 TCCR1B = 0x00; //stop
     1ca:	e1 e8       	ldi	r30, 0x81	; 129
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	10 82       	st	Z, r1
 TCNT1H = 0xFC; //Counter high value to which OCR1xH value is to be compared with
     1d0:	e5 e8       	ldi	r30, 0x85	; 133
     1d2:	f0 e0       	ldi	r31, 0x00	; 0
     1d4:	8c ef       	ldi	r24, 0xFC	; 252
     1d6:	80 83       	st	Z, r24
 TCNT1L = 0x01;    //Counter low value to which OCR1xH value is to be compared with
     1d8:	e4 e8       	ldi	r30, 0x84	; 132
     1da:	f0 e0       	ldi	r31, 0x00	; 0
     1dc:	81 e0       	ldi	r24, 0x01	; 1
     1de:	80 83       	st	Z, r24
 OCR1AH = 0x03;    //Output compare eegister high value for servo 1
     1e0:	e9 e8       	ldi	r30, 0x89	; 137
     1e2:	f0 e0       	ldi	r31, 0x00	; 0
     1e4:	83 e0       	ldi	r24, 0x03	; 3
     1e6:	80 83       	st	Z, r24
 OCR1AL = 0xFF;    //Output Compare Register low Value For servo 1
     1e8:	e8 e8       	ldi	r30, 0x88	; 136
     1ea:	f0 e0       	ldi	r31, 0x00	; 0
     1ec:	8f ef       	ldi	r24, 0xFF	; 255
     1ee:	80 83       	st	Z, r24
 OCR1BH = 0x03;    //Output compare eegister high value for servo 2
     1f0:	eb e8       	ldi	r30, 0x8B	; 139
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	83 e0       	ldi	r24, 0x03	; 3
     1f6:	80 83       	st	Z, r24
 OCR1BL = 0xFF;    //Output Compare Register low Value For servo 2
     1f8:	ea e8       	ldi	r30, 0x8A	; 138
     1fa:	f0 e0       	ldi	r31, 0x00	; 0
     1fc:	8f ef       	ldi	r24, 0xFF	; 255
     1fe:	80 83       	st	Z, r24
 OCR1CH = 0x03;    ///Output compare eegister high value for servo 3
     200:	ed e8       	ldi	r30, 0x8D	; 141
     202:	f0 e0       	ldi	r31, 0x00	; 0
     204:	83 e0       	ldi	r24, 0x03	; 3
     206:	80 83       	st	Z, r24
 OCR1CL = 0xFF;    //Output Compare Register low Value For servo 3
     208:	ec e8       	ldi	r30, 0x8C	; 140
     20a:	f0 e0       	ldi	r31, 0x00	; 0
     20c:	8f ef       	ldi	r24, 0xFF	; 255
     20e:	80 83       	st	Z, r24
 ICR1H  = 0x03;   
     210:	e7 e8       	ldi	r30, 0x87	; 135
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	83 e0       	ldi	r24, 0x03	; 3
     216:	80 83       	st	Z, r24
 ICR1L  = 0xFF;
     218:	e6 e8       	ldi	r30, 0x86	; 134
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	8f ef       	ldi	r24, 0xFF	; 255
     21e:	80 83       	st	Z, r24
 TCCR1A = 0xAB; /*{COM1A1=1, COM1A0=0; COM1B1=1, COM1B0=0; COM1C1=1 COM1C0=0}
     220:	e0 e8       	ldi	r30, 0x80	; 128
     222:	f0 e0       	ldi	r31, 0x00	; 0
     224:	8b ea       	ldi	r24, 0xAB	; 171
     226:	80 83       	st	Z, r24
                     For Overriding normal port functionalit to OCRnA outputs.
                  {WGM11=1, WGM10=1} Along With WGM12 in TCCR1B for Selecting FAST PWM Mode*/
 TCCR1C = 0x00;
     228:	e2 e8       	ldi	r30, 0x82	; 130
     22a:	f0 e0       	ldi	r31, 0x00	; 0
     22c:	10 82       	st	Z, r1
 TCCR1B = 0x0C; //WGM12=1; CS12=1, CS11=0, CS10=0 (Prescaler=256)
     22e:	e1 e8       	ldi	r30, 0x81	; 129
     230:	f0 e0       	ldi	r31, 0x00	; 0
     232:	8c e0       	ldi	r24, 0x0C	; 12
     234:	80 83       	st	Z, r24
}
     236:	cf 91       	pop	r28
     238:	df 91       	pop	r29
     23a:	08 95       	ret

0000023c <init_servo>:


//Function to initialize all the peripherals
void init_servo(void)
{
     23c:	df 93       	push	r29
     23e:	cf 93       	push	r28
     240:	cd b7       	in	r28, 0x3d	; 61
     242:	de b7       	in	r29, 0x3e	; 62
 cli(); //disable all interrupts
     244:	f8 94       	cli
 servo_port_init();
     246:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <servo_port_init>
 timer1_init();
     24a:	0e 94 e1 00 	call	0x1c2	; 0x1c2 <timer1_init>
 sei(); //re-enable interrupts
     24e:	78 94       	sei
}
     250:	cf 91       	pop	r28
     252:	df 91       	pop	r29
     254:	08 95       	ret

00000256 <servo_1>:


//Function to rotate Servo 1 by a specified angle in the multiples of 2.25 degrees
void servo_1(unsigned char degrees) 
{
     256:	0f 93       	push	r16
     258:	1f 93       	push	r17
     25a:	df 93       	push	r29
     25c:	cf 93       	push	r28
     25e:	00 d0       	rcall	.+0      	; 0x260 <servo_1+0xa>
     260:	0f 92       	push	r0
     262:	0f 92       	push	r0
     264:	cd b7       	in	r28, 0x3d	; 61
     266:	de b7       	in	r29, 0x3e	; 62
     268:	8d 83       	std	Y+5, r24	; 0x05
 float PositionPanServo = 0;
     26a:	80 e0       	ldi	r24, 0x00	; 0
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	a0 e0       	ldi	r26, 0x00	; 0
     270:	b0 e0       	ldi	r27, 0x00	; 0
     272:	89 83       	std	Y+1, r24	; 0x01
     274:	9a 83       	std	Y+2, r25	; 0x02
     276:	ab 83       	std	Y+3, r26	; 0x03
     278:	bc 83       	std	Y+4, r27	; 0x04
 PositionPanServo = ((float)degrees / 2.25) + 21.0;
     27a:	8d 81       	ldd	r24, Y+5	; 0x05
     27c:	88 2f       	mov	r24, r24
     27e:	90 e0       	ldi	r25, 0x00	; 0
     280:	a0 e0       	ldi	r26, 0x00	; 0
     282:	b0 e0       	ldi	r27, 0x00	; 0
     284:	bc 01       	movw	r22, r24
     286:	cd 01       	movw	r24, r26
     288:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__floatunsisf>
     28c:	dc 01       	movw	r26, r24
     28e:	cb 01       	movw	r24, r22
     290:	bc 01       	movw	r22, r24
     292:	cd 01       	movw	r24, r26
     294:	20 e0       	ldi	r18, 0x00	; 0
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	40 e1       	ldi	r20, 0x10	; 16
     29a:	50 e4       	ldi	r21, 0x40	; 64
     29c:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__divsf3>
     2a0:	dc 01       	movw	r26, r24
     2a2:	cb 01       	movw	r24, r22
     2a4:	bc 01       	movw	r22, r24
     2a6:	cd 01       	movw	r24, r26
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	30 e0       	ldi	r19, 0x00	; 0
     2ac:	48 ea       	ldi	r20, 0xA8	; 168
     2ae:	51 e4       	ldi	r21, 0x41	; 65
     2b0:	0e 94 3a 11 	call	0x2274	; 0x2274 <__addsf3>
     2b4:	dc 01       	movw	r26, r24
     2b6:	cb 01       	movw	r24, r22
     2b8:	89 83       	std	Y+1, r24	; 0x01
     2ba:	9a 83       	std	Y+2, r25	; 0x02
     2bc:	ab 83       	std	Y+3, r26	; 0x03
     2be:	bc 83       	std	Y+4, r27	; 0x04
 OCR1AH = 0x00;
     2c0:	e9 e8       	ldi	r30, 0x89	; 137
     2c2:	f0 e0       	ldi	r31, 0x00	; 0
     2c4:	10 82       	st	Z, r1
 OCR1AL = (unsigned char) PositionPanServo;
     2c6:	08 e8       	ldi	r16, 0x88	; 136
     2c8:	10 e0       	ldi	r17, 0x00	; 0
     2ca:	69 81       	ldd	r22, Y+1	; 0x01
     2cc:	7a 81       	ldd	r23, Y+2	; 0x02
     2ce:	8b 81       	ldd	r24, Y+3	; 0x03
     2d0:	9c 81       	ldd	r25, Y+4	; 0x04
     2d2:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     2d6:	dc 01       	movw	r26, r24
     2d8:	cb 01       	movw	r24, r22
     2da:	f8 01       	movw	r30, r16
     2dc:	80 83       	st	Z, r24
}
     2de:	0f 90       	pop	r0
     2e0:	0f 90       	pop	r0
     2e2:	0f 90       	pop	r0
     2e4:	0f 90       	pop	r0
     2e6:	0f 90       	pop	r0
     2e8:	cf 91       	pop	r28
     2ea:	df 91       	pop	r29
     2ec:	1f 91       	pop	r17
     2ee:	0f 91       	pop	r16
     2f0:	08 95       	ret

000002f2 <servo_2>:


//Function to rotate Servo 2 by a specified angle in the multiples of 2.25 degrees
void servo_2(unsigned char degrees)
{
     2f2:	0f 93       	push	r16
     2f4:	1f 93       	push	r17
     2f6:	df 93       	push	r29
     2f8:	cf 93       	push	r28
     2fa:	00 d0       	rcall	.+0      	; 0x2fc <servo_2+0xa>
     2fc:	0f 92       	push	r0
     2fe:	0f 92       	push	r0
     300:	cd b7       	in	r28, 0x3d	; 61
     302:	de b7       	in	r29, 0x3e	; 62
     304:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
     306:	80 e0       	ldi	r24, 0x00	; 0
     308:	90 e0       	ldi	r25, 0x00	; 0
     30a:	a0 e0       	ldi	r26, 0x00	; 0
     30c:	b0 e0       	ldi	r27, 0x00	; 0
     30e:	89 83       	std	Y+1, r24	; 0x01
     310:	9a 83       	std	Y+2, r25	; 0x02
     312:	ab 83       	std	Y+3, r26	; 0x03
     314:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 2.25) + 21.0;
     316:	8d 81       	ldd	r24, Y+5	; 0x05
     318:	88 2f       	mov	r24, r24
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	a0 e0       	ldi	r26, 0x00	; 0
     31e:	b0 e0       	ldi	r27, 0x00	; 0
     320:	bc 01       	movw	r22, r24
     322:	cd 01       	movw	r24, r26
     324:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__floatunsisf>
     328:	dc 01       	movw	r26, r24
     32a:	cb 01       	movw	r24, r22
     32c:	bc 01       	movw	r22, r24
     32e:	cd 01       	movw	r24, r26
     330:	20 e0       	ldi	r18, 0x00	; 0
     332:	30 e0       	ldi	r19, 0x00	; 0
     334:	40 e1       	ldi	r20, 0x10	; 16
     336:	50 e4       	ldi	r21, 0x40	; 64
     338:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__divsf3>
     33c:	dc 01       	movw	r26, r24
     33e:	cb 01       	movw	r24, r22
     340:	bc 01       	movw	r22, r24
     342:	cd 01       	movw	r24, r26
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	48 ea       	ldi	r20, 0xA8	; 168
     34a:	51 e4       	ldi	r21, 0x41	; 65
     34c:	0e 94 3a 11 	call	0x2274	; 0x2274 <__addsf3>
     350:	dc 01       	movw	r26, r24
     352:	cb 01       	movw	r24, r22
     354:	89 83       	std	Y+1, r24	; 0x01
     356:	9a 83       	std	Y+2, r25	; 0x02
     358:	ab 83       	std	Y+3, r26	; 0x03
     35a:	bc 83       	std	Y+4, r27	; 0x04
 OCR1BH = 0x00;
     35c:	eb e8       	ldi	r30, 0x8B	; 139
     35e:	f0 e0       	ldi	r31, 0x00	; 0
     360:	10 82       	st	Z, r1
 OCR1BL = (unsigned char) PositionTiltServo;
     362:	0a e8       	ldi	r16, 0x8A	; 138
     364:	10 e0       	ldi	r17, 0x00	; 0
     366:	69 81       	ldd	r22, Y+1	; 0x01
     368:	7a 81       	ldd	r23, Y+2	; 0x02
     36a:	8b 81       	ldd	r24, Y+3	; 0x03
     36c:	9c 81       	ldd	r25, Y+4	; 0x04
     36e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     372:	dc 01       	movw	r26, r24
     374:	cb 01       	movw	r24, r22
     376:	f8 01       	movw	r30, r16
     378:	80 83       	st	Z, r24
}
     37a:	0f 90       	pop	r0
     37c:	0f 90       	pop	r0
     37e:	0f 90       	pop	r0
     380:	0f 90       	pop	r0
     382:	0f 90       	pop	r0
     384:	cf 91       	pop	r28
     386:	df 91       	pop	r29
     388:	1f 91       	pop	r17
     38a:	0f 91       	pop	r16
     38c:	08 95       	ret

0000038e <servo_3>:

//Function to rotate Servo 3 by a specified angle in the multiples of 2.25 degrees
void servo_3(unsigned char degrees)
{
     38e:	0f 93       	push	r16
     390:	1f 93       	push	r17
     392:	df 93       	push	r29
     394:	cf 93       	push	r28
     396:	00 d0       	rcall	.+0      	; 0x398 <servo_3+0xa>
     398:	0f 92       	push	r0
     39a:	0f 92       	push	r0
     39c:	cd b7       	in	r28, 0x3d	; 61
     39e:	de b7       	in	r29, 0x3e	; 62
     3a0:	8d 83       	std	Y+5, r24	; 0x05
 float PositionTiltServo = 0;
     3a2:	80 e0       	ldi	r24, 0x00	; 0
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	a0 e0       	ldi	r26, 0x00	; 0
     3a8:	b0 e0       	ldi	r27, 0x00	; 0
     3aa:	89 83       	std	Y+1, r24	; 0x01
     3ac:	9a 83       	std	Y+2, r25	; 0x02
     3ae:	ab 83       	std	Y+3, r26	; 0x03
     3b0:	bc 83       	std	Y+4, r27	; 0x04
 PositionTiltServo = ((float)degrees / 2.25) + 21.0;
     3b2:	8d 81       	ldd	r24, Y+5	; 0x05
     3b4:	88 2f       	mov	r24, r24
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	a0 e0       	ldi	r26, 0x00	; 0
     3ba:	b0 e0       	ldi	r27, 0x00	; 0
     3bc:	bc 01       	movw	r22, r24
     3be:	cd 01       	movw	r24, r26
     3c0:	0e 94 f1 13 	call	0x27e2	; 0x27e2 <__floatunsisf>
     3c4:	dc 01       	movw	r26, r24
     3c6:	cb 01       	movw	r24, r22
     3c8:	bc 01       	movw	r22, r24
     3ca:	cd 01       	movw	r24, r26
     3cc:	20 e0       	ldi	r18, 0x00	; 0
     3ce:	30 e0       	ldi	r19, 0x00	; 0
     3d0:	40 e1       	ldi	r20, 0x10	; 16
     3d2:	50 e4       	ldi	r21, 0x40	; 64
     3d4:	0e 94 61 12 	call	0x24c2	; 0x24c2 <__divsf3>
     3d8:	dc 01       	movw	r26, r24
     3da:	cb 01       	movw	r24, r22
     3dc:	bc 01       	movw	r22, r24
     3de:	cd 01       	movw	r24, r26
     3e0:	20 e0       	ldi	r18, 0x00	; 0
     3e2:	30 e0       	ldi	r19, 0x00	; 0
     3e4:	48 ea       	ldi	r20, 0xA8	; 168
     3e6:	51 e4       	ldi	r21, 0x41	; 65
     3e8:	0e 94 3a 11 	call	0x2274	; 0x2274 <__addsf3>
     3ec:	dc 01       	movw	r26, r24
     3ee:	cb 01       	movw	r24, r22
     3f0:	89 83       	std	Y+1, r24	; 0x01
     3f2:	9a 83       	std	Y+2, r25	; 0x02
     3f4:	ab 83       	std	Y+3, r26	; 0x03
     3f6:	bc 83       	std	Y+4, r27	; 0x04
 OCR1CH = 0x00;
     3f8:	ed e8       	ldi	r30, 0x8D	; 141
     3fa:	f0 e0       	ldi	r31, 0x00	; 0
     3fc:	10 82       	st	Z, r1
 OCR1CL = (unsigned char) PositionTiltServo;
     3fe:	0c e8       	ldi	r16, 0x8C	; 140
     400:	10 e0       	ldi	r17, 0x00	; 0
     402:	69 81       	ldd	r22, Y+1	; 0x01
     404:	7a 81       	ldd	r23, Y+2	; 0x02
     406:	8b 81       	ldd	r24, Y+3	; 0x03
     408:	9c 81       	ldd	r25, Y+4	; 0x04
     40a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	f8 01       	movw	r30, r16
     414:	80 83       	st	Z, r24
}
     416:	0f 90       	pop	r0
     418:	0f 90       	pop	r0
     41a:	0f 90       	pop	r0
     41c:	0f 90       	pop	r0
     41e:	0f 90       	pop	r0
     420:	cf 91       	pop	r28
     422:	df 91       	pop	r29
     424:	1f 91       	pop	r17
     426:	0f 91       	pop	r16
     428:	08 95       	ret

0000042a <servo_1_free>:
//servo_free functions unlocks the servo motors from the any angle
//and make them free by giving 100% duty cycle at the PWM. This function can be used to
//reduce the power consumption of the motor if it is holding load against the gravity.

void servo_1_free (void) //makes servo 1 free rotating
{
     42a:	df 93       	push	r29
     42c:	cf 93       	push	r28
     42e:	cd b7       	in	r28, 0x3d	; 61
     430:	de b7       	in	r29, 0x3e	; 62
 OCR1AH = 0x03;
     432:	e9 e8       	ldi	r30, 0x89	; 137
     434:	f0 e0       	ldi	r31, 0x00	; 0
     436:	83 e0       	ldi	r24, 0x03	; 3
     438:	80 83       	st	Z, r24
 OCR1AL = 0xFF; //Servo 1 off
     43a:	e8 e8       	ldi	r30, 0x88	; 136
     43c:	f0 e0       	ldi	r31, 0x00	; 0
     43e:	8f ef       	ldi	r24, 0xFF	; 255
     440:	80 83       	st	Z, r24
}
     442:	cf 91       	pop	r28
     444:	df 91       	pop	r29
     446:	08 95       	ret

00000448 <servo_2_free>:

void servo_2_free (void) //makes servo 2 free rotating
{
     448:	df 93       	push	r29
     44a:	cf 93       	push	r28
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
 OCR1BH = 0x03;
     450:	eb e8       	ldi	r30, 0x8B	; 139
     452:	f0 e0       	ldi	r31, 0x00	; 0
     454:	83 e0       	ldi	r24, 0x03	; 3
     456:	80 83       	st	Z, r24
 OCR1BL = 0xFF; //Servo 2 off
     458:	ea e8       	ldi	r30, 0x8A	; 138
     45a:	f0 e0       	ldi	r31, 0x00	; 0
     45c:	8f ef       	ldi	r24, 0xFF	; 255
     45e:	80 83       	st	Z, r24
}
     460:	cf 91       	pop	r28
     462:	df 91       	pop	r29
     464:	08 95       	ret

00000466 <servo_3_free>:

void servo_3_free (void) //makes servo 3 free rotating
{
     466:	df 93       	push	r29
     468:	cf 93       	push	r28
     46a:	cd b7       	in	r28, 0x3d	; 61
     46c:	de b7       	in	r29, 0x3e	; 62
 OCR1CH = 0x03;
     46e:	ed e8       	ldi	r30, 0x8D	; 141
     470:	f0 e0       	ldi	r31, 0x00	; 0
     472:	83 e0       	ldi	r24, 0x03	; 3
     474:	80 83       	st	Z, r24
 OCR1CL = 0xFF; //Servo 3 off
     476:	ec e8       	ldi	r30, 0x8C	; 140
     478:	f0 e0       	ldi	r31, 0x00	; 0
     47a:	8f ef       	ldi	r24, 0xFF	; 255
     47c:	80 83       	st	Z, r24
}
     47e:	cf 91       	pop	r28
     480:	df 91       	pop	r29
     482:	08 95       	ret

00000484 <lcd_port_config>:
unsigned int thousand;
unsigned int million;

//Function to configure LCD port
void lcd_port_config (void)
{
     484:	df 93       	push	r29
     486:	cf 93       	push	r28
     488:	cd b7       	in	r28, 0x3d	; 61
     48a:	de b7       	in	r29, 0x3e	; 62
 DDRC = DDRC | 0xF7; //all the LCD pin's direction set as output
     48c:	a7 e2       	ldi	r26, 0x27	; 39
     48e:	b0 e0       	ldi	r27, 0x00	; 0
     490:	e7 e2       	ldi	r30, 0x27	; 39
     492:	f0 e0       	ldi	r31, 0x00	; 0
     494:	80 81       	ld	r24, Z
     496:	87 6f       	ori	r24, 0xF7	; 247
     498:	8c 93       	st	X, r24
 PORTC = PORTC & 0x80; // all the LCD pins are set to logic 0 except PORTC 7
     49a:	a8 e2       	ldi	r26, 0x28	; 40
     49c:	b0 e0       	ldi	r27, 0x00	; 0
     49e:	e8 e2       	ldi	r30, 0x28	; 40
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 81       	ld	r24, Z
     4a4:	80 78       	andi	r24, 0x80	; 128
     4a6:	8c 93       	st	X, r24
}
     4a8:	cf 91       	pop	r28
     4aa:	df 91       	pop	r29
     4ac:	08 95       	ret

000004ae <lcd_port_init>:

//Function to Initialize PORTS
void lcd_port_init()
{
     4ae:	df 93       	push	r29
     4b0:	cf 93       	push	r28
     4b2:	cd b7       	in	r28, 0x3d	; 61
     4b4:	de b7       	in	r29, 0x3e	; 62
	lcd_port_config();
     4b6:	0e 94 42 02 	call	0x484	; 0x484 <lcd_port_config>
}
     4ba:	cf 91       	pop	r28
     4bc:	df 91       	pop	r29
     4be:	08 95       	ret

000004c0 <lcd_set_4bit>:

//Function to Reset LCD
void lcd_set_4bit()
{
     4c0:	0f 93       	push	r16
     4c2:	1f 93       	push	r17
     4c4:	df 93       	push	r29
     4c6:	cf 93       	push	r28
     4c8:	cd b7       	in	r28, 0x3d	; 61
     4ca:	de b7       	in	r29, 0x3e	; 62
     4cc:	c0 57       	subi	r28, 0x70	; 112
     4ce:	d0 40       	sbci	r29, 0x00	; 0
     4d0:	0f b6       	in	r0, 0x3f	; 63
     4d2:	f8 94       	cli
     4d4:	de bf       	out	0x3e, r29	; 62
     4d6:	0f be       	out	0x3f, r0	; 63
     4d8:	cd bf       	out	0x3d, r28	; 61
     4da:	fe 01       	movw	r30, r28
     4dc:	e3 59       	subi	r30, 0x93	; 147
     4de:	ff 4f       	sbci	r31, 0xFF	; 255
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	a0 e8       	ldi	r26, 0x80	; 128
     4e6:	bf e3       	ldi	r27, 0x3F	; 63
     4e8:	80 83       	st	Z, r24
     4ea:	91 83       	std	Z+1, r25	; 0x01
     4ec:	a2 83       	std	Z+2, r26	; 0x02
     4ee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     4f0:	8e 01       	movw	r16, r28
     4f2:	07 59       	subi	r16, 0x97	; 151
     4f4:	1f 4f       	sbci	r17, 0xFF	; 255
     4f6:	fe 01       	movw	r30, r28
     4f8:	e3 59       	subi	r30, 0x93	; 147
     4fa:	ff 4f       	sbci	r31, 0xFF	; 255
     4fc:	60 81       	ld	r22, Z
     4fe:	71 81       	ldd	r23, Z+1	; 0x01
     500:	82 81       	ldd	r24, Z+2	; 0x02
     502:	93 81       	ldd	r25, Z+3	; 0x03
     504:	2d ec       	ldi	r18, 0xCD	; 205
     506:	3c ec       	ldi	r19, 0xCC	; 204
     508:	4c e2       	ldi	r20, 0x2C	; 44
     50a:	55 e4       	ldi	r21, 0x45	; 69
     50c:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     510:	dc 01       	movw	r26, r24
     512:	cb 01       	movw	r24, r22
     514:	f8 01       	movw	r30, r16
     516:	80 83       	st	Z, r24
     518:	91 83       	std	Z+1, r25	; 0x01
     51a:	a2 83       	std	Z+2, r26	; 0x02
     51c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     51e:	fe 01       	movw	r30, r28
     520:	e7 59       	subi	r30, 0x97	; 151
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	60 81       	ld	r22, Z
     526:	71 81       	ldd	r23, Z+1	; 0x01
     528:	82 81       	ldd	r24, Z+2	; 0x02
     52a:	93 81       	ldd	r25, Z+3	; 0x03
     52c:	20 e0       	ldi	r18, 0x00	; 0
     52e:	30 e0       	ldi	r19, 0x00	; 0
     530:	40 e8       	ldi	r20, 0x80	; 128
     532:	5f e3       	ldi	r21, 0x3F	; 63
     534:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
     538:	88 23       	and	r24, r24
     53a:	44 f4       	brge	.+16     	; 0x54c <lcd_set_4bit+0x8c>
		__ticks = 1;
     53c:	fe 01       	movw	r30, r28
     53e:	e9 59       	subi	r30, 0x99	; 153
     540:	ff 4f       	sbci	r31, 0xFF	; 255
     542:	81 e0       	ldi	r24, 0x01	; 1
     544:	90 e0       	ldi	r25, 0x00	; 0
     546:	91 83       	std	Z+1, r25	; 0x01
     548:	80 83       	st	Z, r24
     54a:	64 c0       	rjmp	.+200    	; 0x614 <lcd_set_4bit+0x154>
	else if (__tmp > 65535)
     54c:	fe 01       	movw	r30, r28
     54e:	e7 59       	subi	r30, 0x97	; 151
     550:	ff 4f       	sbci	r31, 0xFF	; 255
     552:	60 81       	ld	r22, Z
     554:	71 81       	ldd	r23, Z+1	; 0x01
     556:	82 81       	ldd	r24, Z+2	; 0x02
     558:	93 81       	ldd	r25, Z+3	; 0x03
     55a:	20 e0       	ldi	r18, 0x00	; 0
     55c:	3f ef       	ldi	r19, 0xFF	; 255
     55e:	4f e7       	ldi	r20, 0x7F	; 127
     560:	57 e4       	ldi	r21, 0x47	; 71
     562:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
     566:	18 16       	cp	r1, r24
     568:	0c f0       	brlt	.+2      	; 0x56c <lcd_set_4bit+0xac>
     56a:	43 c0       	rjmp	.+134    	; 0x5f2 <lcd_set_4bit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     56c:	fe 01       	movw	r30, r28
     56e:	e3 59       	subi	r30, 0x93	; 147
     570:	ff 4f       	sbci	r31, 0xFF	; 255
     572:	60 81       	ld	r22, Z
     574:	71 81       	ldd	r23, Z+1	; 0x01
     576:	82 81       	ldd	r24, Z+2	; 0x02
     578:	93 81       	ldd	r25, Z+3	; 0x03
     57a:	20 e0       	ldi	r18, 0x00	; 0
     57c:	30 e0       	ldi	r19, 0x00	; 0
     57e:	40 e2       	ldi	r20, 0x20	; 32
     580:	51 e4       	ldi	r21, 0x41	; 65
     582:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     586:	dc 01       	movw	r26, r24
     588:	cb 01       	movw	r24, r22
     58a:	8e 01       	movw	r16, r28
     58c:	09 59       	subi	r16, 0x99	; 153
     58e:	1f 4f       	sbci	r17, 0xFF	; 255
     590:	bc 01       	movw	r22, r24
     592:	cd 01       	movw	r24, r26
     594:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     598:	dc 01       	movw	r26, r24
     59a:	cb 01       	movw	r24, r22
     59c:	f8 01       	movw	r30, r16
     59e:	91 83       	std	Z+1, r25	; 0x01
     5a0:	80 83       	st	Z, r24
     5a2:	1f c0       	rjmp	.+62     	; 0x5e2 <lcd_set_4bit+0x122>
     5a4:	fe 01       	movw	r30, r28
     5a6:	eb 59       	subi	r30, 0x9B	; 155
     5a8:	ff 4f       	sbci	r31, 0xFF	; 255
     5aa:	84 e1       	ldi	r24, 0x14	; 20
     5ac:	91 e0       	ldi	r25, 0x01	; 1
     5ae:	91 83       	std	Z+1, r25	; 0x01
     5b0:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     5b2:	fe 01       	movw	r30, r28
     5b4:	eb 59       	subi	r30, 0x9B	; 155
     5b6:	ff 4f       	sbci	r31, 0xFF	; 255
     5b8:	80 81       	ld	r24, Z
     5ba:	91 81       	ldd	r25, Z+1	; 0x01
     5bc:	01 97       	sbiw	r24, 0x01	; 1
     5be:	f1 f7       	brne	.-4      	; 0x5bc <lcd_set_4bit+0xfc>
     5c0:	fe 01       	movw	r30, r28
     5c2:	eb 59       	subi	r30, 0x9B	; 155
     5c4:	ff 4f       	sbci	r31, 0xFF	; 255
     5c6:	91 83       	std	Z+1, r25	; 0x01
     5c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     5ca:	de 01       	movw	r26, r28
     5cc:	a9 59       	subi	r26, 0x99	; 153
     5ce:	bf 4f       	sbci	r27, 0xFF	; 255
     5d0:	fe 01       	movw	r30, r28
     5d2:	e9 59       	subi	r30, 0x99	; 153
     5d4:	ff 4f       	sbci	r31, 0xFF	; 255
     5d6:	80 81       	ld	r24, Z
     5d8:	91 81       	ldd	r25, Z+1	; 0x01
     5da:	01 97       	sbiw	r24, 0x01	; 1
     5dc:	11 96       	adiw	r26, 0x01	; 1
     5de:	9c 93       	st	X, r25
     5e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     5e2:	fe 01       	movw	r30, r28
     5e4:	e9 59       	subi	r30, 0x99	; 153
     5e6:	ff 4f       	sbci	r31, 0xFF	; 255
     5e8:	80 81       	ld	r24, Z
     5ea:	91 81       	ldd	r25, Z+1	; 0x01
     5ec:	00 97       	sbiw	r24, 0x00	; 0
     5ee:	d1 f6       	brne	.-76     	; 0x5a4 <lcd_set_4bit+0xe4>
     5f0:	27 c0       	rjmp	.+78     	; 0x640 <lcd_set_4bit+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     5f2:	8e 01       	movw	r16, r28
     5f4:	09 59       	subi	r16, 0x99	; 153
     5f6:	1f 4f       	sbci	r17, 0xFF	; 255
     5f8:	fe 01       	movw	r30, r28
     5fa:	e7 59       	subi	r30, 0x97	; 151
     5fc:	ff 4f       	sbci	r31, 0xFF	; 255
     5fe:	60 81       	ld	r22, Z
     600:	71 81       	ldd	r23, Z+1	; 0x01
     602:	82 81       	ldd	r24, Z+2	; 0x02
     604:	93 81       	ldd	r25, Z+3	; 0x03
     606:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     60a:	dc 01       	movw	r26, r24
     60c:	cb 01       	movw	r24, r22
     60e:	f8 01       	movw	r30, r16
     610:	91 83       	std	Z+1, r25	; 0x01
     612:	80 83       	st	Z, r24
     614:	de 01       	movw	r26, r28
     616:	ad 59       	subi	r26, 0x9D	; 157
     618:	bf 4f       	sbci	r27, 0xFF	; 255
     61a:	fe 01       	movw	r30, r28
     61c:	e9 59       	subi	r30, 0x99	; 153
     61e:	ff 4f       	sbci	r31, 0xFF	; 255
     620:	80 81       	ld	r24, Z
     622:	91 81       	ldd	r25, Z+1	; 0x01
     624:	8d 93       	st	X+, r24
     626:	9c 93       	st	X, r25
     628:	fe 01       	movw	r30, r28
     62a:	ed 59       	subi	r30, 0x9D	; 157
     62c:	ff 4f       	sbci	r31, 0xFF	; 255
     62e:	80 81       	ld	r24, Z
     630:	91 81       	ldd	r25, Z+1	; 0x01
     632:	01 97       	sbiw	r24, 0x01	; 1
     634:	f1 f7       	brne	.-4      	; 0x632 <lcd_set_4bit+0x172>
     636:	fe 01       	movw	r30, r28
     638:	ed 59       	subi	r30, 0x9D	; 157
     63a:	ff 4f       	sbci	r31, 0xFF	; 255
     63c:	91 83       	std	Z+1, r25	; 0x01
     63e:	80 83       	st	Z, r24
	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     640:	a8 e2       	ldi	r26, 0x28	; 40
     642:	b0 e0       	ldi	r27, 0x00	; 0
     644:	e8 e2       	ldi	r30, 0x28	; 40
     646:	f0 e0       	ldi	r31, 0x00	; 0
     648:	80 81       	ld	r24, Z
     64a:	8e 7f       	andi	r24, 0xFE	; 254
     64c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     64e:	a8 e2       	ldi	r26, 0x28	; 40
     650:	b0 e0       	ldi	r27, 0x00	; 0
     652:	e8 e2       	ldi	r30, 0x28	; 40
     654:	f0 e0       	ldi	r31, 0x00	; 0
     656:	80 81       	ld	r24, Z
     658:	8d 7f       	andi	r24, 0xFD	; 253
     65a:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     65c:	e8 e2       	ldi	r30, 0x28	; 40
     65e:	f0 e0       	ldi	r31, 0x00	; 0
     660:	80 e3       	ldi	r24, 0x30	; 48
     662:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     664:	a8 e2       	ldi	r26, 0x28	; 40
     666:	b0 e0       	ldi	r27, 0x00	; 0
     668:	e8 e2       	ldi	r30, 0x28	; 40
     66a:	f0 e0       	ldi	r31, 0x00	; 0
     66c:	80 81       	ld	r24, Z
     66e:	84 60       	ori	r24, 0x04	; 4
     670:	8c 93       	st	X, r24
     672:	fe 01       	movw	r30, r28
     674:	e1 5a       	subi	r30, 0xA1	; 161
     676:	ff 4f       	sbci	r31, 0xFF	; 255
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	a0 ea       	ldi	r26, 0xA0	; 160
     67e:	b0 e4       	ldi	r27, 0x40	; 64
     680:	80 83       	st	Z, r24
     682:	91 83       	std	Z+1, r25	; 0x01
     684:	a2 83       	std	Z+2, r26	; 0x02
     686:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     688:	8e 01       	movw	r16, r28
     68a:	05 5a       	subi	r16, 0xA5	; 165
     68c:	1f 4f       	sbci	r17, 0xFF	; 255
     68e:	fe 01       	movw	r30, r28
     690:	e1 5a       	subi	r30, 0xA1	; 161
     692:	ff 4f       	sbci	r31, 0xFF	; 255
     694:	60 81       	ld	r22, Z
     696:	71 81       	ldd	r23, Z+1	; 0x01
     698:	82 81       	ldd	r24, Z+2	; 0x02
     69a:	93 81       	ldd	r25, Z+3	; 0x03
     69c:	2d ec       	ldi	r18, 0xCD	; 205
     69e:	3c ec       	ldi	r19, 0xCC	; 204
     6a0:	4c e2       	ldi	r20, 0x2C	; 44
     6a2:	55 e4       	ldi	r21, 0x45	; 69
     6a4:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     6a8:	dc 01       	movw	r26, r24
     6aa:	cb 01       	movw	r24, r22
     6ac:	f8 01       	movw	r30, r16
     6ae:	80 83       	st	Z, r24
     6b0:	91 83       	std	Z+1, r25	; 0x01
     6b2:	a2 83       	std	Z+2, r26	; 0x02
     6b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     6b6:	fe 01       	movw	r30, r28
     6b8:	e5 5a       	subi	r30, 0xA5	; 165
     6ba:	ff 4f       	sbci	r31, 0xFF	; 255
     6bc:	60 81       	ld	r22, Z
     6be:	71 81       	ldd	r23, Z+1	; 0x01
     6c0:	82 81       	ldd	r24, Z+2	; 0x02
     6c2:	93 81       	ldd	r25, Z+3	; 0x03
     6c4:	20 e0       	ldi	r18, 0x00	; 0
     6c6:	30 e0       	ldi	r19, 0x00	; 0
     6c8:	40 e8       	ldi	r20, 0x80	; 128
     6ca:	5f e3       	ldi	r21, 0x3F	; 63
     6cc:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
     6d0:	88 23       	and	r24, r24
     6d2:	44 f4       	brge	.+16     	; 0x6e4 <lcd_set_4bit+0x224>
		__ticks = 1;
     6d4:	fe 01       	movw	r30, r28
     6d6:	e7 5a       	subi	r30, 0xA7	; 167
     6d8:	ff 4f       	sbci	r31, 0xFF	; 255
     6da:	81 e0       	ldi	r24, 0x01	; 1
     6dc:	90 e0       	ldi	r25, 0x00	; 0
     6de:	91 83       	std	Z+1, r25	; 0x01
     6e0:	80 83       	st	Z, r24
     6e2:	64 c0       	rjmp	.+200    	; 0x7ac <lcd_set_4bit+0x2ec>
	else if (__tmp > 65535)
     6e4:	fe 01       	movw	r30, r28
     6e6:	e5 5a       	subi	r30, 0xA5	; 165
     6e8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ea:	60 81       	ld	r22, Z
     6ec:	71 81       	ldd	r23, Z+1	; 0x01
     6ee:	82 81       	ldd	r24, Z+2	; 0x02
     6f0:	93 81       	ldd	r25, Z+3	; 0x03
     6f2:	20 e0       	ldi	r18, 0x00	; 0
     6f4:	3f ef       	ldi	r19, 0xFF	; 255
     6f6:	4f e7       	ldi	r20, 0x7F	; 127
     6f8:	57 e4       	ldi	r21, 0x47	; 71
     6fa:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
     6fe:	18 16       	cp	r1, r24
     700:	0c f0       	brlt	.+2      	; 0x704 <lcd_set_4bit+0x244>
     702:	43 c0       	rjmp	.+134    	; 0x78a <lcd_set_4bit+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     704:	fe 01       	movw	r30, r28
     706:	e1 5a       	subi	r30, 0xA1	; 161
     708:	ff 4f       	sbci	r31, 0xFF	; 255
     70a:	60 81       	ld	r22, Z
     70c:	71 81       	ldd	r23, Z+1	; 0x01
     70e:	82 81       	ldd	r24, Z+2	; 0x02
     710:	93 81       	ldd	r25, Z+3	; 0x03
     712:	20 e0       	ldi	r18, 0x00	; 0
     714:	30 e0       	ldi	r19, 0x00	; 0
     716:	40 e2       	ldi	r20, 0x20	; 32
     718:	51 e4       	ldi	r21, 0x41	; 65
     71a:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     71e:	dc 01       	movw	r26, r24
     720:	cb 01       	movw	r24, r22
     722:	8e 01       	movw	r16, r28
     724:	07 5a       	subi	r16, 0xA7	; 167
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	bc 01       	movw	r22, r24
     72a:	cd 01       	movw	r24, r26
     72c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     730:	dc 01       	movw	r26, r24
     732:	cb 01       	movw	r24, r22
     734:	f8 01       	movw	r30, r16
     736:	91 83       	std	Z+1, r25	; 0x01
     738:	80 83       	st	Z, r24
     73a:	1f c0       	rjmp	.+62     	; 0x77a <lcd_set_4bit+0x2ba>
     73c:	fe 01       	movw	r30, r28
     73e:	e9 5a       	subi	r30, 0xA9	; 169
     740:	ff 4f       	sbci	r31, 0xFF	; 255
     742:	84 e1       	ldi	r24, 0x14	; 20
     744:	91 e0       	ldi	r25, 0x01	; 1
     746:	91 83       	std	Z+1, r25	; 0x01
     748:	80 83       	st	Z, r24
     74a:	fe 01       	movw	r30, r28
     74c:	e9 5a       	subi	r30, 0xA9	; 169
     74e:	ff 4f       	sbci	r31, 0xFF	; 255
     750:	80 81       	ld	r24, Z
     752:	91 81       	ldd	r25, Z+1	; 0x01
     754:	01 97       	sbiw	r24, 0x01	; 1
     756:	f1 f7       	brne	.-4      	; 0x754 <lcd_set_4bit+0x294>
     758:	fe 01       	movw	r30, r28
     75a:	e9 5a       	subi	r30, 0xA9	; 169
     75c:	ff 4f       	sbci	r31, 0xFF	; 255
     75e:	91 83       	std	Z+1, r25	; 0x01
     760:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     762:	de 01       	movw	r26, r28
     764:	a7 5a       	subi	r26, 0xA7	; 167
     766:	bf 4f       	sbci	r27, 0xFF	; 255
     768:	fe 01       	movw	r30, r28
     76a:	e7 5a       	subi	r30, 0xA7	; 167
     76c:	ff 4f       	sbci	r31, 0xFF	; 255
     76e:	80 81       	ld	r24, Z
     770:	91 81       	ldd	r25, Z+1	; 0x01
     772:	01 97       	sbiw	r24, 0x01	; 1
     774:	11 96       	adiw	r26, 0x01	; 1
     776:	9c 93       	st	X, r25
     778:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     77a:	fe 01       	movw	r30, r28
     77c:	e7 5a       	subi	r30, 0xA7	; 167
     77e:	ff 4f       	sbci	r31, 0xFF	; 255
     780:	80 81       	ld	r24, Z
     782:	91 81       	ldd	r25, Z+1	; 0x01
     784:	00 97       	sbiw	r24, 0x00	; 0
     786:	d1 f6       	brne	.-76     	; 0x73c <lcd_set_4bit+0x27c>
     788:	27 c0       	rjmp	.+78     	; 0x7d8 <lcd_set_4bit+0x318>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     78a:	8e 01       	movw	r16, r28
     78c:	07 5a       	subi	r16, 0xA7	; 167
     78e:	1f 4f       	sbci	r17, 0xFF	; 255
     790:	fe 01       	movw	r30, r28
     792:	e5 5a       	subi	r30, 0xA5	; 165
     794:	ff 4f       	sbci	r31, 0xFF	; 255
     796:	60 81       	ld	r22, Z
     798:	71 81       	ldd	r23, Z+1	; 0x01
     79a:	82 81       	ldd	r24, Z+2	; 0x02
     79c:	93 81       	ldd	r25, Z+3	; 0x03
     79e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     7a2:	dc 01       	movw	r26, r24
     7a4:	cb 01       	movw	r24, r22
     7a6:	f8 01       	movw	r30, r16
     7a8:	91 83       	std	Z+1, r25	; 0x01
     7aa:	80 83       	st	Z, r24
     7ac:	de 01       	movw	r26, r28
     7ae:	ab 5a       	subi	r26, 0xAB	; 171
     7b0:	bf 4f       	sbci	r27, 0xFF	; 255
     7b2:	fe 01       	movw	r30, r28
     7b4:	e7 5a       	subi	r30, 0xA7	; 167
     7b6:	ff 4f       	sbci	r31, 0xFF	; 255
     7b8:	80 81       	ld	r24, Z
     7ba:	91 81       	ldd	r25, Z+1	; 0x01
     7bc:	8d 93       	st	X+, r24
     7be:	9c 93       	st	X, r25
     7c0:	fe 01       	movw	r30, r28
     7c2:	eb 5a       	subi	r30, 0xAB	; 171
     7c4:	ff 4f       	sbci	r31, 0xFF	; 255
     7c6:	80 81       	ld	r24, Z
     7c8:	91 81       	ldd	r25, Z+1	; 0x01
     7ca:	01 97       	sbiw	r24, 0x01	; 1
     7cc:	f1 f7       	brne	.-4      	; 0x7ca <lcd_set_4bit+0x30a>
     7ce:	fe 01       	movw	r30, r28
     7d0:	eb 5a       	subi	r30, 0xAB	; 171
     7d2:	ff 4f       	sbci	r31, 0xFF	; 255
     7d4:	91 83       	std	Z+1, r25	; 0x01
     7d6:	80 83       	st	Z, r24
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     7d8:	a8 e2       	ldi	r26, 0x28	; 40
     7da:	b0 e0       	ldi	r27, 0x00	; 0
     7dc:	e8 e2       	ldi	r30, 0x28	; 40
     7de:	f0 e0       	ldi	r31, 0x00	; 0
     7e0:	80 81       	ld	r24, Z
     7e2:	8b 7f       	andi	r24, 0xFB	; 251
     7e4:	8c 93       	st	X, r24
     7e6:	fe 01       	movw	r30, r28
     7e8:	ef 5a       	subi	r30, 0xAF	; 175
     7ea:	ff 4f       	sbci	r31, 0xFF	; 255
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	90 e0       	ldi	r25, 0x00	; 0
     7f0:	a0 e8       	ldi	r26, 0x80	; 128
     7f2:	bf e3       	ldi	r27, 0x3F	; 63
     7f4:	80 83       	st	Z, r24
     7f6:	91 83       	std	Z+1, r25	; 0x01
     7f8:	a2 83       	std	Z+2, r26	; 0x02
     7fa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     7fc:	8e 01       	movw	r16, r28
     7fe:	03 5b       	subi	r16, 0xB3	; 179
     800:	1f 4f       	sbci	r17, 0xFF	; 255
     802:	fe 01       	movw	r30, r28
     804:	ef 5a       	subi	r30, 0xAF	; 175
     806:	ff 4f       	sbci	r31, 0xFF	; 255
     808:	60 81       	ld	r22, Z
     80a:	71 81       	ldd	r23, Z+1	; 0x01
     80c:	82 81       	ldd	r24, Z+2	; 0x02
     80e:	93 81       	ldd	r25, Z+3	; 0x03
     810:	2d ec       	ldi	r18, 0xCD	; 205
     812:	3c ec       	ldi	r19, 0xCC	; 204
     814:	4c e2       	ldi	r20, 0x2C	; 44
     816:	55 e4       	ldi	r21, 0x45	; 69
     818:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     81c:	dc 01       	movw	r26, r24
     81e:	cb 01       	movw	r24, r22
     820:	f8 01       	movw	r30, r16
     822:	80 83       	st	Z, r24
     824:	91 83       	std	Z+1, r25	; 0x01
     826:	a2 83       	std	Z+2, r26	; 0x02
     828:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     82a:	fe 01       	movw	r30, r28
     82c:	e3 5b       	subi	r30, 0xB3	; 179
     82e:	ff 4f       	sbci	r31, 0xFF	; 255
     830:	60 81       	ld	r22, Z
     832:	71 81       	ldd	r23, Z+1	; 0x01
     834:	82 81       	ldd	r24, Z+2	; 0x02
     836:	93 81       	ldd	r25, Z+3	; 0x03
     838:	20 e0       	ldi	r18, 0x00	; 0
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	40 e8       	ldi	r20, 0x80	; 128
     83e:	5f e3       	ldi	r21, 0x3F	; 63
     840:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
     844:	88 23       	and	r24, r24
     846:	44 f4       	brge	.+16     	; 0x858 <lcd_set_4bit+0x398>
		__ticks = 1;
     848:	fe 01       	movw	r30, r28
     84a:	e5 5b       	subi	r30, 0xB5	; 181
     84c:	ff 4f       	sbci	r31, 0xFF	; 255
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	91 83       	std	Z+1, r25	; 0x01
     854:	80 83       	st	Z, r24
     856:	64 c0       	rjmp	.+200    	; 0x920 <lcd_set_4bit+0x460>
	else if (__tmp > 65535)
     858:	fe 01       	movw	r30, r28
     85a:	e3 5b       	subi	r30, 0xB3	; 179
     85c:	ff 4f       	sbci	r31, 0xFF	; 255
     85e:	60 81       	ld	r22, Z
     860:	71 81       	ldd	r23, Z+1	; 0x01
     862:	82 81       	ldd	r24, Z+2	; 0x02
     864:	93 81       	ldd	r25, Z+3	; 0x03
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	3f ef       	ldi	r19, 0xFF	; 255
     86a:	4f e7       	ldi	r20, 0x7F	; 127
     86c:	57 e4       	ldi	r21, 0x47	; 71
     86e:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
     872:	18 16       	cp	r1, r24
     874:	0c f0       	brlt	.+2      	; 0x878 <lcd_set_4bit+0x3b8>
     876:	43 c0       	rjmp	.+134    	; 0x8fe <lcd_set_4bit+0x43e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     878:	fe 01       	movw	r30, r28
     87a:	ef 5a       	subi	r30, 0xAF	; 175
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	60 81       	ld	r22, Z
     880:	71 81       	ldd	r23, Z+1	; 0x01
     882:	82 81       	ldd	r24, Z+2	; 0x02
     884:	93 81       	ldd	r25, Z+3	; 0x03
     886:	20 e0       	ldi	r18, 0x00	; 0
     888:	30 e0       	ldi	r19, 0x00	; 0
     88a:	40 e2       	ldi	r20, 0x20	; 32
     88c:	51 e4       	ldi	r21, 0x41	; 65
     88e:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     892:	dc 01       	movw	r26, r24
     894:	cb 01       	movw	r24, r22
     896:	8e 01       	movw	r16, r28
     898:	05 5b       	subi	r16, 0xB5	; 181
     89a:	1f 4f       	sbci	r17, 0xFF	; 255
     89c:	bc 01       	movw	r22, r24
     89e:	cd 01       	movw	r24, r26
     8a0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     8a4:	dc 01       	movw	r26, r24
     8a6:	cb 01       	movw	r24, r22
     8a8:	f8 01       	movw	r30, r16
     8aa:	91 83       	std	Z+1, r25	; 0x01
     8ac:	80 83       	st	Z, r24
     8ae:	1f c0       	rjmp	.+62     	; 0x8ee <lcd_set_4bit+0x42e>
     8b0:	fe 01       	movw	r30, r28
     8b2:	e7 5b       	subi	r30, 0xB7	; 183
     8b4:	ff 4f       	sbci	r31, 0xFF	; 255
     8b6:	84 e1       	ldi	r24, 0x14	; 20
     8b8:	91 e0       	ldi	r25, 0x01	; 1
     8ba:	91 83       	std	Z+1, r25	; 0x01
     8bc:	80 83       	st	Z, r24
     8be:	fe 01       	movw	r30, r28
     8c0:	e7 5b       	subi	r30, 0xB7	; 183
     8c2:	ff 4f       	sbci	r31, 0xFF	; 255
     8c4:	80 81       	ld	r24, Z
     8c6:	91 81       	ldd	r25, Z+1	; 0x01
     8c8:	01 97       	sbiw	r24, 0x01	; 1
     8ca:	f1 f7       	brne	.-4      	; 0x8c8 <lcd_set_4bit+0x408>
     8cc:	fe 01       	movw	r30, r28
     8ce:	e7 5b       	subi	r30, 0xB7	; 183
     8d0:	ff 4f       	sbci	r31, 0xFF	; 255
     8d2:	91 83       	std	Z+1, r25	; 0x01
     8d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     8d6:	de 01       	movw	r26, r28
     8d8:	a5 5b       	subi	r26, 0xB5	; 181
     8da:	bf 4f       	sbci	r27, 0xFF	; 255
     8dc:	fe 01       	movw	r30, r28
     8de:	e5 5b       	subi	r30, 0xB5	; 181
     8e0:	ff 4f       	sbci	r31, 0xFF	; 255
     8e2:	80 81       	ld	r24, Z
     8e4:	91 81       	ldd	r25, Z+1	; 0x01
     8e6:	01 97       	sbiw	r24, 0x01	; 1
     8e8:	11 96       	adiw	r26, 0x01	; 1
     8ea:	9c 93       	st	X, r25
     8ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     8ee:	fe 01       	movw	r30, r28
     8f0:	e5 5b       	subi	r30, 0xB5	; 181
     8f2:	ff 4f       	sbci	r31, 0xFF	; 255
     8f4:	80 81       	ld	r24, Z
     8f6:	91 81       	ldd	r25, Z+1	; 0x01
     8f8:	00 97       	sbiw	r24, 0x00	; 0
     8fa:	d1 f6       	brne	.-76     	; 0x8b0 <lcd_set_4bit+0x3f0>
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <lcd_set_4bit+0x48c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     8fe:	8e 01       	movw	r16, r28
     900:	05 5b       	subi	r16, 0xB5	; 181
     902:	1f 4f       	sbci	r17, 0xFF	; 255
     904:	fe 01       	movw	r30, r28
     906:	e3 5b       	subi	r30, 0xB3	; 179
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	60 81       	ld	r22, Z
     90c:	71 81       	ldd	r23, Z+1	; 0x01
     90e:	82 81       	ldd	r24, Z+2	; 0x02
     910:	93 81       	ldd	r25, Z+3	; 0x03
     912:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     916:	dc 01       	movw	r26, r24
     918:	cb 01       	movw	r24, r22
     91a:	f8 01       	movw	r30, r16
     91c:	91 83       	std	Z+1, r25	; 0x01
     91e:	80 83       	st	Z, r24
     920:	de 01       	movw	r26, r28
     922:	a9 5b       	subi	r26, 0xB9	; 185
     924:	bf 4f       	sbci	r27, 0xFF	; 255
     926:	fe 01       	movw	r30, r28
     928:	e5 5b       	subi	r30, 0xB5	; 181
     92a:	ff 4f       	sbci	r31, 0xFF	; 255
     92c:	80 81       	ld	r24, Z
     92e:	91 81       	ldd	r25, Z+1	; 0x01
     930:	8d 93       	st	X+, r24
     932:	9c 93       	st	X, r25
     934:	fe 01       	movw	r30, r28
     936:	e9 5b       	subi	r30, 0xB9	; 185
     938:	ff 4f       	sbci	r31, 0xFF	; 255
     93a:	80 81       	ld	r24, Z
     93c:	91 81       	ldd	r25, Z+1	; 0x01
     93e:	01 97       	sbiw	r24, 0x01	; 1
     940:	f1 f7       	brne	.-4      	; 0x93e <lcd_set_4bit+0x47e>
     942:	fe 01       	movw	r30, r28
     944:	e9 5b       	subi	r30, 0xB9	; 185
     946:	ff 4f       	sbci	r31, 0xFF	; 255
     948:	91 83       	std	Z+1, r25	; 0x01
     94a:	80 83       	st	Z, r24

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     94c:	a8 e2       	ldi	r26, 0x28	; 40
     94e:	b0 e0       	ldi	r27, 0x00	; 0
     950:	e8 e2       	ldi	r30, 0x28	; 40
     952:	f0 e0       	ldi	r31, 0x00	; 0
     954:	80 81       	ld	r24, Z
     956:	8e 7f       	andi	r24, 0xFE	; 254
     958:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     95a:	a8 e2       	ldi	r26, 0x28	; 40
     95c:	b0 e0       	ldi	r27, 0x00	; 0
     95e:	e8 e2       	ldi	r30, 0x28	; 40
     960:	f0 e0       	ldi	r31, 0x00	; 0
     962:	80 81       	ld	r24, Z
     964:	8d 7f       	andi	r24, 0xFD	; 253
     966:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     968:	e8 e2       	ldi	r30, 0x28	; 40
     96a:	f0 e0       	ldi	r31, 0x00	; 0
     96c:	80 e3       	ldi	r24, 0x30	; 48
     96e:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     970:	a8 e2       	ldi	r26, 0x28	; 40
     972:	b0 e0       	ldi	r27, 0x00	; 0
     974:	e8 e2       	ldi	r30, 0x28	; 40
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	80 81       	ld	r24, Z
     97a:	84 60       	ori	r24, 0x04	; 4
     97c:	8c 93       	st	X, r24
     97e:	fe 01       	movw	r30, r28
     980:	ed 5b       	subi	r30, 0xBD	; 189
     982:	ff 4f       	sbci	r31, 0xFF	; 255
     984:	80 e0       	ldi	r24, 0x00	; 0
     986:	90 e0       	ldi	r25, 0x00	; 0
     988:	a0 ea       	ldi	r26, 0xA0	; 160
     98a:	b0 e4       	ldi	r27, 0x40	; 64
     98c:	80 83       	st	Z, r24
     98e:	91 83       	std	Z+1, r25	; 0x01
     990:	a2 83       	std	Z+2, r26	; 0x02
     992:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     994:	8e 01       	movw	r16, r28
     996:	01 5c       	subi	r16, 0xC1	; 193
     998:	1f 4f       	sbci	r17, 0xFF	; 255
     99a:	fe 01       	movw	r30, r28
     99c:	ed 5b       	subi	r30, 0xBD	; 189
     99e:	ff 4f       	sbci	r31, 0xFF	; 255
     9a0:	60 81       	ld	r22, Z
     9a2:	71 81       	ldd	r23, Z+1	; 0x01
     9a4:	82 81       	ldd	r24, Z+2	; 0x02
     9a6:	93 81       	ldd	r25, Z+3	; 0x03
     9a8:	2d ec       	ldi	r18, 0xCD	; 205
     9aa:	3c ec       	ldi	r19, 0xCC	; 204
     9ac:	4c e2       	ldi	r20, 0x2C	; 44
     9ae:	55 e4       	ldi	r21, 0x45	; 69
     9b0:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     9b4:	dc 01       	movw	r26, r24
     9b6:	cb 01       	movw	r24, r22
     9b8:	f8 01       	movw	r30, r16
     9ba:	80 83       	st	Z, r24
     9bc:	91 83       	std	Z+1, r25	; 0x01
     9be:	a2 83       	std	Z+2, r26	; 0x02
     9c0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     9c2:	fe 01       	movw	r30, r28
     9c4:	ff 96       	adiw	r30, 0x3f	; 63
     9c6:	60 81       	ld	r22, Z
     9c8:	71 81       	ldd	r23, Z+1	; 0x01
     9ca:	82 81       	ldd	r24, Z+2	; 0x02
     9cc:	93 81       	ldd	r25, Z+3	; 0x03
     9ce:	20 e0       	ldi	r18, 0x00	; 0
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e8       	ldi	r20, 0x80	; 128
     9d4:	5f e3       	ldi	r21, 0x3F	; 63
     9d6:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
     9da:	88 23       	and	r24, r24
     9dc:	2c f4       	brge	.+10     	; 0x9e8 <lcd_set_4bit+0x528>
		__ticks = 1;
     9de:	81 e0       	ldi	r24, 0x01	; 1
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	9e af       	std	Y+62, r25	; 0x3e
     9e4:	8d af       	std	Y+61, r24	; 0x3d
     9e6:	46 c0       	rjmp	.+140    	; 0xa74 <lcd_set_4bit+0x5b4>
	else if (__tmp > 65535)
     9e8:	fe 01       	movw	r30, r28
     9ea:	ff 96       	adiw	r30, 0x3f	; 63
     9ec:	60 81       	ld	r22, Z
     9ee:	71 81       	ldd	r23, Z+1	; 0x01
     9f0:	82 81       	ldd	r24, Z+2	; 0x02
     9f2:	93 81       	ldd	r25, Z+3	; 0x03
     9f4:	20 e0       	ldi	r18, 0x00	; 0
     9f6:	3f ef       	ldi	r19, 0xFF	; 255
     9f8:	4f e7       	ldi	r20, 0x7F	; 127
     9fa:	57 e4       	ldi	r21, 0x47	; 71
     9fc:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
     a00:	18 16       	cp	r1, r24
     a02:	64 f5       	brge	.+88     	; 0xa5c <lcd_set_4bit+0x59c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     a04:	fe 01       	movw	r30, r28
     a06:	ed 5b       	subi	r30, 0xBD	; 189
     a08:	ff 4f       	sbci	r31, 0xFF	; 255
     a0a:	60 81       	ld	r22, Z
     a0c:	71 81       	ldd	r23, Z+1	; 0x01
     a0e:	82 81       	ldd	r24, Z+2	; 0x02
     a10:	93 81       	ldd	r25, Z+3	; 0x03
     a12:	20 e0       	ldi	r18, 0x00	; 0
     a14:	30 e0       	ldi	r19, 0x00	; 0
     a16:	40 e2       	ldi	r20, 0x20	; 32
     a18:	51 e4       	ldi	r21, 0x41	; 65
     a1a:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     a1e:	dc 01       	movw	r26, r24
     a20:	cb 01       	movw	r24, r22
     a22:	bc 01       	movw	r22, r24
     a24:	cd 01       	movw	r24, r26
     a26:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     a2a:	dc 01       	movw	r26, r24
     a2c:	cb 01       	movw	r24, r22
     a2e:	9e af       	std	Y+62, r25	; 0x3e
     a30:	8d af       	std	Y+61, r24	; 0x3d
     a32:	0f c0       	rjmp	.+30     	; 0xa52 <lcd_set_4bit+0x592>
     a34:	84 e1       	ldi	r24, 0x14	; 20
     a36:	91 e0       	ldi	r25, 0x01	; 1
     a38:	9c af       	std	Y+60, r25	; 0x3c
     a3a:	8b af       	std	Y+59, r24	; 0x3b
     a3c:	8b ad       	ldd	r24, Y+59	; 0x3b
     a3e:	9c ad       	ldd	r25, Y+60	; 0x3c
     a40:	01 97       	sbiw	r24, 0x01	; 1
     a42:	f1 f7       	brne	.-4      	; 0xa40 <lcd_set_4bit+0x580>
     a44:	9c af       	std	Y+60, r25	; 0x3c
     a46:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     a48:	8d ad       	ldd	r24, Y+61	; 0x3d
     a4a:	9e ad       	ldd	r25, Y+62	; 0x3e
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	9e af       	std	Y+62, r25	; 0x3e
     a50:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     a52:	8d ad       	ldd	r24, Y+61	; 0x3d
     a54:	9e ad       	ldd	r25, Y+62	; 0x3e
     a56:	00 97       	sbiw	r24, 0x00	; 0
     a58:	69 f7       	brne	.-38     	; 0xa34 <lcd_set_4bit+0x574>
     a5a:	16 c0       	rjmp	.+44     	; 0xa88 <lcd_set_4bit+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     a5c:	fe 01       	movw	r30, r28
     a5e:	ff 96       	adiw	r30, 0x3f	; 63
     a60:	60 81       	ld	r22, Z
     a62:	71 81       	ldd	r23, Z+1	; 0x01
     a64:	82 81       	ldd	r24, Z+2	; 0x02
     a66:	93 81       	ldd	r25, Z+3	; 0x03
     a68:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     a6c:	dc 01       	movw	r26, r24
     a6e:	cb 01       	movw	r24, r22
     a70:	9e af       	std	Y+62, r25	; 0x3e
     a72:	8d af       	std	Y+61, r24	; 0x3d
     a74:	8d ad       	ldd	r24, Y+61	; 0x3d
     a76:	9e ad       	ldd	r25, Y+62	; 0x3e
     a78:	9a af       	std	Y+58, r25	; 0x3a
     a7a:	89 af       	std	Y+57, r24	; 0x39
     a7c:	89 ad       	ldd	r24, Y+57	; 0x39
     a7e:	9a ad       	ldd	r25, Y+58	; 0x3a
     a80:	01 97       	sbiw	r24, 0x01	; 1
     a82:	f1 f7       	brne	.-4      	; 0xa80 <lcd_set_4bit+0x5c0>
     a84:	9a af       	std	Y+58, r25	; 0x3a
     a86:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     a88:	a8 e2       	ldi	r26, 0x28	; 40
     a8a:	b0 e0       	ldi	r27, 0x00	; 0
     a8c:	e8 e2       	ldi	r30, 0x28	; 40
     a8e:	f0 e0       	ldi	r31, 0x00	; 0
     a90:	80 81       	ld	r24, Z
     a92:	8b 7f       	andi	r24, 0xFB	; 251
     a94:	8c 93       	st	X, r24
     a96:	80 e0       	ldi	r24, 0x00	; 0
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e8       	ldi	r26, 0x80	; 128
     a9c:	bf e3       	ldi	r27, 0x3F	; 63
     a9e:	8d ab       	std	Y+53, r24	; 0x35
     aa0:	9e ab       	std	Y+54, r25	; 0x36
     aa2:	af ab       	std	Y+55, r26	; 0x37
     aa4:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     aa6:	6d a9       	ldd	r22, Y+53	; 0x35
     aa8:	7e a9       	ldd	r23, Y+54	; 0x36
     aaa:	8f a9       	ldd	r24, Y+55	; 0x37
     aac:	98 ad       	ldd	r25, Y+56	; 0x38
     aae:	2d ec       	ldi	r18, 0xCD	; 205
     ab0:	3c ec       	ldi	r19, 0xCC	; 204
     ab2:	4c e2       	ldi	r20, 0x2C	; 44
     ab4:	55 e4       	ldi	r21, 0x45	; 69
     ab6:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     aba:	dc 01       	movw	r26, r24
     abc:	cb 01       	movw	r24, r22
     abe:	89 ab       	std	Y+49, r24	; 0x31
     ac0:	9a ab       	std	Y+50, r25	; 0x32
     ac2:	ab ab       	std	Y+51, r26	; 0x33
     ac4:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     ac6:	69 a9       	ldd	r22, Y+49	; 0x31
     ac8:	7a a9       	ldd	r23, Y+50	; 0x32
     aca:	8b a9       	ldd	r24, Y+51	; 0x33
     acc:	9c a9       	ldd	r25, Y+52	; 0x34
     ace:	20 e0       	ldi	r18, 0x00	; 0
     ad0:	30 e0       	ldi	r19, 0x00	; 0
     ad2:	40 e8       	ldi	r20, 0x80	; 128
     ad4:	5f e3       	ldi	r21, 0x3F	; 63
     ad6:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
     ada:	88 23       	and	r24, r24
     adc:	2c f4       	brge	.+10     	; 0xae8 <lcd_set_4bit+0x628>
		__ticks = 1;
     ade:	81 e0       	ldi	r24, 0x01	; 1
     ae0:	90 e0       	ldi	r25, 0x00	; 0
     ae2:	98 ab       	std	Y+48, r25	; 0x30
     ae4:	8f a7       	std	Y+47, r24	; 0x2f
     ae6:	3f c0       	rjmp	.+126    	; 0xb66 <lcd_set_4bit+0x6a6>
	else if (__tmp > 65535)
     ae8:	69 a9       	ldd	r22, Y+49	; 0x31
     aea:	7a a9       	ldd	r23, Y+50	; 0x32
     aec:	8b a9       	ldd	r24, Y+51	; 0x33
     aee:	9c a9       	ldd	r25, Y+52	; 0x34
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	3f ef       	ldi	r19, 0xFF	; 255
     af4:	4f e7       	ldi	r20, 0x7F	; 127
     af6:	57 e4       	ldi	r21, 0x47	; 71
     af8:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
     afc:	18 16       	cp	r1, r24
     afe:	4c f5       	brge	.+82     	; 0xb52 <lcd_set_4bit+0x692>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b00:	6d a9       	ldd	r22, Y+53	; 0x35
     b02:	7e a9       	ldd	r23, Y+54	; 0x36
     b04:	8f a9       	ldd	r24, Y+55	; 0x37
     b06:	98 ad       	ldd	r25, Y+56	; 0x38
     b08:	20 e0       	ldi	r18, 0x00	; 0
     b0a:	30 e0       	ldi	r19, 0x00	; 0
     b0c:	40 e2       	ldi	r20, 0x20	; 32
     b0e:	51 e4       	ldi	r21, 0x41	; 65
     b10:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     b14:	dc 01       	movw	r26, r24
     b16:	cb 01       	movw	r24, r22
     b18:	bc 01       	movw	r22, r24
     b1a:	cd 01       	movw	r24, r26
     b1c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     b20:	dc 01       	movw	r26, r24
     b22:	cb 01       	movw	r24, r22
     b24:	98 ab       	std	Y+48, r25	; 0x30
     b26:	8f a7       	std	Y+47, r24	; 0x2f
     b28:	0f c0       	rjmp	.+30     	; 0xb48 <lcd_set_4bit+0x688>
     b2a:	84 e1       	ldi	r24, 0x14	; 20
     b2c:	91 e0       	ldi	r25, 0x01	; 1
     b2e:	9e a7       	std	Y+46, r25	; 0x2e
     b30:	8d a7       	std	Y+45, r24	; 0x2d
     b32:	8d a5       	ldd	r24, Y+45	; 0x2d
     b34:	9e a5       	ldd	r25, Y+46	; 0x2e
     b36:	01 97       	sbiw	r24, 0x01	; 1
     b38:	f1 f7       	brne	.-4      	; 0xb36 <lcd_set_4bit+0x676>
     b3a:	9e a7       	std	Y+46, r25	; 0x2e
     b3c:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b3e:	8f a5       	ldd	r24, Y+47	; 0x2f
     b40:	98 a9       	ldd	r25, Y+48	; 0x30
     b42:	01 97       	sbiw	r24, 0x01	; 1
     b44:	98 ab       	std	Y+48, r25	; 0x30
     b46:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b48:	8f a5       	ldd	r24, Y+47	; 0x2f
     b4a:	98 a9       	ldd	r25, Y+48	; 0x30
     b4c:	00 97       	sbiw	r24, 0x00	; 0
     b4e:	69 f7       	brne	.-38     	; 0xb2a <lcd_set_4bit+0x66a>
     b50:	14 c0       	rjmp	.+40     	; 0xb7a <lcd_set_4bit+0x6ba>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     b52:	69 a9       	ldd	r22, Y+49	; 0x31
     b54:	7a a9       	ldd	r23, Y+50	; 0x32
     b56:	8b a9       	ldd	r24, Y+51	; 0x33
     b58:	9c a9       	ldd	r25, Y+52	; 0x34
     b5a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     b5e:	dc 01       	movw	r26, r24
     b60:	cb 01       	movw	r24, r22
     b62:	98 ab       	std	Y+48, r25	; 0x30
     b64:	8f a7       	std	Y+47, r24	; 0x2f
     b66:	8f a5       	ldd	r24, Y+47	; 0x2f
     b68:	98 a9       	ldd	r25, Y+48	; 0x30
     b6a:	9c a7       	std	Y+44, r25	; 0x2c
     b6c:	8b a7       	std	Y+43, r24	; 0x2b
     b6e:	8b a5       	ldd	r24, Y+43	; 0x2b
     b70:	9c a5       	ldd	r25, Y+44	; 0x2c
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	f1 f7       	brne	.-4      	; 0xb72 <lcd_set_4bit+0x6b2>
     b76:	9c a7       	std	Y+44, r25	; 0x2c
     b78:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     b7a:	a8 e2       	ldi	r26, 0x28	; 40
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	e8 e2       	ldi	r30, 0x28	; 40
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8e 7f       	andi	r24, 0xFE	; 254
     b86:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     b88:	a8 e2       	ldi	r26, 0x28	; 40
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e8 e2       	ldi	r30, 0x28	; 40
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	8d 7f       	andi	r24, 0xFD	; 253
     b94:	8c 93       	st	X, r24
	lcd_port = 0x30;				//Sending 3
     b96:	e8 e2       	ldi	r30, 0x28	; 40
     b98:	f0 e0       	ldi	r31, 0x00	; 0
     b9a:	80 e3       	ldi	r24, 0x30	; 48
     b9c:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     b9e:	a8 e2       	ldi	r26, 0x28	; 40
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e8 e2       	ldi	r30, 0x28	; 40
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	84 60       	ori	r24, 0x04	; 4
     baa:	8c 93       	st	X, r24
     bac:	80 e0       	ldi	r24, 0x00	; 0
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	a0 ea       	ldi	r26, 0xA0	; 160
     bb2:	b0 e4       	ldi	r27, 0x40	; 64
     bb4:	8f a3       	std	Y+39, r24	; 0x27
     bb6:	98 a7       	std	Y+40, r25	; 0x28
     bb8:	a9 a7       	std	Y+41, r26	; 0x29
     bba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bbc:	6f a1       	ldd	r22, Y+39	; 0x27
     bbe:	78 a5       	ldd	r23, Y+40	; 0x28
     bc0:	89 a5       	ldd	r24, Y+41	; 0x29
     bc2:	9a a5       	ldd	r25, Y+42	; 0x2a
     bc4:	2d ec       	ldi	r18, 0xCD	; 205
     bc6:	3c ec       	ldi	r19, 0xCC	; 204
     bc8:	4c e2       	ldi	r20, 0x2C	; 44
     bca:	55 e4       	ldi	r21, 0x45	; 69
     bcc:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     bd0:	dc 01       	movw	r26, r24
     bd2:	cb 01       	movw	r24, r22
     bd4:	8b a3       	std	Y+35, r24	; 0x23
     bd6:	9c a3       	std	Y+36, r25	; 0x24
     bd8:	ad a3       	std	Y+37, r26	; 0x25
     bda:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     bdc:	6b a1       	ldd	r22, Y+35	; 0x23
     bde:	7c a1       	ldd	r23, Y+36	; 0x24
     be0:	8d a1       	ldd	r24, Y+37	; 0x25
     be2:	9e a1       	ldd	r25, Y+38	; 0x26
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e8       	ldi	r20, 0x80	; 128
     bea:	5f e3       	ldi	r21, 0x3F	; 63
     bec:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
     bf0:	88 23       	and	r24, r24
     bf2:	2c f4       	brge	.+10     	; 0xbfe <lcd_set_4bit+0x73e>
		__ticks = 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	9a a3       	std	Y+34, r25	; 0x22
     bfa:	89 a3       	std	Y+33, r24	; 0x21
     bfc:	3f c0       	rjmp	.+126    	; 0xc7c <lcd_set_4bit+0x7bc>
	else if (__tmp > 65535)
     bfe:	6b a1       	ldd	r22, Y+35	; 0x23
     c00:	7c a1       	ldd	r23, Y+36	; 0x24
     c02:	8d a1       	ldd	r24, Y+37	; 0x25
     c04:	9e a1       	ldd	r25, Y+38	; 0x26
     c06:	20 e0       	ldi	r18, 0x00	; 0
     c08:	3f ef       	ldi	r19, 0xFF	; 255
     c0a:	4f e7       	ldi	r20, 0x7F	; 127
     c0c:	57 e4       	ldi	r21, 0x47	; 71
     c0e:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
     c12:	18 16       	cp	r1, r24
     c14:	4c f5       	brge	.+82     	; 0xc68 <lcd_set_4bit+0x7a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c16:	6f a1       	ldd	r22, Y+39	; 0x27
     c18:	78 a5       	ldd	r23, Y+40	; 0x28
     c1a:	89 a5       	ldd	r24, Y+41	; 0x29
     c1c:	9a a5       	ldd	r25, Y+42	; 0x2a
     c1e:	20 e0       	ldi	r18, 0x00	; 0
     c20:	30 e0       	ldi	r19, 0x00	; 0
     c22:	40 e2       	ldi	r20, 0x20	; 32
     c24:	51 e4       	ldi	r21, 0x41	; 65
     c26:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     c2a:	dc 01       	movw	r26, r24
     c2c:	cb 01       	movw	r24, r22
     c2e:	bc 01       	movw	r22, r24
     c30:	cd 01       	movw	r24, r26
     c32:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     c36:	dc 01       	movw	r26, r24
     c38:	cb 01       	movw	r24, r22
     c3a:	9a a3       	std	Y+34, r25	; 0x22
     c3c:	89 a3       	std	Y+33, r24	; 0x21
     c3e:	0f c0       	rjmp	.+30     	; 0xc5e <lcd_set_4bit+0x79e>
     c40:	84 e1       	ldi	r24, 0x14	; 20
     c42:	91 e0       	ldi	r25, 0x01	; 1
     c44:	98 a3       	std	Y+32, r25	; 0x20
     c46:	8f 8f       	std	Y+31, r24	; 0x1f
     c48:	8f 8d       	ldd	r24, Y+31	; 0x1f
     c4a:	98 a1       	ldd	r25, Y+32	; 0x20
     c4c:	01 97       	sbiw	r24, 0x01	; 1
     c4e:	f1 f7       	brne	.-4      	; 0xc4c <lcd_set_4bit+0x78c>
     c50:	98 a3       	std	Y+32, r25	; 0x20
     c52:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c54:	89 a1       	ldd	r24, Y+33	; 0x21
     c56:	9a a1       	ldd	r25, Y+34	; 0x22
     c58:	01 97       	sbiw	r24, 0x01	; 1
     c5a:	9a a3       	std	Y+34, r25	; 0x22
     c5c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c5e:	89 a1       	ldd	r24, Y+33	; 0x21
     c60:	9a a1       	ldd	r25, Y+34	; 0x22
     c62:	00 97       	sbiw	r24, 0x00	; 0
     c64:	69 f7       	brne	.-38     	; 0xc40 <lcd_set_4bit+0x780>
     c66:	14 c0       	rjmp	.+40     	; 0xc90 <lcd_set_4bit+0x7d0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c68:	6b a1       	ldd	r22, Y+35	; 0x23
     c6a:	7c a1       	ldd	r23, Y+36	; 0x24
     c6c:	8d a1       	ldd	r24, Y+37	; 0x25
     c6e:	9e a1       	ldd	r25, Y+38	; 0x26
     c70:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     c74:	dc 01       	movw	r26, r24
     c76:	cb 01       	movw	r24, r22
     c78:	9a a3       	std	Y+34, r25	; 0x22
     c7a:	89 a3       	std	Y+33, r24	; 0x21
     c7c:	89 a1       	ldd	r24, Y+33	; 0x21
     c7e:	9a a1       	ldd	r25, Y+34	; 0x22
     c80:	9e 8f       	std	Y+30, r25	; 0x1e
     c82:	8d 8f       	std	Y+29, r24	; 0x1d
     c84:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c86:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c88:	01 97       	sbiw	r24, 0x01	; 1
     c8a:	f1 f7       	brne	.-4      	; 0xc88 <lcd_set_4bit+0x7c8>
     c8c:	9e 8f       	std	Y+30, r25	; 0x1e
     c8e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     c90:	a8 e2       	ldi	r26, 0x28	; 40
     c92:	b0 e0       	ldi	r27, 0x00	; 0
     c94:	e8 e2       	ldi	r30, 0x28	; 40
     c96:	f0 e0       	ldi	r31, 0x00	; 0
     c98:	80 81       	ld	r24, Z
     c9a:	8b 7f       	andi	r24, 0xFB	; 251
     c9c:	8c 93       	st	X, r24
     c9e:	80 e0       	ldi	r24, 0x00	; 0
     ca0:	90 e0       	ldi	r25, 0x00	; 0
     ca2:	a0 e8       	ldi	r26, 0x80	; 128
     ca4:	bf e3       	ldi	r27, 0x3F	; 63
     ca6:	89 8f       	std	Y+25, r24	; 0x19
     ca8:	9a 8f       	std	Y+26, r25	; 0x1a
     caa:	ab 8f       	std	Y+27, r26	; 0x1b
     cac:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     cae:	69 8d       	ldd	r22, Y+25	; 0x19
     cb0:	7a 8d       	ldd	r23, Y+26	; 0x1a
     cb2:	8b 8d       	ldd	r24, Y+27	; 0x1b
     cb4:	9c 8d       	ldd	r25, Y+28	; 0x1c
     cb6:	2d ec       	ldi	r18, 0xCD	; 205
     cb8:	3c ec       	ldi	r19, 0xCC	; 204
     cba:	4c e2       	ldi	r20, 0x2C	; 44
     cbc:	55 e4       	ldi	r21, 0x45	; 69
     cbe:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     cc2:	dc 01       	movw	r26, r24
     cc4:	cb 01       	movw	r24, r22
     cc6:	8d 8b       	std	Y+21, r24	; 0x15
     cc8:	9e 8b       	std	Y+22, r25	; 0x16
     cca:	af 8b       	std	Y+23, r26	; 0x17
     ccc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     cce:	6d 89       	ldd	r22, Y+21	; 0x15
     cd0:	7e 89       	ldd	r23, Y+22	; 0x16
     cd2:	8f 89       	ldd	r24, Y+23	; 0x17
     cd4:	98 8d       	ldd	r25, Y+24	; 0x18
     cd6:	20 e0       	ldi	r18, 0x00	; 0
     cd8:	30 e0       	ldi	r19, 0x00	; 0
     cda:	40 e8       	ldi	r20, 0x80	; 128
     cdc:	5f e3       	ldi	r21, 0x3F	; 63
     cde:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
     ce2:	88 23       	and	r24, r24
     ce4:	2c f4       	brge	.+10     	; 0xcf0 <lcd_set_4bit+0x830>
		__ticks = 1;
     ce6:	81 e0       	ldi	r24, 0x01	; 1
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	9c 8b       	std	Y+20, r25	; 0x14
     cec:	8b 8b       	std	Y+19, r24	; 0x13
     cee:	3f c0       	rjmp	.+126    	; 0xd6e <lcd_set_4bit+0x8ae>
	else if (__tmp > 65535)
     cf0:	6d 89       	ldd	r22, Y+21	; 0x15
     cf2:	7e 89       	ldd	r23, Y+22	; 0x16
     cf4:	8f 89       	ldd	r24, Y+23	; 0x17
     cf6:	98 8d       	ldd	r25, Y+24	; 0x18
     cf8:	20 e0       	ldi	r18, 0x00	; 0
     cfa:	3f ef       	ldi	r19, 0xFF	; 255
     cfc:	4f e7       	ldi	r20, 0x7F	; 127
     cfe:	57 e4       	ldi	r21, 0x47	; 71
     d00:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
     d04:	18 16       	cp	r1, r24
     d06:	4c f5       	brge	.+82     	; 0xd5a <lcd_set_4bit+0x89a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d08:	69 8d       	ldd	r22, Y+25	; 0x19
     d0a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     d0c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     d0e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	40 e2       	ldi	r20, 0x20	; 32
     d16:	51 e4       	ldi	r21, 0x41	; 65
     d18:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     d1c:	dc 01       	movw	r26, r24
     d1e:	cb 01       	movw	r24, r22
     d20:	bc 01       	movw	r22, r24
     d22:	cd 01       	movw	r24, r26
     d24:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     d28:	dc 01       	movw	r26, r24
     d2a:	cb 01       	movw	r24, r22
     d2c:	9c 8b       	std	Y+20, r25	; 0x14
     d2e:	8b 8b       	std	Y+19, r24	; 0x13
     d30:	0f c0       	rjmp	.+30     	; 0xd50 <lcd_set_4bit+0x890>
     d32:	84 e1       	ldi	r24, 0x14	; 20
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	9a 8b       	std	Y+18, r25	; 0x12
     d38:	89 8b       	std	Y+17, r24	; 0x11
     d3a:	89 89       	ldd	r24, Y+17	; 0x11
     d3c:	9a 89       	ldd	r25, Y+18	; 0x12
     d3e:	01 97       	sbiw	r24, 0x01	; 1
     d40:	f1 f7       	brne	.-4      	; 0xd3e <lcd_set_4bit+0x87e>
     d42:	9a 8b       	std	Y+18, r25	; 0x12
     d44:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d46:	8b 89       	ldd	r24, Y+19	; 0x13
     d48:	9c 89       	ldd	r25, Y+20	; 0x14
     d4a:	01 97       	sbiw	r24, 0x01	; 1
     d4c:	9c 8b       	std	Y+20, r25	; 0x14
     d4e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d50:	8b 89       	ldd	r24, Y+19	; 0x13
     d52:	9c 89       	ldd	r25, Y+20	; 0x14
     d54:	00 97       	sbiw	r24, 0x00	; 0
     d56:	69 f7       	brne	.-38     	; 0xd32 <lcd_set_4bit+0x872>
     d58:	14 c0       	rjmp	.+40     	; 0xd82 <lcd_set_4bit+0x8c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d5a:	6d 89       	ldd	r22, Y+21	; 0x15
     d5c:	7e 89       	ldd	r23, Y+22	; 0x16
     d5e:	8f 89       	ldd	r24, Y+23	; 0x17
     d60:	98 8d       	ldd	r25, Y+24	; 0x18
     d62:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     d66:	dc 01       	movw	r26, r24
     d68:	cb 01       	movw	r24, r22
     d6a:	9c 8b       	std	Y+20, r25	; 0x14
     d6c:	8b 8b       	std	Y+19, r24	; 0x13
     d6e:	8b 89       	ldd	r24, Y+19	; 0x13
     d70:	9c 89       	ldd	r25, Y+20	; 0x14
     d72:	98 8b       	std	Y+16, r25	; 0x10
     d74:	8f 87       	std	Y+15, r24	; 0x0f
     d76:	8f 85       	ldd	r24, Y+15	; 0x0f
     d78:	98 89       	ldd	r25, Y+16	; 0x10
     d7a:	01 97       	sbiw	r24, 0x01	; 1
     d7c:	f1 f7       	brne	.-4      	; 0xd7a <lcd_set_4bit+0x8ba>
     d7e:	98 8b       	std	Y+16, r25	; 0x10
     d80:	8f 87       	std	Y+15, r24	; 0x0f

	_delay_ms(1);

	cbit(lcd_port,RS);				//RS=0 --- Command Input
     d82:	a8 e2       	ldi	r26, 0x28	; 40
     d84:	b0 e0       	ldi	r27, 0x00	; 0
     d86:	e8 e2       	ldi	r30, 0x28	; 40
     d88:	f0 e0       	ldi	r31, 0x00	; 0
     d8a:	80 81       	ld	r24, Z
     d8c:	8e 7f       	andi	r24, 0xFE	; 254
     d8e:	8c 93       	st	X, r24
	cbit(lcd_port,RW);				//RW=0 --- Writing to LCD
     d90:	a8 e2       	ldi	r26, 0x28	; 40
     d92:	b0 e0       	ldi	r27, 0x00	; 0
     d94:	e8 e2       	ldi	r30, 0x28	; 40
     d96:	f0 e0       	ldi	r31, 0x00	; 0
     d98:	80 81       	ld	r24, Z
     d9a:	8d 7f       	andi	r24, 0xFD	; 253
     d9c:	8c 93       	st	X, r24
	lcd_port = 0x20;				//Sending 2 to initialise LCD 4-bit mode
     d9e:	e8 e2       	ldi	r30, 0x28	; 40
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	80 e2       	ldi	r24, 0x20	; 32
     da4:	80 83       	st	Z, r24
	sbit(lcd_port,EN);				//Set Enable Pin
     da6:	a8 e2       	ldi	r26, 0x28	; 40
     da8:	b0 e0       	ldi	r27, 0x00	; 0
     daa:	e8 e2       	ldi	r30, 0x28	; 40
     dac:	f0 e0       	ldi	r31, 0x00	; 0
     dae:	80 81       	ld	r24, Z
     db0:	84 60       	ori	r24, 0x04	; 4
     db2:	8c 93       	st	X, r24
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	a0 ea       	ldi	r26, 0xA0	; 160
     dba:	b0 e4       	ldi	r27, 0x40	; 64
     dbc:	8b 87       	std	Y+11, r24	; 0x0b
     dbe:	9c 87       	std	Y+12, r25	; 0x0c
     dc0:	ad 87       	std	Y+13, r26	; 0x0d
     dc2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dc4:	6b 85       	ldd	r22, Y+11	; 0x0b
     dc6:	7c 85       	ldd	r23, Y+12	; 0x0c
     dc8:	8d 85       	ldd	r24, Y+13	; 0x0d
     dca:	9e 85       	ldd	r25, Y+14	; 0x0e
     dcc:	2d ec       	ldi	r18, 0xCD	; 205
     dce:	3c ec       	ldi	r19, 0xCC	; 204
     dd0:	4c e2       	ldi	r20, 0x2C	; 44
     dd2:	55 e4       	ldi	r21, 0x45	; 69
     dd4:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     dd8:	dc 01       	movw	r26, r24
     dda:	cb 01       	movw	r24, r22
     ddc:	8f 83       	std	Y+7, r24	; 0x07
     dde:	98 87       	std	Y+8, r25	; 0x08
     de0:	a9 87       	std	Y+9, r26	; 0x09
     de2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     de4:	6f 81       	ldd	r22, Y+7	; 0x07
     de6:	78 85       	ldd	r23, Y+8	; 0x08
     de8:	89 85       	ldd	r24, Y+9	; 0x09
     dea:	9a 85       	ldd	r25, Y+10	; 0x0a
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	30 e0       	ldi	r19, 0x00	; 0
     df0:	40 e8       	ldi	r20, 0x80	; 128
     df2:	5f e3       	ldi	r21, 0x3F	; 63
     df4:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
     df8:	88 23       	and	r24, r24
     dfa:	2c f4       	brge	.+10     	; 0xe06 <lcd_set_4bit+0x946>
		__ticks = 1;
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	9e 83       	std	Y+6, r25	; 0x06
     e02:	8d 83       	std	Y+5, r24	; 0x05
     e04:	3f c0       	rjmp	.+126    	; 0xe84 <lcd_set_4bit+0x9c4>
	else if (__tmp > 65535)
     e06:	6f 81       	ldd	r22, Y+7	; 0x07
     e08:	78 85       	ldd	r23, Y+8	; 0x08
     e0a:	89 85       	ldd	r24, Y+9	; 0x09
     e0c:	9a 85       	ldd	r25, Y+10	; 0x0a
     e0e:	20 e0       	ldi	r18, 0x00	; 0
     e10:	3f ef       	ldi	r19, 0xFF	; 255
     e12:	4f e7       	ldi	r20, 0x7F	; 127
     e14:	57 e4       	ldi	r21, 0x47	; 71
     e16:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
     e1a:	18 16       	cp	r1, r24
     e1c:	4c f5       	brge	.+82     	; 0xe70 <lcd_set_4bit+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e1e:	6b 85       	ldd	r22, Y+11	; 0x0b
     e20:	7c 85       	ldd	r23, Y+12	; 0x0c
     e22:	8d 85       	ldd	r24, Y+13	; 0x0d
     e24:	9e 85       	ldd	r25, Y+14	; 0x0e
     e26:	20 e0       	ldi	r18, 0x00	; 0
     e28:	30 e0       	ldi	r19, 0x00	; 0
     e2a:	40 e2       	ldi	r20, 0x20	; 32
     e2c:	51 e4       	ldi	r21, 0x41	; 65
     e2e:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     e32:	dc 01       	movw	r26, r24
     e34:	cb 01       	movw	r24, r22
     e36:	bc 01       	movw	r22, r24
     e38:	cd 01       	movw	r24, r26
     e3a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     e3e:	dc 01       	movw	r26, r24
     e40:	cb 01       	movw	r24, r22
     e42:	9e 83       	std	Y+6, r25	; 0x06
     e44:	8d 83       	std	Y+5, r24	; 0x05
     e46:	0f c0       	rjmp	.+30     	; 0xe66 <lcd_set_4bit+0x9a6>
     e48:	84 e1       	ldi	r24, 0x14	; 20
     e4a:	91 e0       	ldi	r25, 0x01	; 1
     e4c:	9c 83       	std	Y+4, r25	; 0x04
     e4e:	8b 83       	std	Y+3, r24	; 0x03
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	9c 81       	ldd	r25, Y+4	; 0x04
     e54:	01 97       	sbiw	r24, 0x01	; 1
     e56:	f1 f7       	brne	.-4      	; 0xe54 <lcd_set_4bit+0x994>
     e58:	9c 83       	std	Y+4, r25	; 0x04
     e5a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e5c:	8d 81       	ldd	r24, Y+5	; 0x05
     e5e:	9e 81       	ldd	r25, Y+6	; 0x06
     e60:	01 97       	sbiw	r24, 0x01	; 1
     e62:	9e 83       	std	Y+6, r25	; 0x06
     e64:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e66:	8d 81       	ldd	r24, Y+5	; 0x05
     e68:	9e 81       	ldd	r25, Y+6	; 0x06
     e6a:	00 97       	sbiw	r24, 0x00	; 0
     e6c:	69 f7       	brne	.-38     	; 0xe48 <lcd_set_4bit+0x988>
     e6e:	14 c0       	rjmp	.+40     	; 0xe98 <lcd_set_4bit+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e70:	6f 81       	ldd	r22, Y+7	; 0x07
     e72:	78 85       	ldd	r23, Y+8	; 0x08
     e74:	89 85       	ldd	r24, Y+9	; 0x09
     e76:	9a 85       	ldd	r25, Y+10	; 0x0a
     e78:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	9e 83       	std	Y+6, r25	; 0x06
     e82:	8d 83       	std	Y+5, r24	; 0x05
     e84:	8d 81       	ldd	r24, Y+5	; 0x05
     e86:	9e 81       	ldd	r25, Y+6	; 0x06
     e88:	9a 83       	std	Y+2, r25	; 0x02
     e8a:	89 83       	std	Y+1, r24	; 0x01
     e8c:	89 81       	ldd	r24, Y+1	; 0x01
     e8e:	9a 81       	ldd	r25, Y+2	; 0x02
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <lcd_set_4bit+0x9d0>
     e94:	9a 83       	std	Y+2, r25	; 0x02
     e96:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);					//Delay
	cbit(lcd_port,EN);				//Clear Enable Pin
     e98:	a8 e2       	ldi	r26, 0x28	; 40
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e8 e2       	ldi	r30, 0x28	; 40
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	8b 7f       	andi	r24, 0xFB	; 251
     ea4:	8c 93       	st	X, r24

	
}
     ea6:	c0 59       	subi	r28, 0x90	; 144
     ea8:	df 4f       	sbci	r29, 0xFF	; 255
     eaa:	0f b6       	in	r0, 0x3f	; 63
     eac:	f8 94       	cli
     eae:	de bf       	out	0x3e, r29	; 62
     eb0:	0f be       	out	0x3f, r0	; 63
     eb2:	cd bf       	out	0x3d, r28	; 61
     eb4:	cf 91       	pop	r28
     eb6:	df 91       	pop	r29
     eb8:	1f 91       	pop	r17
     eba:	0f 91       	pop	r16
     ebc:	08 95       	ret

00000ebe <lcd_init>:

//Function to Initialize LCD
void lcd_init()
{
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	cd b7       	in	r28, 0x3d	; 61
     ec4:	de b7       	in	r29, 0x3e	; 62
     ec6:	2e 97       	sbiw	r28, 0x0e	; 14
     ec8:	0f b6       	in	r0, 0x3f	; 63
     eca:	f8 94       	cli
     ecc:	de bf       	out	0x3e, r29	; 62
     ece:	0f be       	out	0x3f, r0	; 63
     ed0:	cd bf       	out	0x3d, r28	; 61
     ed2:	80 e0       	ldi	r24, 0x00	; 0
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	a0 e8       	ldi	r26, 0x80	; 128
     ed8:	bf e3       	ldi	r27, 0x3F	; 63
     eda:	8b 87       	std	Y+11, r24	; 0x0b
     edc:	9c 87       	std	Y+12, r25	; 0x0c
     ede:	ad 87       	std	Y+13, r26	; 0x0d
     ee0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ee2:	6b 85       	ldd	r22, Y+11	; 0x0b
     ee4:	7c 85       	ldd	r23, Y+12	; 0x0c
     ee6:	8d 85       	ldd	r24, Y+13	; 0x0d
     ee8:	9e 85       	ldd	r25, Y+14	; 0x0e
     eea:	2d ec       	ldi	r18, 0xCD	; 205
     eec:	3c ec       	ldi	r19, 0xCC	; 204
     eee:	4c e2       	ldi	r20, 0x2C	; 44
     ef0:	55 e4       	ldi	r21, 0x45	; 69
     ef2:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	8f 83       	std	Y+7, r24	; 0x07
     efc:	98 87       	std	Y+8, r25	; 0x08
     efe:	a9 87       	std	Y+9, r26	; 0x09
     f00:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f02:	6f 81       	ldd	r22, Y+7	; 0x07
     f04:	78 85       	ldd	r23, Y+8	; 0x08
     f06:	89 85       	ldd	r24, Y+9	; 0x09
     f08:	9a 85       	ldd	r25, Y+10	; 0x0a
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	40 e8       	ldi	r20, 0x80	; 128
     f10:	5f e3       	ldi	r21, 0x3F	; 63
     f12:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
     f16:	88 23       	and	r24, r24
     f18:	2c f4       	brge	.+10     	; 0xf24 <lcd_init+0x66>
		__ticks = 1;
     f1a:	81 e0       	ldi	r24, 0x01	; 1
     f1c:	90 e0       	ldi	r25, 0x00	; 0
     f1e:	9e 83       	std	Y+6, r25	; 0x06
     f20:	8d 83       	std	Y+5, r24	; 0x05
     f22:	3f c0       	rjmp	.+126    	; 0xfa2 <lcd_init+0xe4>
	else if (__tmp > 65535)
     f24:	6f 81       	ldd	r22, Y+7	; 0x07
     f26:	78 85       	ldd	r23, Y+8	; 0x08
     f28:	89 85       	ldd	r24, Y+9	; 0x09
     f2a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2c:	20 e0       	ldi	r18, 0x00	; 0
     f2e:	3f ef       	ldi	r19, 0xFF	; 255
     f30:	4f e7       	ldi	r20, 0x7F	; 127
     f32:	57 e4       	ldi	r21, 0x47	; 71
     f34:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
     f38:	18 16       	cp	r1, r24
     f3a:	4c f5       	brge	.+82     	; 0xf8e <lcd_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f3c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f40:	8d 85       	ldd	r24, Y+13	; 0x0d
     f42:	9e 85       	ldd	r25, Y+14	; 0x0e
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	30 e0       	ldi	r19, 0x00	; 0
     f48:	40 e2       	ldi	r20, 0x20	; 32
     f4a:	51 e4       	ldi	r21, 0x41	; 65
     f4c:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
     f50:	dc 01       	movw	r26, r24
     f52:	cb 01       	movw	r24, r22
     f54:	bc 01       	movw	r22, r24
     f56:	cd 01       	movw	r24, r26
     f58:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9e 83       	std	Y+6, r25	; 0x06
     f62:	8d 83       	std	Y+5, r24	; 0x05
     f64:	0f c0       	rjmp	.+30     	; 0xf84 <lcd_init+0xc6>
     f66:	84 e1       	ldi	r24, 0x14	; 20
     f68:	91 e0       	ldi	r25, 0x01	; 1
     f6a:	9c 83       	std	Y+4, r25	; 0x04
     f6c:	8b 83       	std	Y+3, r24	; 0x03
     f6e:	8b 81       	ldd	r24, Y+3	; 0x03
     f70:	9c 81       	ldd	r25, Y+4	; 0x04
     f72:	01 97       	sbiw	r24, 0x01	; 1
     f74:	f1 f7       	brne	.-4      	; 0xf72 <lcd_init+0xb4>
     f76:	9c 83       	std	Y+4, r25	; 0x04
     f78:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f7a:	8d 81       	ldd	r24, Y+5	; 0x05
     f7c:	9e 81       	ldd	r25, Y+6	; 0x06
     f7e:	01 97       	sbiw	r24, 0x01	; 1
     f80:	9e 83       	std	Y+6, r25	; 0x06
     f82:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	9e 81       	ldd	r25, Y+6	; 0x06
     f88:	00 97       	sbiw	r24, 0x00	; 0
     f8a:	69 f7       	brne	.-38     	; 0xf66 <lcd_init+0xa8>
     f8c:	14 c0       	rjmp	.+40     	; 0xfb6 <lcd_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f8e:	6f 81       	ldd	r22, Y+7	; 0x07
     f90:	78 85       	ldd	r23, Y+8	; 0x08
     f92:	89 85       	ldd	r24, Y+9	; 0x09
     f94:	9a 85       	ldd	r25, Y+10	; 0x0a
     f96:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
     f9a:	dc 01       	movw	r26, r24
     f9c:	cb 01       	movw	r24, r22
     f9e:	9e 83       	std	Y+6, r25	; 0x06
     fa0:	8d 83       	std	Y+5, r24	; 0x05
     fa2:	8d 81       	ldd	r24, Y+5	; 0x05
     fa4:	9e 81       	ldd	r25, Y+6	; 0x06
     fa6:	9a 83       	std	Y+2, r25	; 0x02
     fa8:	89 83       	std	Y+1, r24	; 0x01
     faa:	89 81       	ldd	r24, Y+1	; 0x01
     fac:	9a 81       	ldd	r25, Y+2	; 0x02
     fae:	01 97       	sbiw	r24, 0x01	; 1
     fb0:	f1 f7       	brne	.-4      	; 0xfae <lcd_init+0xf0>
     fb2:	9a 83       	std	Y+2, r25	; 0x02
     fb4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);

	lcd_wr_command(0x28);			//LCD 4-bit mode and 2 lines.
     fb6:	88 e2       	ldi	r24, 0x28	; 40
     fb8:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lcd_wr_command>
	lcd_wr_command(0x01);
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lcd_wr_command>
	lcd_wr_command(0x06);
     fc2:	86 e0       	ldi	r24, 0x06	; 6
     fc4:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lcd_wr_command>
	lcd_wr_command(0x0E);
     fc8:	8e e0       	ldi	r24, 0x0E	; 14
     fca:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lcd_wr_command>
	lcd_wr_command(0x80);
     fce:	80 e8       	ldi	r24, 0x80	; 128
     fd0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lcd_wr_command>
		
}
     fd4:	2e 96       	adiw	r28, 0x0e	; 14
     fd6:	0f b6       	in	r0, 0x3f	; 63
     fd8:	f8 94       	cli
     fda:	de bf       	out	0x3e, r29	; 62
     fdc:	0f be       	out	0x3f, r0	; 63
     fde:	cd bf       	out	0x3d, r28	; 61
     fe0:	cf 91       	pop	r28
     fe2:	df 91       	pop	r29
     fe4:	08 95       	ret

00000fe6 <lcd_wr_command>:

	 
//Function to Write Command on LCD
void lcd_wr_command(unsigned char cmd)
{
     fe6:	df 93       	push	r29
     fe8:	cf 93       	push	r28
     fea:	cd b7       	in	r28, 0x3d	; 61
     fec:	de b7       	in	r29, 0x3e	; 62
     fee:	6e 97       	sbiw	r28, 0x1e	; 30
     ff0:	0f b6       	in	r0, 0x3f	; 63
     ff2:	f8 94       	cli
     ff4:	de bf       	out	0x3e, r29	; 62
     ff6:	0f be       	out	0x3f, r0	; 63
     ff8:	cd bf       	out	0x3d, r28	; 61
     ffa:	8e 8f       	std	Y+30, r24	; 0x1e
	unsigned char temp;
	temp = cmd;
     ffc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ffe:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = temp & 0xF0;
    1000:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1002:	80 7f       	andi	r24, 0xF0	; 240
    1004:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    1006:	a8 e2       	ldi	r26, 0x28	; 40
    1008:	b0 e0       	ldi	r27, 0x00	; 0
    100a:	e8 e2       	ldi	r30, 0x28	; 40
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	8f 70       	andi	r24, 0x0F	; 15
    1012:	8c 93       	st	X, r24
	lcd_port |= temp;
    1014:	a8 e2       	ldi	r26, 0x28	; 40
    1016:	b0 e0       	ldi	r27, 0x00	; 0
    1018:	e8 e2       	ldi	r30, 0x28	; 40
    101a:	f0 e0       	ldi	r31, 0x00	; 0
    101c:	90 81       	ld	r25, Z
    101e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1020:	89 2b       	or	r24, r25
    1022:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    1024:	a8 e2       	ldi	r26, 0x28	; 40
    1026:	b0 e0       	ldi	r27, 0x00	; 0
    1028:	e8 e2       	ldi	r30, 0x28	; 40
    102a:	f0 e0       	ldi	r31, 0x00	; 0
    102c:	80 81       	ld	r24, Z
    102e:	8e 7f       	andi	r24, 0xFE	; 254
    1030:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    1032:	a8 e2       	ldi	r26, 0x28	; 40
    1034:	b0 e0       	ldi	r27, 0x00	; 0
    1036:	e8 e2       	ldi	r30, 0x28	; 40
    1038:	f0 e0       	ldi	r31, 0x00	; 0
    103a:	80 81       	ld	r24, Z
    103c:	8d 7f       	andi	r24, 0xFD	; 253
    103e:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1040:	a8 e2       	ldi	r26, 0x28	; 40
    1042:	b0 e0       	ldi	r27, 0x00	; 0
    1044:	e8 e2       	ldi	r30, 0x28	; 40
    1046:	f0 e0       	ldi	r31, 0x00	; 0
    1048:	80 81       	ld	r24, Z
    104a:	84 60       	ori	r24, 0x04	; 4
    104c:	8c 93       	st	X, r24
    104e:	80 e0       	ldi	r24, 0x00	; 0
    1050:	90 e0       	ldi	r25, 0x00	; 0
    1052:	a0 ea       	ldi	r26, 0xA0	; 160
    1054:	b0 e4       	ldi	r27, 0x40	; 64
    1056:	89 8f       	std	Y+25, r24	; 0x19
    1058:	9a 8f       	std	Y+26, r25	; 0x1a
    105a:	ab 8f       	std	Y+27, r26	; 0x1b
    105c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105e:	69 8d       	ldd	r22, Y+25	; 0x19
    1060:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1062:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1064:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1066:	2d ec       	ldi	r18, 0xCD	; 205
    1068:	3c ec       	ldi	r19, 0xCC	; 204
    106a:	4c e2       	ldi	r20, 0x2C	; 44
    106c:	55 e4       	ldi	r21, 0x45	; 69
    106e:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1072:	dc 01       	movw	r26, r24
    1074:	cb 01       	movw	r24, r22
    1076:	8d 8b       	std	Y+21, r24	; 0x15
    1078:	9e 8b       	std	Y+22, r25	; 0x16
    107a:	af 8b       	std	Y+23, r26	; 0x17
    107c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    107e:	6d 89       	ldd	r22, Y+21	; 0x15
    1080:	7e 89       	ldd	r23, Y+22	; 0x16
    1082:	8f 89       	ldd	r24, Y+23	; 0x17
    1084:	98 8d       	ldd	r25, Y+24	; 0x18
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	30 e0       	ldi	r19, 0x00	; 0
    108a:	40 e8       	ldi	r20, 0x80	; 128
    108c:	5f e3       	ldi	r21, 0x3F	; 63
    108e:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
    1092:	88 23       	and	r24, r24
    1094:	2c f4       	brge	.+10     	; 0x10a0 <lcd_wr_command+0xba>
		__ticks = 1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	90 e0       	ldi	r25, 0x00	; 0
    109a:	9c 8b       	std	Y+20, r25	; 0x14
    109c:	8b 8b       	std	Y+19, r24	; 0x13
    109e:	3f c0       	rjmp	.+126    	; 0x111e <lcd_wr_command+0x138>
	else if (__tmp > 65535)
    10a0:	6d 89       	ldd	r22, Y+21	; 0x15
    10a2:	7e 89       	ldd	r23, Y+22	; 0x16
    10a4:	8f 89       	ldd	r24, Y+23	; 0x17
    10a6:	98 8d       	ldd	r25, Y+24	; 0x18
    10a8:	20 e0       	ldi	r18, 0x00	; 0
    10aa:	3f ef       	ldi	r19, 0xFF	; 255
    10ac:	4f e7       	ldi	r20, 0x7F	; 127
    10ae:	57 e4       	ldi	r21, 0x47	; 71
    10b0:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
    10b4:	18 16       	cp	r1, r24
    10b6:	4c f5       	brge	.+82     	; 0x110a <lcd_wr_command+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b8:	69 8d       	ldd	r22, Y+25	; 0x19
    10ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10c0:	20 e0       	ldi	r18, 0x00	; 0
    10c2:	30 e0       	ldi	r19, 0x00	; 0
    10c4:	40 e2       	ldi	r20, 0x20	; 32
    10c6:	51 e4       	ldi	r21, 0x41	; 65
    10c8:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    10cc:	dc 01       	movw	r26, r24
    10ce:	cb 01       	movw	r24, r22
    10d0:	bc 01       	movw	r22, r24
    10d2:	cd 01       	movw	r24, r26
    10d4:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    10d8:	dc 01       	movw	r26, r24
    10da:	cb 01       	movw	r24, r22
    10dc:	9c 8b       	std	Y+20, r25	; 0x14
    10de:	8b 8b       	std	Y+19, r24	; 0x13
    10e0:	0f c0       	rjmp	.+30     	; 0x1100 <lcd_wr_command+0x11a>
    10e2:	84 e1       	ldi	r24, 0x14	; 20
    10e4:	91 e0       	ldi	r25, 0x01	; 1
    10e6:	9a 8b       	std	Y+18, r25	; 0x12
    10e8:	89 8b       	std	Y+17, r24	; 0x11
    10ea:	89 89       	ldd	r24, Y+17	; 0x11
    10ec:	9a 89       	ldd	r25, Y+18	; 0x12
    10ee:	01 97       	sbiw	r24, 0x01	; 1
    10f0:	f1 f7       	brne	.-4      	; 0x10ee <lcd_wr_command+0x108>
    10f2:	9a 8b       	std	Y+18, r25	; 0x12
    10f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f6:	8b 89       	ldd	r24, Y+19	; 0x13
    10f8:	9c 89       	ldd	r25, Y+20	; 0x14
    10fa:	01 97       	sbiw	r24, 0x01	; 1
    10fc:	9c 8b       	std	Y+20, r25	; 0x14
    10fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1100:	8b 89       	ldd	r24, Y+19	; 0x13
    1102:	9c 89       	ldd	r25, Y+20	; 0x14
    1104:	00 97       	sbiw	r24, 0x00	; 0
    1106:	69 f7       	brne	.-38     	; 0x10e2 <lcd_wr_command+0xfc>
    1108:	14 c0       	rjmp	.+40     	; 0x1132 <lcd_wr_command+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110a:	6d 89       	ldd	r22, Y+21	; 0x15
    110c:	7e 89       	ldd	r23, Y+22	; 0x16
    110e:	8f 89       	ldd	r24, Y+23	; 0x17
    1110:	98 8d       	ldd	r25, Y+24	; 0x18
    1112:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    1116:	dc 01       	movw	r26, r24
    1118:	cb 01       	movw	r24, r22
    111a:	9c 8b       	std	Y+20, r25	; 0x14
    111c:	8b 8b       	std	Y+19, r24	; 0x13
    111e:	8b 89       	ldd	r24, Y+19	; 0x13
    1120:	9c 89       	ldd	r25, Y+20	; 0x14
    1122:	98 8b       	std	Y+16, r25	; 0x10
    1124:	8f 87       	std	Y+15, r24	; 0x0f
    1126:	8f 85       	ldd	r24, Y+15	; 0x0f
    1128:	98 89       	ldd	r25, Y+16	; 0x10
    112a:	01 97       	sbiw	r24, 0x01	; 1
    112c:	f1 f7       	brne	.-4      	; 0x112a <lcd_wr_command+0x144>
    112e:	98 8b       	std	Y+16, r25	; 0x10
    1130:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    1132:	a8 e2       	ldi	r26, 0x28	; 40
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	e8 e2       	ldi	r30, 0x28	; 40
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	80 81       	ld	r24, Z
    113c:	8b 7f       	andi	r24, 0xFB	; 251
    113e:	8c 93       	st	X, r24
	
	cmd = cmd & 0x0F;
    1140:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1142:	8f 70       	andi	r24, 0x0F	; 15
    1144:	8e 8f       	std	Y+30, r24	; 0x1e
	cmd = cmd<<4;
    1146:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1148:	82 95       	swap	r24
    114a:	80 7f       	andi	r24, 0xF0	; 240
    114c:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    114e:	a8 e2       	ldi	r26, 0x28	; 40
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e2       	ldi	r30, 0x28	; 40
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	8f 70       	andi	r24, 0x0F	; 15
    115a:	8c 93       	st	X, r24
	lcd_port |= cmd;
    115c:	a8 e2       	ldi	r26, 0x28	; 40
    115e:	b0 e0       	ldi	r27, 0x00	; 0
    1160:	e8 e2       	ldi	r30, 0x28	; 40
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	90 81       	ld	r25, Z
    1166:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1168:	89 2b       	or	r24, r25
    116a:	8c 93       	st	X, r24
	cbit(lcd_port,RS);
    116c:	a8 e2       	ldi	r26, 0x28	; 40
    116e:	b0 e0       	ldi	r27, 0x00	; 0
    1170:	e8 e2       	ldi	r30, 0x28	; 40
    1172:	f0 e0       	ldi	r31, 0x00	; 0
    1174:	80 81       	ld	r24, Z
    1176:	8e 7f       	andi	r24, 0xFE	; 254
    1178:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    117a:	a8 e2       	ldi	r26, 0x28	; 40
    117c:	b0 e0       	ldi	r27, 0x00	; 0
    117e:	e8 e2       	ldi	r30, 0x28	; 40
    1180:	f0 e0       	ldi	r31, 0x00	; 0
    1182:	80 81       	ld	r24, Z
    1184:	8d 7f       	andi	r24, 0xFD	; 253
    1186:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    1188:	a8 e2       	ldi	r26, 0x28	; 40
    118a:	b0 e0       	ldi	r27, 0x00	; 0
    118c:	e8 e2       	ldi	r30, 0x28	; 40
    118e:	f0 e0       	ldi	r31, 0x00	; 0
    1190:	80 81       	ld	r24, Z
    1192:	84 60       	ori	r24, 0x04	; 4
    1194:	8c 93       	st	X, r24
    1196:	80 e0       	ldi	r24, 0x00	; 0
    1198:	90 e0       	ldi	r25, 0x00	; 0
    119a:	a0 ea       	ldi	r26, 0xA0	; 160
    119c:	b0 e4       	ldi	r27, 0x40	; 64
    119e:	8b 87       	std	Y+11, r24	; 0x0b
    11a0:	9c 87       	std	Y+12, r25	; 0x0c
    11a2:	ad 87       	std	Y+13, r26	; 0x0d
    11a4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    11ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ae:	2d ec       	ldi	r18, 0xCD	; 205
    11b0:	3c ec       	ldi	r19, 0xCC	; 204
    11b2:	4c e2       	ldi	r20, 0x2C	; 44
    11b4:	55 e4       	ldi	r21, 0x45	; 69
    11b6:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	8f 83       	std	Y+7, r24	; 0x07
    11c0:	98 87       	std	Y+8, r25	; 0x08
    11c2:	a9 87       	std	Y+9, r26	; 0x09
    11c4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11c6:	6f 81       	ldd	r22, Y+7	; 0x07
    11c8:	78 85       	ldd	r23, Y+8	; 0x08
    11ca:	89 85       	ldd	r24, Y+9	; 0x09
    11cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e8       	ldi	r20, 0x80	; 128
    11d4:	5f e3       	ldi	r21, 0x3F	; 63
    11d6:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
    11da:	88 23       	and	r24, r24
    11dc:	2c f4       	brge	.+10     	; 0x11e8 <lcd_wr_command+0x202>
		__ticks = 1;
    11de:	81 e0       	ldi	r24, 0x01	; 1
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	9e 83       	std	Y+6, r25	; 0x06
    11e4:	8d 83       	std	Y+5, r24	; 0x05
    11e6:	3f c0       	rjmp	.+126    	; 0x1266 <lcd_wr_command+0x280>
	else if (__tmp > 65535)
    11e8:	6f 81       	ldd	r22, Y+7	; 0x07
    11ea:	78 85       	ldd	r23, Y+8	; 0x08
    11ec:	89 85       	ldd	r24, Y+9	; 0x09
    11ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    11f0:	20 e0       	ldi	r18, 0x00	; 0
    11f2:	3f ef       	ldi	r19, 0xFF	; 255
    11f4:	4f e7       	ldi	r20, 0x7F	; 127
    11f6:	57 e4       	ldi	r21, 0x47	; 71
    11f8:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
    11fc:	18 16       	cp	r1, r24
    11fe:	4c f5       	brge	.+82     	; 0x1252 <lcd_wr_command+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1200:	6b 85       	ldd	r22, Y+11	; 0x0b
    1202:	7c 85       	ldd	r23, Y+12	; 0x0c
    1204:	8d 85       	ldd	r24, Y+13	; 0x0d
    1206:	9e 85       	ldd	r25, Y+14	; 0x0e
    1208:	20 e0       	ldi	r18, 0x00	; 0
    120a:	30 e0       	ldi	r19, 0x00	; 0
    120c:	40 e2       	ldi	r20, 0x20	; 32
    120e:	51 e4       	ldi	r21, 0x41	; 65
    1210:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1214:	dc 01       	movw	r26, r24
    1216:	cb 01       	movw	r24, r22
    1218:	bc 01       	movw	r22, r24
    121a:	cd 01       	movw	r24, r26
    121c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    1220:	dc 01       	movw	r26, r24
    1222:	cb 01       	movw	r24, r22
    1224:	9e 83       	std	Y+6, r25	; 0x06
    1226:	8d 83       	std	Y+5, r24	; 0x05
    1228:	0f c0       	rjmp	.+30     	; 0x1248 <lcd_wr_command+0x262>
    122a:	84 e1       	ldi	r24, 0x14	; 20
    122c:	91 e0       	ldi	r25, 0x01	; 1
    122e:	9c 83       	std	Y+4, r25	; 0x04
    1230:	8b 83       	std	Y+3, r24	; 0x03
    1232:	8b 81       	ldd	r24, Y+3	; 0x03
    1234:	9c 81       	ldd	r25, Y+4	; 0x04
    1236:	01 97       	sbiw	r24, 0x01	; 1
    1238:	f1 f7       	brne	.-4      	; 0x1236 <lcd_wr_command+0x250>
    123a:	9c 83       	std	Y+4, r25	; 0x04
    123c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	01 97       	sbiw	r24, 0x01	; 1
    1244:	9e 83       	std	Y+6, r25	; 0x06
    1246:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	69 f7       	brne	.-38     	; 0x122a <lcd_wr_command+0x244>
    1250:	14 c0       	rjmp	.+40     	; 0x127a <lcd_wr_command+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1252:	6f 81       	ldd	r22, Y+7	; 0x07
    1254:	78 85       	ldd	r23, Y+8	; 0x08
    1256:	89 85       	ldd	r24, Y+9	; 0x09
    1258:	9a 85       	ldd	r25, Y+10	; 0x0a
    125a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    125e:	dc 01       	movw	r26, r24
    1260:	cb 01       	movw	r24, r22
    1262:	9e 83       	std	Y+6, r25	; 0x06
    1264:	8d 83       	std	Y+5, r24	; 0x05
    1266:	8d 81       	ldd	r24, Y+5	; 0x05
    1268:	9e 81       	ldd	r25, Y+6	; 0x06
    126a:	9a 83       	std	Y+2, r25	; 0x02
    126c:	89 83       	std	Y+1, r24	; 0x01
    126e:	89 81       	ldd	r24, Y+1	; 0x01
    1270:	9a 81       	ldd	r25, Y+2	; 0x02
    1272:	01 97       	sbiw	r24, 0x01	; 1
    1274:	f1 f7       	brne	.-4      	; 0x1272 <lcd_wr_command+0x28c>
    1276:	9a 83       	std	Y+2, r25	; 0x02
    1278:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    127a:	a8 e2       	ldi	r26, 0x28	; 40
    127c:	b0 e0       	ldi	r27, 0x00	; 0
    127e:	e8 e2       	ldi	r30, 0x28	; 40
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	80 81       	ld	r24, Z
    1284:	8b 7f       	andi	r24, 0xFB	; 251
    1286:	8c 93       	st	X, r24
}
    1288:	6e 96       	adiw	r28, 0x1e	; 30
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	de bf       	out	0x3e, r29	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	cd bf       	out	0x3d, r28	; 61
    1294:	cf 91       	pop	r28
    1296:	df 91       	pop	r29
    1298:	08 95       	ret

0000129a <lcd_wr_char>:

//Function to Write Data on LCD
void lcd_wr_char(char letter)
{
    129a:	df 93       	push	r29
    129c:	cf 93       	push	r28
    129e:	cd b7       	in	r28, 0x3d	; 61
    12a0:	de b7       	in	r29, 0x3e	; 62
    12a2:	6e 97       	sbiw	r28, 0x1e	; 30
    12a4:	0f b6       	in	r0, 0x3f	; 63
    12a6:	f8 94       	cli
    12a8:	de bf       	out	0x3e, r29	; 62
    12aa:	0f be       	out	0x3f, r0	; 63
    12ac:	cd bf       	out	0x3d, r28	; 61
    12ae:	8e 8f       	std	Y+30, r24	; 0x1e
	char temp;
	temp = letter;
    12b0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    12b2:	8d 8f       	std	Y+29, r24	; 0x1d
	temp = (temp & 0xF0);
    12b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12b6:	80 7f       	andi	r24, 0xF0	; 240
    12b8:	8d 8f       	std	Y+29, r24	; 0x1d
	lcd_port &= 0x0F;
    12ba:	a8 e2       	ldi	r26, 0x28	; 40
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e8 e2       	ldi	r30, 0x28	; 40
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	8f 70       	andi	r24, 0x0F	; 15
    12c6:	8c 93       	st	X, r24
	lcd_port |= temp;
    12c8:	a8 e2       	ldi	r26, 0x28	; 40
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	e8 e2       	ldi	r30, 0x28	; 40
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	90 81       	ld	r25, Z
    12d2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12d4:	89 2b       	or	r24, r25
    12d6:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    12d8:	a8 e2       	ldi	r26, 0x28	; 40
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e8 e2       	ldi	r30, 0x28	; 40
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	81 60       	ori	r24, 0x01	; 1
    12e4:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    12e6:	a8 e2       	ldi	r26, 0x28	; 40
    12e8:	b0 e0       	ldi	r27, 0x00	; 0
    12ea:	e8 e2       	ldi	r30, 0x28	; 40
    12ec:	f0 e0       	ldi	r31, 0x00	; 0
    12ee:	80 81       	ld	r24, Z
    12f0:	8d 7f       	andi	r24, 0xFD	; 253
    12f2:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    12f4:	a8 e2       	ldi	r26, 0x28	; 40
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	e8 e2       	ldi	r30, 0x28	; 40
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	84 60       	ori	r24, 0x04	; 4
    1300:	8c 93       	st	X, r24
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	a0 ea       	ldi	r26, 0xA0	; 160
    1308:	b0 e4       	ldi	r27, 0x40	; 64
    130a:	89 8f       	std	Y+25, r24	; 0x19
    130c:	9a 8f       	std	Y+26, r25	; 0x1a
    130e:	ab 8f       	std	Y+27, r26	; 0x1b
    1310:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1312:	69 8d       	ldd	r22, Y+25	; 0x19
    1314:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1316:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1318:	9c 8d       	ldd	r25, Y+28	; 0x1c
    131a:	2d ec       	ldi	r18, 0xCD	; 205
    131c:	3c ec       	ldi	r19, 0xCC	; 204
    131e:	4c e2       	ldi	r20, 0x2C	; 44
    1320:	55 e4       	ldi	r21, 0x45	; 69
    1322:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1326:	dc 01       	movw	r26, r24
    1328:	cb 01       	movw	r24, r22
    132a:	8d 8b       	std	Y+21, r24	; 0x15
    132c:	9e 8b       	std	Y+22, r25	; 0x16
    132e:	af 8b       	std	Y+23, r26	; 0x17
    1330:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1332:	6d 89       	ldd	r22, Y+21	; 0x15
    1334:	7e 89       	ldd	r23, Y+22	; 0x16
    1336:	8f 89       	ldd	r24, Y+23	; 0x17
    1338:	98 8d       	ldd	r25, Y+24	; 0x18
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	40 e8       	ldi	r20, 0x80	; 128
    1340:	5f e3       	ldi	r21, 0x3F	; 63
    1342:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
    1346:	88 23       	and	r24, r24
    1348:	2c f4       	brge	.+10     	; 0x1354 <lcd_wr_char+0xba>
		__ticks = 1;
    134a:	81 e0       	ldi	r24, 0x01	; 1
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9c 8b       	std	Y+20, r25	; 0x14
    1350:	8b 8b       	std	Y+19, r24	; 0x13
    1352:	3f c0       	rjmp	.+126    	; 0x13d2 <lcd_wr_char+0x138>
	else if (__tmp > 65535)
    1354:	6d 89       	ldd	r22, Y+21	; 0x15
    1356:	7e 89       	ldd	r23, Y+22	; 0x16
    1358:	8f 89       	ldd	r24, Y+23	; 0x17
    135a:	98 8d       	ldd	r25, Y+24	; 0x18
    135c:	20 e0       	ldi	r18, 0x00	; 0
    135e:	3f ef       	ldi	r19, 0xFF	; 255
    1360:	4f e7       	ldi	r20, 0x7F	; 127
    1362:	57 e4       	ldi	r21, 0x47	; 71
    1364:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
    1368:	18 16       	cp	r1, r24
    136a:	4c f5       	brge	.+82     	; 0x13be <lcd_wr_char+0x124>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    136c:	69 8d       	ldd	r22, Y+25	; 0x19
    136e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1370:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1372:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	40 e2       	ldi	r20, 0x20	; 32
    137a:	51 e4       	ldi	r21, 0x41	; 65
    137c:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	bc 01       	movw	r22, r24
    1386:	cd 01       	movw	r24, r26
    1388:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    138c:	dc 01       	movw	r26, r24
    138e:	cb 01       	movw	r24, r22
    1390:	9c 8b       	std	Y+20, r25	; 0x14
    1392:	8b 8b       	std	Y+19, r24	; 0x13
    1394:	0f c0       	rjmp	.+30     	; 0x13b4 <lcd_wr_char+0x11a>
    1396:	84 e1       	ldi	r24, 0x14	; 20
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	9a 8b       	std	Y+18, r25	; 0x12
    139c:	89 8b       	std	Y+17, r24	; 0x11
    139e:	89 89       	ldd	r24, Y+17	; 0x11
    13a0:	9a 89       	ldd	r25, Y+18	; 0x12
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <lcd_wr_char+0x108>
    13a6:	9a 8b       	std	Y+18, r25	; 0x12
    13a8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13aa:	8b 89       	ldd	r24, Y+19	; 0x13
    13ac:	9c 89       	ldd	r25, Y+20	; 0x14
    13ae:	01 97       	sbiw	r24, 0x01	; 1
    13b0:	9c 8b       	std	Y+20, r25	; 0x14
    13b2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b4:	8b 89       	ldd	r24, Y+19	; 0x13
    13b6:	9c 89       	ldd	r25, Y+20	; 0x14
    13b8:	00 97       	sbiw	r24, 0x00	; 0
    13ba:	69 f7       	brne	.-38     	; 0x1396 <lcd_wr_char+0xfc>
    13bc:	14 c0       	rjmp	.+40     	; 0x13e6 <lcd_wr_char+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13be:	6d 89       	ldd	r22, Y+21	; 0x15
    13c0:	7e 89       	ldd	r23, Y+22	; 0x16
    13c2:	8f 89       	ldd	r24, Y+23	; 0x17
    13c4:	98 8d       	ldd	r25, Y+24	; 0x18
    13c6:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    13ca:	dc 01       	movw	r26, r24
    13cc:	cb 01       	movw	r24, r22
    13ce:	9c 8b       	std	Y+20, r25	; 0x14
    13d0:	8b 8b       	std	Y+19, r24	; 0x13
    13d2:	8b 89       	ldd	r24, Y+19	; 0x13
    13d4:	9c 89       	ldd	r25, Y+20	; 0x14
    13d6:	98 8b       	std	Y+16, r25	; 0x10
    13d8:	8f 87       	std	Y+15, r24	; 0x0f
    13da:	8f 85       	ldd	r24, Y+15	; 0x0f
    13dc:	98 89       	ldd	r25, Y+16	; 0x10
    13de:	01 97       	sbiw	r24, 0x01	; 1
    13e0:	f1 f7       	brne	.-4      	; 0x13de <lcd_wr_char+0x144>
    13e2:	98 8b       	std	Y+16, r25	; 0x10
    13e4:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	cbit(lcd_port,EN);
    13e6:	a8 e2       	ldi	r26, 0x28	; 40
    13e8:	b0 e0       	ldi	r27, 0x00	; 0
    13ea:	e8 e2       	ldi	r30, 0x28	; 40
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	80 81       	ld	r24, Z
    13f0:	8b 7f       	andi	r24, 0xFB	; 251
    13f2:	8c 93       	st	X, r24

	letter = letter & 0x0F;
    13f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13f6:	8f 70       	andi	r24, 0x0F	; 15
    13f8:	8e 8f       	std	Y+30, r24	; 0x1e
	letter = letter<<4;
    13fa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    13fc:	82 95       	swap	r24
    13fe:	80 7f       	andi	r24, 0xF0	; 240
    1400:	8e 8f       	std	Y+30, r24	; 0x1e
	lcd_port &= 0x0F;
    1402:	a8 e2       	ldi	r26, 0x28	; 40
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	e8 e2       	ldi	r30, 0x28	; 40
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	8f 70       	andi	r24, 0x0F	; 15
    140e:	8c 93       	st	X, r24
	lcd_port |= letter;
    1410:	a8 e2       	ldi	r26, 0x28	; 40
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	e8 e2       	ldi	r30, 0x28	; 40
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	90 81       	ld	r25, Z
    141a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    141c:	89 2b       	or	r24, r25
    141e:	8c 93       	st	X, r24
	sbit(lcd_port,RS);
    1420:	a8 e2       	ldi	r26, 0x28	; 40
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	e8 e2       	ldi	r30, 0x28	; 40
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	81 60       	ori	r24, 0x01	; 1
    142c:	8c 93       	st	X, r24
	cbit(lcd_port,RW);
    142e:	a8 e2       	ldi	r26, 0x28	; 40
    1430:	b0 e0       	ldi	r27, 0x00	; 0
    1432:	e8 e2       	ldi	r30, 0x28	; 40
    1434:	f0 e0       	ldi	r31, 0x00	; 0
    1436:	80 81       	ld	r24, Z
    1438:	8d 7f       	andi	r24, 0xFD	; 253
    143a:	8c 93       	st	X, r24
	sbit(lcd_port,EN);
    143c:	a8 e2       	ldi	r26, 0x28	; 40
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	e8 e2       	ldi	r30, 0x28	; 40
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	84 60       	ori	r24, 0x04	; 4
    1448:	8c 93       	st	X, r24
    144a:	80 e0       	ldi	r24, 0x00	; 0
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	a0 ea       	ldi	r26, 0xA0	; 160
    1450:	b0 e4       	ldi	r27, 0x40	; 64
    1452:	8b 87       	std	Y+11, r24	; 0x0b
    1454:	9c 87       	std	Y+12, r25	; 0x0c
    1456:	ad 87       	std	Y+13, r26	; 0x0d
    1458:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    145a:	6b 85       	ldd	r22, Y+11	; 0x0b
    145c:	7c 85       	ldd	r23, Y+12	; 0x0c
    145e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1460:	9e 85       	ldd	r25, Y+14	; 0x0e
    1462:	2d ec       	ldi	r18, 0xCD	; 205
    1464:	3c ec       	ldi	r19, 0xCC	; 204
    1466:	4c e2       	ldi	r20, 0x2C	; 44
    1468:	55 e4       	ldi	r21, 0x45	; 69
    146a:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	8f 83       	std	Y+7, r24	; 0x07
    1474:	98 87       	std	Y+8, r25	; 0x08
    1476:	a9 87       	std	Y+9, r26	; 0x09
    1478:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    147a:	6f 81       	ldd	r22, Y+7	; 0x07
    147c:	78 85       	ldd	r23, Y+8	; 0x08
    147e:	89 85       	ldd	r24, Y+9	; 0x09
    1480:	9a 85       	ldd	r25, Y+10	; 0x0a
    1482:	20 e0       	ldi	r18, 0x00	; 0
    1484:	30 e0       	ldi	r19, 0x00	; 0
    1486:	40 e8       	ldi	r20, 0x80	; 128
    1488:	5f e3       	ldi	r21, 0x3F	; 63
    148a:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
    148e:	88 23       	and	r24, r24
    1490:	2c f4       	brge	.+10     	; 0x149c <lcd_wr_char+0x202>
		__ticks = 1;
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	9e 83       	std	Y+6, r25	; 0x06
    1498:	8d 83       	std	Y+5, r24	; 0x05
    149a:	3f c0       	rjmp	.+126    	; 0x151a <lcd_wr_char+0x280>
	else if (__tmp > 65535)
    149c:	6f 81       	ldd	r22, Y+7	; 0x07
    149e:	78 85       	ldd	r23, Y+8	; 0x08
    14a0:	89 85       	ldd	r24, Y+9	; 0x09
    14a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14a4:	20 e0       	ldi	r18, 0x00	; 0
    14a6:	3f ef       	ldi	r19, 0xFF	; 255
    14a8:	4f e7       	ldi	r20, 0x7F	; 127
    14aa:	57 e4       	ldi	r21, 0x47	; 71
    14ac:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
    14b0:	18 16       	cp	r1, r24
    14b2:	4c f5       	brge	.+82     	; 0x1506 <lcd_wr_char+0x26c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    14b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    14b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    14ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    14bc:	20 e0       	ldi	r18, 0x00	; 0
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	40 e2       	ldi	r20, 0x20	; 32
    14c2:	51 e4       	ldi	r21, 0x41	; 65
    14c4:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    14c8:	dc 01       	movw	r26, r24
    14ca:	cb 01       	movw	r24, r22
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	9e 83       	std	Y+6, r25	; 0x06
    14da:	8d 83       	std	Y+5, r24	; 0x05
    14dc:	0f c0       	rjmp	.+30     	; 0x14fc <lcd_wr_char+0x262>
    14de:	84 e1       	ldi	r24, 0x14	; 20
    14e0:	91 e0       	ldi	r25, 0x01	; 1
    14e2:	9c 83       	std	Y+4, r25	; 0x04
    14e4:	8b 83       	std	Y+3, r24	; 0x03
    14e6:	8b 81       	ldd	r24, Y+3	; 0x03
    14e8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ea:	01 97       	sbiw	r24, 0x01	; 1
    14ec:	f1 f7       	brne	.-4      	; 0x14ea <lcd_wr_char+0x250>
    14ee:	9c 83       	std	Y+4, r25	; 0x04
    14f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f2:	8d 81       	ldd	r24, Y+5	; 0x05
    14f4:	9e 81       	ldd	r25, Y+6	; 0x06
    14f6:	01 97       	sbiw	r24, 0x01	; 1
    14f8:	9e 83       	std	Y+6, r25	; 0x06
    14fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14fc:	8d 81       	ldd	r24, Y+5	; 0x05
    14fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1500:	00 97       	sbiw	r24, 0x00	; 0
    1502:	69 f7       	brne	.-38     	; 0x14de <lcd_wr_char+0x244>
    1504:	14 c0       	rjmp	.+40     	; 0x152e <lcd_wr_char+0x294>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1506:	6f 81       	ldd	r22, Y+7	; 0x07
    1508:	78 85       	ldd	r23, Y+8	; 0x08
    150a:	89 85       	ldd	r24, Y+9	; 0x09
    150c:	9a 85       	ldd	r25, Y+10	; 0x0a
    150e:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    1512:	dc 01       	movw	r26, r24
    1514:	cb 01       	movw	r24, r22
    1516:	9e 83       	std	Y+6, r25	; 0x06
    1518:	8d 83       	std	Y+5, r24	; 0x05
    151a:	8d 81       	ldd	r24, Y+5	; 0x05
    151c:	9e 81       	ldd	r25, Y+6	; 0x06
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	89 81       	ldd	r24, Y+1	; 0x01
    1524:	9a 81       	ldd	r25, Y+2	; 0x02
    1526:	01 97       	sbiw	r24, 0x01	; 1
    1528:	f1 f7       	brne	.-4      	; 0x1526 <lcd_wr_char+0x28c>
    152a:	9a 83       	std	Y+2, r25	; 0x02
    152c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	cbit(lcd_port,EN);
    152e:	a8 e2       	ldi	r26, 0x28	; 40
    1530:	b0 e0       	ldi	r27, 0x00	; 0
    1532:	e8 e2       	ldi	r30, 0x28	; 40
    1534:	f0 e0       	ldi	r31, 0x00	; 0
    1536:	80 81       	ld	r24, Z
    1538:	8b 7f       	andi	r24, 0xFB	; 251
    153a:	8c 93       	st	X, r24
}
    153c:	6e 96       	adiw	r28, 0x1e	; 30
    153e:	0f b6       	in	r0, 0x3f	; 63
    1540:	f8 94       	cli
    1542:	de bf       	out	0x3e, r29	; 62
    1544:	0f be       	out	0x3f, r0	; 63
    1546:	cd bf       	out	0x3d, r28	; 61
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <lcd_home>:


//Function to bring cursor at home position
void lcd_home()
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	cd b7       	in	r28, 0x3d	; 61
    1554:	de b7       	in	r29, 0x3e	; 62
	lcd_wr_command(0x80);
    1556:	80 e8       	ldi	r24, 0x80	; 128
    1558:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lcd_wr_command>
}
    155c:	cf 91       	pop	r28
    155e:	df 91       	pop	r29
    1560:	08 95       	ret

00001562 <lcd_string>:


//Function to Print String on LCD
void lcd_string(char *str)
{
    1562:	df 93       	push	r29
    1564:	cf 93       	push	r28
    1566:	0f 92       	push	r0
    1568:	0f 92       	push	r0
    156a:	cd b7       	in	r28, 0x3d	; 61
    156c:	de b7       	in	r29, 0x3e	; 62
    156e:	9a 83       	std	Y+2, r25	; 0x02
    1570:	89 83       	std	Y+1, r24	; 0x01
    1572:	0a c0       	rjmp	.+20     	; 0x1588 <lcd_string+0x26>
	while(*str != '\0')
	{
		lcd_wr_char(*str);
    1574:	e9 81       	ldd	r30, Y+1	; 0x01
    1576:	fa 81       	ldd	r31, Y+2	; 0x02
    1578:	80 81       	ld	r24, Z
    157a:	0e 94 4d 09 	call	0x129a	; 0x129a <lcd_wr_char>
		str++;
    157e:	89 81       	ldd	r24, Y+1	; 0x01
    1580:	9a 81       	ldd	r25, Y+2	; 0x02
    1582:	01 96       	adiw	r24, 0x01	; 1
    1584:	9a 83       	std	Y+2, r25	; 0x02
    1586:	89 83       	std	Y+1, r24	; 0x01


//Function to Print String on LCD
void lcd_string(char *str)
{
	while(*str != '\0')
    1588:	e9 81       	ldd	r30, Y+1	; 0x01
    158a:	fa 81       	ldd	r31, Y+2	; 0x02
    158c:	80 81       	ld	r24, Z
    158e:	88 23       	and	r24, r24
    1590:	89 f7       	brne	.-30     	; 0x1574 <lcd_string+0x12>
	{
		lcd_wr_char(*str);
		str++;
	}
}
    1592:	0f 90       	pop	r0
    1594:	0f 90       	pop	r0
    1596:	cf 91       	pop	r28
    1598:	df 91       	pop	r29
    159a:	08 95       	ret

0000159c <lcd_cursor>:

//Position the LCD cursor at "row", "column".

void lcd_cursor (char row, char column)
{
    159c:	df 93       	push	r29
    159e:	cf 93       	push	r28
    15a0:	00 d0       	rcall	.+0      	; 0x15a2 <lcd_cursor+0x6>
    15a2:	0f 92       	push	r0
    15a4:	cd b7       	in	r28, 0x3d	; 61
    15a6:	de b7       	in	r29, 0x3e	; 62
    15a8:	89 83       	std	Y+1, r24	; 0x01
    15aa:	6a 83       	std	Y+2, r22	; 0x02
	switch (row) {
    15ac:	89 81       	ldd	r24, Y+1	; 0x01
    15ae:	28 2f       	mov	r18, r24
    15b0:	30 e0       	ldi	r19, 0x00	; 0
    15b2:	3c 83       	std	Y+4, r19	; 0x04
    15b4:	2b 83       	std	Y+3, r18	; 0x03
    15b6:	8b 81       	ldd	r24, Y+3	; 0x03
    15b8:	9c 81       	ldd	r25, Y+4	; 0x04
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	91 05       	cpc	r25, r1
    15be:	d9 f0       	breq	.+54     	; 0x15f6 <lcd_cursor+0x5a>
    15c0:	2b 81       	ldd	r18, Y+3	; 0x03
    15c2:	3c 81       	ldd	r19, Y+4	; 0x04
    15c4:	23 30       	cpi	r18, 0x03	; 3
    15c6:	31 05       	cpc	r19, r1
    15c8:	34 f4       	brge	.+12     	; 0x15d6 <lcd_cursor+0x3a>
    15ca:	8b 81       	ldd	r24, Y+3	; 0x03
    15cc:	9c 81       	ldd	r25, Y+4	; 0x04
    15ce:	81 30       	cpi	r24, 0x01	; 1
    15d0:	91 05       	cpc	r25, r1
    15d2:	61 f0       	breq	.+24     	; 0x15ec <lcd_cursor+0x50>
    15d4:	1e c0       	rjmp	.+60     	; 0x1612 <lcd_cursor+0x76>
    15d6:	2b 81       	ldd	r18, Y+3	; 0x03
    15d8:	3c 81       	ldd	r19, Y+4	; 0x04
    15da:	23 30       	cpi	r18, 0x03	; 3
    15dc:	31 05       	cpc	r19, r1
    15de:	81 f0       	breq	.+32     	; 0x1600 <lcd_cursor+0x64>
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	84 30       	cpi	r24, 0x04	; 4
    15e6:	91 05       	cpc	r25, r1
    15e8:	81 f0       	breq	.+32     	; 0x160a <lcd_cursor+0x6e>
    15ea:	13 c0       	rjmp	.+38     	; 0x1612 <lcd_cursor+0x76>
		case 1: lcd_wr_command (0x80 + column - 1); break;
    15ec:	8a 81       	ldd	r24, Y+2	; 0x02
    15ee:	81 58       	subi	r24, 0x81	; 129
    15f0:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lcd_wr_command>
    15f4:	0e c0       	rjmp	.+28     	; 0x1612 <lcd_cursor+0x76>
		case 2: lcd_wr_command (0xc0 + column - 1); break;
    15f6:	8a 81       	ldd	r24, Y+2	; 0x02
    15f8:	81 54       	subi	r24, 0x41	; 65
    15fa:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lcd_wr_command>
    15fe:	09 c0       	rjmp	.+18     	; 0x1612 <lcd_cursor+0x76>
		case 3: lcd_wr_command (0x94 + column - 1); break;
    1600:	8a 81       	ldd	r24, Y+2	; 0x02
    1602:	8d 56       	subi	r24, 0x6D	; 109
    1604:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lcd_wr_command>
    1608:	04 c0       	rjmp	.+8      	; 0x1612 <lcd_cursor+0x76>
		case 4: lcd_wr_command (0xd4 + column - 1); break;
    160a:	8a 81       	ldd	r24, Y+2	; 0x02
    160c:	8d 52       	subi	r24, 0x2D	; 45
    160e:	0e 94 f3 07 	call	0xfe6	; 0xfe6 <lcd_wr_command>
		default: break;
	}
}
    1612:	0f 90       	pop	r0
    1614:	0f 90       	pop	r0
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	cf 91       	pop	r28
    161c:	df 91       	pop	r29
    161e:	08 95       	ret

00001620 <lcd_print>:

//Function To Print Any input value upto the desired digit on LCD
void lcd_print (char row, char coloumn, unsigned int value, int digits)
{
    1620:	df 93       	push	r29
    1622:	cf 93       	push	r28
    1624:	cd b7       	in	r28, 0x3d	; 61
    1626:	de b7       	in	r29, 0x3e	; 62
    1628:	27 97       	sbiw	r28, 0x07	; 7
    162a:	0f b6       	in	r0, 0x3f	; 63
    162c:	f8 94       	cli
    162e:	de bf       	out	0x3e, r29	; 62
    1630:	0f be       	out	0x3f, r0	; 63
    1632:	cd bf       	out	0x3d, r28	; 61
    1634:	8a 83       	std	Y+2, r24	; 0x02
    1636:	6b 83       	std	Y+3, r22	; 0x03
    1638:	5d 83       	std	Y+5, r21	; 0x05
    163a:	4c 83       	std	Y+4, r20	; 0x04
    163c:	3f 83       	std	Y+7, r19	; 0x07
    163e:	2e 83       	std	Y+6, r18	; 0x06
	unsigned char flag=0;
    1640:	19 82       	std	Y+1, r1	; 0x01
	if(row==0||coloumn==0)
    1642:	8a 81       	ldd	r24, Y+2	; 0x02
    1644:	88 23       	and	r24, r24
    1646:	19 f0       	breq	.+6      	; 0x164e <lcd_print+0x2e>
    1648:	8b 81       	ldd	r24, Y+3	; 0x03
    164a:	88 23       	and	r24, r24
    164c:	19 f4       	brne	.+6      	; 0x1654 <lcd_print+0x34>
	{
		lcd_home();
    164e:	0e 94 a7 0a 	call	0x154e	; 0x154e <lcd_home>
    1652:	04 c0       	rjmp	.+8      	; 0x165c <lcd_print+0x3c>
	}
	else
	{
		lcd_cursor(row,coloumn);
    1654:	8a 81       	ldd	r24, Y+2	; 0x02
    1656:	6b 81       	ldd	r22, Y+3	; 0x03
    1658:	0e 94 ce 0a 	call	0x159c	; 0x159c <lcd_cursor>
	}
	if(digits==5 || flag==1)
    165c:	8e 81       	ldd	r24, Y+6	; 0x06
    165e:	9f 81       	ldd	r25, Y+7	; 0x07
    1660:	85 30       	cpi	r24, 0x05	; 5
    1662:	91 05       	cpc	r25, r1
    1664:	19 f0       	breq	.+6      	; 0x166c <lcd_print+0x4c>
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	81 30       	cpi	r24, 0x01	; 1
    166a:	a9 f4       	brne	.+42     	; 0x1696 <lcd_print+0x76>
	{
		million=value/10000+48;
    166c:	8c 81       	ldd	r24, Y+4	; 0x04
    166e:	9d 81       	ldd	r25, Y+5	; 0x05
    1670:	20 e1       	ldi	r18, 0x10	; 16
    1672:	37 e2       	ldi	r19, 0x27	; 39
    1674:	b9 01       	movw	r22, r18
    1676:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__udivmodhi4>
    167a:	cb 01       	movw	r24, r22
    167c:	c0 96       	adiw	r24, 0x30	; 48
    167e:	90 93 1b 03 	sts	0x031B, r25
    1682:	80 93 1a 03 	sts	0x031A, r24
		lcd_wr_char(million);
    1686:	80 91 1a 03 	lds	r24, 0x031A
    168a:	90 91 1b 03 	lds	r25, 0x031B
    168e:	0e 94 4d 09 	call	0x129a	; 0x129a <lcd_wr_char>
		flag=1;
    1692:	81 e0       	ldi	r24, 0x01	; 1
    1694:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==4 || flag==1)
    1696:	8e 81       	ldd	r24, Y+6	; 0x06
    1698:	9f 81       	ldd	r25, Y+7	; 0x07
    169a:	84 30       	cpi	r24, 0x04	; 4
    169c:	91 05       	cpc	r25, r1
    169e:	19 f0       	breq	.+6      	; 0x16a6 <lcd_print+0x86>
    16a0:	89 81       	ldd	r24, Y+1	; 0x01
    16a2:	81 30       	cpi	r24, 0x01	; 1
    16a4:	11 f5       	brne	.+68     	; 0x16ea <lcd_print+0xca>
	{
		temp = value/1000;
    16a6:	8c 81       	ldd	r24, Y+4	; 0x04
    16a8:	9d 81       	ldd	r25, Y+5	; 0x05
    16aa:	28 ee       	ldi	r18, 0xE8	; 232
    16ac:	33 e0       	ldi	r19, 0x03	; 3
    16ae:	b9 01       	movw	r22, r18
    16b0:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__udivmodhi4>
    16b4:	cb 01       	movw	r24, r22
    16b6:	90 93 1d 03 	sts	0x031D, r25
    16ba:	80 93 1c 03 	sts	0x031C, r24
		thousand = temp%10 + 48;
    16be:	80 91 1c 03 	lds	r24, 0x031C
    16c2:	90 91 1d 03 	lds	r25, 0x031D
    16c6:	2a e0       	ldi	r18, 0x0A	; 10
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	b9 01       	movw	r22, r18
    16cc:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__udivmodhi4>
    16d0:	c0 96       	adiw	r24, 0x30	; 48
    16d2:	90 93 26 03 	sts	0x0326, r25
    16d6:	80 93 25 03 	sts	0x0325, r24
		lcd_wr_char(thousand);
    16da:	80 91 25 03 	lds	r24, 0x0325
    16de:	90 91 26 03 	lds	r25, 0x0326
    16e2:	0e 94 4d 09 	call	0x129a	; 0x129a <lcd_wr_char>
		flag=1;
    16e6:	81 e0       	ldi	r24, 0x01	; 1
    16e8:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==3 || flag==1)
    16ea:	8e 81       	ldd	r24, Y+6	; 0x06
    16ec:	9f 81       	ldd	r25, Y+7	; 0x07
    16ee:	83 30       	cpi	r24, 0x03	; 3
    16f0:	91 05       	cpc	r25, r1
    16f2:	19 f0       	breq	.+6      	; 0x16fa <lcd_print+0xda>
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	81 30       	cpi	r24, 0x01	; 1
    16f8:	11 f5       	brne	.+68     	; 0x173e <lcd_print+0x11e>
	{
		temp = value/100;
    16fa:	8c 81       	ldd	r24, Y+4	; 0x04
    16fc:	9d 81       	ldd	r25, Y+5	; 0x05
    16fe:	24 e6       	ldi	r18, 0x64	; 100
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	b9 01       	movw	r22, r18
    1704:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__udivmodhi4>
    1708:	cb 01       	movw	r24, r22
    170a:	90 93 1d 03 	sts	0x031D, r25
    170e:	80 93 1c 03 	sts	0x031C, r24
		hundred = temp%10 + 48;
    1712:	80 91 1c 03 	lds	r24, 0x031C
    1716:	90 91 1d 03 	lds	r25, 0x031D
    171a:	2a e0       	ldi	r18, 0x0A	; 10
    171c:	30 e0       	ldi	r19, 0x00	; 0
    171e:	b9 01       	movw	r22, r18
    1720:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__udivmodhi4>
    1724:	c0 96       	adiw	r24, 0x30	; 48
    1726:	90 93 22 03 	sts	0x0322, r25
    172a:	80 93 21 03 	sts	0x0321, r24
		lcd_wr_char(hundred);
    172e:	80 91 21 03 	lds	r24, 0x0321
    1732:	90 91 22 03 	lds	r25, 0x0322
    1736:	0e 94 4d 09 	call	0x129a	; 0x129a <lcd_wr_char>
		flag=1;
    173a:	81 e0       	ldi	r24, 0x01	; 1
    173c:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==2 || flag==1)
    173e:	8e 81       	ldd	r24, Y+6	; 0x06
    1740:	9f 81       	ldd	r25, Y+7	; 0x07
    1742:	82 30       	cpi	r24, 0x02	; 2
    1744:	91 05       	cpc	r25, r1
    1746:	19 f0       	breq	.+6      	; 0x174e <lcd_print+0x12e>
    1748:	89 81       	ldd	r24, Y+1	; 0x01
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	11 f5       	brne	.+68     	; 0x1792 <lcd_print+0x172>
	{
		temp = value/10;
    174e:	8c 81       	ldd	r24, Y+4	; 0x04
    1750:	9d 81       	ldd	r25, Y+5	; 0x05
    1752:	2a e0       	ldi	r18, 0x0A	; 10
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	b9 01       	movw	r22, r18
    1758:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__udivmodhi4>
    175c:	cb 01       	movw	r24, r22
    175e:	90 93 1d 03 	sts	0x031D, r25
    1762:	80 93 1c 03 	sts	0x031C, r24
		tens = temp%10 + 48;
    1766:	80 91 1c 03 	lds	r24, 0x031C
    176a:	90 91 1d 03 	lds	r25, 0x031D
    176e:	2a e0       	ldi	r18, 0x0A	; 10
    1770:	30 e0       	ldi	r19, 0x00	; 0
    1772:	b9 01       	movw	r22, r18
    1774:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__udivmodhi4>
    1778:	c0 96       	adiw	r24, 0x30	; 48
    177a:	90 93 1f 03 	sts	0x031F, r25
    177e:	80 93 1e 03 	sts	0x031E, r24
		lcd_wr_char(tens);
    1782:	80 91 1e 03 	lds	r24, 0x031E
    1786:	90 91 1f 03 	lds	r25, 0x031F
    178a:	0e 94 4d 09 	call	0x129a	; 0x129a <lcd_wr_char>
		flag=1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	89 83       	std	Y+1, r24	; 0x01
	}
	if(digits==1 || flag==1)
    1792:	8e 81       	ldd	r24, Y+6	; 0x06
    1794:	9f 81       	ldd	r25, Y+7	; 0x07
    1796:	81 30       	cpi	r24, 0x01	; 1
    1798:	91 05       	cpc	r25, r1
    179a:	19 f0       	breq	.+6      	; 0x17a2 <lcd_print+0x182>
    179c:	89 81       	ldd	r24, Y+1	; 0x01
    179e:	81 30       	cpi	r24, 0x01	; 1
    17a0:	91 f4       	brne	.+36     	; 0x17c6 <lcd_print+0x1a6>
	{
		unit = value%10 + 48;
    17a2:	8c 81       	ldd	r24, Y+4	; 0x04
    17a4:	9d 81       	ldd	r25, Y+5	; 0x05
    17a6:	2a e0       	ldi	r18, 0x0A	; 10
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	b9 01       	movw	r22, r18
    17ac:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <__udivmodhi4>
    17b0:	c0 96       	adiw	r24, 0x30	; 48
    17b2:	90 93 24 03 	sts	0x0324, r25
    17b6:	80 93 23 03 	sts	0x0323, r24
		lcd_wr_char(unit);
    17ba:	80 91 23 03 	lds	r24, 0x0323
    17be:	90 91 24 03 	lds	r25, 0x0324
    17c2:	0e 94 4d 09 	call	0x129a	; 0x129a <lcd_wr_char>
	}
	if(digits>5)
    17c6:	8e 81       	ldd	r24, Y+6	; 0x06
    17c8:	9f 81       	ldd	r25, Y+7	; 0x07
    17ca:	86 30       	cpi	r24, 0x06	; 6
    17cc:	91 05       	cpc	r25, r1
    17ce:	1c f0       	brlt	.+6      	; 0x17d6 <lcd_print+0x1b6>
	{
		lcd_wr_char('E');
    17d0:	85 e4       	ldi	r24, 0x45	; 69
    17d2:	0e 94 4d 09 	call	0x129a	; 0x129a <lcd_wr_char>
	}
	
}
    17d6:	27 96       	adiw	r28, 0x07	; 7
    17d8:	0f b6       	in	r0, 0x3f	; 63
    17da:	f8 94       	cli
    17dc:	de bf       	out	0x3e, r29	; 62
    17de:	0f be       	out	0x3f, r0	; 63
    17e0:	cd bf       	out	0x3d, r28	; 61
    17e2:	cf 91       	pop	r28
    17e4:	df 91       	pop	r29
    17e6:	08 95       	ret

000017e8 <init_lcd>:

void init_lcd (void)
{
    17e8:	df 93       	push	r29
    17ea:	cf 93       	push	r28
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
 cli(); //Clears the global interrupts
    17f0:	f8 94       	cli
 lcd_port_init();
    17f2:	0e 94 57 02 	call	0x4ae	; 0x4ae <lcd_port_init>
 sei();   //Enables the global interrupts
    17f6:	78 94       	sei
}		
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <buzzer_pin_config>:
int count=0;
int degree=0;
int p=0;

void buzzer_pin_config (void)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	cd b7       	in	r28, 0x3d	; 61
    1804:	de b7       	in	r29, 0x3e	; 62
  DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
    1806:	a7 e2       	ldi	r26, 0x27	; 39
    1808:	b0 e0       	ldi	r27, 0x00	; 0
    180a:	e7 e2       	ldi	r30, 0x27	; 39
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	80 81       	ld	r24, Z
    1810:	88 60       	ori	r24, 0x08	; 8
    1812:	8c 93       	st	X, r24
  PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
    1814:	a8 e2       	ldi	r26, 0x28	; 40
    1816:	b0 e0       	ldi	r27, 0x00	; 0
    1818:	e8 e2       	ldi	r30, 0x28	; 40
    181a:	f0 e0       	ldi	r31, 0x00	; 0
    181c:	80 81       	ld	r24, Z
    181e:	87 7f       	andi	r24, 0xF7	; 247
    1820:	8c 93       	st	X, r24
}
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <motion_pin_config>:

void motion_pin_config (void)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	cd b7       	in	r28, 0x3d	; 61
    182e:	de b7       	in	r29, 0x3e	; 62
  DDRA = DDRA | 0x0F;
    1830:	a1 e2       	ldi	r26, 0x21	; 33
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	e1 e2       	ldi	r30, 0x21	; 33
    1836:	f0 e0       	ldi	r31, 0x00	; 0
    1838:	80 81       	ld	r24, Z
    183a:	8f 60       	ori	r24, 0x0F	; 15
    183c:	8c 93       	st	X, r24
  PORTA = PORTA & 0xF0;
    183e:	a2 e2       	ldi	r26, 0x22	; 34
    1840:	b0 e0       	ldi	r27, 0x00	; 0
    1842:	e2 e2       	ldi	r30, 0x22	; 34
    1844:	f0 e0       	ldi	r31, 0x00	; 0
    1846:	80 81       	ld	r24, Z
    1848:	80 7f       	andi	r24, 0xF0	; 240
    184a:	8c 93       	st	X, r24
  DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
    184c:	aa e0       	ldi	r26, 0x0A	; 10
    184e:	b1 e0       	ldi	r27, 0x01	; 1
    1850:	ea e0       	ldi	r30, 0x0A	; 10
    1852:	f1 e0       	ldi	r31, 0x01	; 1
    1854:	80 81       	ld	r24, Z
    1856:	88 61       	ori	r24, 0x18	; 24
    1858:	8c 93       	st	X, r24
  PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
    185a:	ab e0       	ldi	r26, 0x0B	; 11
    185c:	b1 e0       	ldi	r27, 0x01	; 1
    185e:	eb e0       	ldi	r30, 0x0B	; 11
    1860:	f1 e0       	ldi	r31, 0x01	; 1
    1862:	80 81       	ld	r24, Z
    1864:	88 61       	ori	r24, 0x18	; 24
    1866:	8c 93       	st	X, r24
}
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <port_init>:

//Function to initialize ports
void port_init()
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	cd b7       	in	r28, 0x3d	; 61
    1874:	de b7       	in	r29, 0x3e	; 62
  motion_pin_config();
    1876:	0e 94 14 0c 	call	0x1828	; 0x1828 <motion_pin_config>
  buzzer_pin_config();
    187a:	0e 94 ff 0b 	call	0x17fe	; 0x17fe <buzzer_pin_config>
}
    187e:	cf 91       	pop	r28
    1880:	df 91       	pop	r29
    1882:	08 95       	ret

00001884 <buzzer_on>:

void buzzer_on (void)
{
    1884:	df 93       	push	r29
    1886:	cf 93       	push	r28
    1888:	0f 92       	push	r0
    188a:	cd b7       	in	r28, 0x3d	; 61
    188c:	de b7       	in	r29, 0x3e	; 62
  unsigned char port_restore = 0;
    188e:	19 82       	std	Y+1, r1	; 0x01
  port_restore = PINC;
    1890:	e6 e2       	ldi	r30, 0x26	; 38
    1892:	f0 e0       	ldi	r31, 0x00	; 0
    1894:	80 81       	ld	r24, Z
    1896:	89 83       	std	Y+1, r24	; 0x01
  port_restore = port_restore | 0x08;
    1898:	89 81       	ldd	r24, Y+1	; 0x01
    189a:	88 60       	ori	r24, 0x08	; 8
    189c:	89 83       	std	Y+1, r24	; 0x01
  PORTC = port_restore;
    189e:	e8 e2       	ldi	r30, 0x28	; 40
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	89 81       	ldd	r24, Y+1	; 0x01
    18a4:	80 83       	st	Z, r24
}
    18a6:	0f 90       	pop	r0
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <buzzer_off>:

void buzzer_off (void)
{
    18ae:	df 93       	push	r29
    18b0:	cf 93       	push	r28
    18b2:	0f 92       	push	r0
    18b4:	cd b7       	in	r28, 0x3d	; 61
    18b6:	de b7       	in	r29, 0x3e	; 62
  unsigned char port_restore = 0;
    18b8:	19 82       	std	Y+1, r1	; 0x01
  port_restore = PINC;
    18ba:	e6 e2       	ldi	r30, 0x26	; 38
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	89 83       	std	Y+1, r24	; 0x01
  port_restore = port_restore & 0xF7;
    18c2:	89 81       	ldd	r24, Y+1	; 0x01
    18c4:	87 7f       	andi	r24, 0xF7	; 247
    18c6:	89 83       	std	Y+1, r24	; 0x01
  PORTC = port_restore;
    18c8:	e8 e2       	ldi	r30, 0x28	; 40
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	89 81       	ldd	r24, Y+1	; 0x01
    18ce:	80 83       	st	Z, r24
}
    18d0:	0f 90       	pop	r0
    18d2:	cf 91       	pop	r28
    18d4:	df 91       	pop	r29
    18d6:	08 95       	ret

000018d8 <uart0_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart0_init(void)
{
    18d8:	df 93       	push	r29
    18da:	cf 93       	push	r28
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
  UCSR0B = 0x00; //disable while setting baud rate
    18e0:	e1 ec       	ldi	r30, 0xC1	; 193
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	10 82       	st	Z, r1
  UCSR0A = 0x00;
    18e6:	e0 ec       	ldi	r30, 0xC0	; 192
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	10 82       	st	Z, r1
  UCSR0C = 0x06;
    18ec:	e2 ec       	ldi	r30, 0xC2	; 194
    18ee:	f0 e0       	ldi	r31, 0x00	; 0
    18f0:	86 e0       	ldi	r24, 0x06	; 6
    18f2:	80 83       	st	Z, r24
  UBRR0L = 0x47; //set baud rate lo
    18f4:	e4 ec       	ldi	r30, 0xC4	; 196
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	87 e4       	ldi	r24, 0x47	; 71
    18fa:	80 83       	st	Z, r24
  UBRR0H = 0x00; //set baud rate hi
    18fc:	e5 ec       	ldi	r30, 0xC5	; 197
    18fe:	f0 e0       	ldi	r31, 0x00	; 0
    1900:	10 82       	st	Z, r1
  UCSR0B = 0x98;
    1902:	e1 ec       	ldi	r30, 0xC1	; 193
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	88 e9       	ldi	r24, 0x98	; 152
    1908:	80 83       	st	Z, r24
}
    190a:	cf 91       	pop	r28
    190c:	df 91       	pop	r29
    190e:	08 95       	ret

00001910 <__vector_25>:


SIGNAL(SIG_USART0_RECV) 		// ISR for receive complete interrupt
{
    1910:	1f 92       	push	r1
    1912:	0f 92       	push	r0
    1914:	0f b6       	in	r0, 0x3f	; 63
    1916:	0f 92       	push	r0
    1918:	00 90 5b 00 	lds	r0, 0x005B
    191c:	0f 92       	push	r0
    191e:	11 24       	eor	r1, r1
    1920:	2f 93       	push	r18
    1922:	3f 93       	push	r19
    1924:	4f 93       	push	r20
    1926:	5f 93       	push	r21
    1928:	6f 93       	push	r22
    192a:	7f 93       	push	r23
    192c:	8f 93       	push	r24
    192e:	9f 93       	push	r25
    1930:	af 93       	push	r26
    1932:	bf 93       	push	r27
    1934:	ef 93       	push	r30
    1936:	ff 93       	push	r31
    1938:	df 93       	push	r29
    193a:	cf 93       	push	r28
    193c:	cd b7       	in	r28, 0x3d	; 61
    193e:	de b7       	in	r29, 0x3e	; 62
    1940:	6e 97       	sbiw	r28, 0x1e	; 30
    1942:	de bf       	out	0x3e, r29	; 62
    1944:	cd bf       	out	0x3d, r28	; 61
  //buzzer_on();

  data = UDR0; 				//making copy of data from UDR1 in 'data' variable 
    1946:	e6 ec       	ldi	r30, 0xC6	; 198
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	80 93 20 03 	sts	0x0320, r24

  //	UDR0 = data; 				//echo data back to PC
  //lcd_cursor(2,1);
  //lcd_string("INSIDE SIGNAL");
    
  count++;
    1950:	80 91 14 03 	lds	r24, 0x0314
    1954:	90 91 15 03 	lds	r25, 0x0315
    1958:	01 96       	adiw	r24, 0x01	; 1
    195a:	90 93 15 03 	sts	0x0315, r25
    195e:	80 93 14 03 	sts	0x0314, r24
  //lcd_print ((char)1, (char)16,count, 1);
  if(count%2==1)
    1962:	80 91 14 03 	lds	r24, 0x0314
    1966:	90 91 15 03 	lds	r25, 0x0315
    196a:	22 e0       	ldi	r18, 0x02	; 2
    196c:	30 e0       	ldi	r19, 0x00	; 0
    196e:	b9 01       	movw	r22, r18
    1970:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__divmodhi4>
    1974:	81 30       	cpi	r24, 0x01	; 1
    1976:	91 05       	cpc	r25, r1
    1978:	09 f0       	breq	.+2      	; 0x197c <__vector_25+0x6c>
    197a:	9e c1       	rjmp	.+828    	; 0x1cb8 <__vector_25+0x3a8>
    {
		degree=(int)data;
    197c:	80 91 20 03 	lds	r24, 0x0320
    1980:	88 2f       	mov	r24, r24
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	90 93 17 03 	sts	0x0317, r25
    1988:	80 93 16 03 	sts	0x0316, r24
      lcd_cursor(1,3+count);
    198c:	80 91 14 03 	lds	r24, 0x0314
    1990:	90 91 15 03 	lds	r25, 0x0315
    1994:	98 2f       	mov	r25, r24
    1996:	9d 5f       	subi	r25, 0xFD	; 253
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	69 2f       	mov	r22, r25
    199c:	0e 94 ce 0a 	call	0x159c	; 0x159c <lcd_cursor>
    // lcd_wr_char((char)(data-0x00));
    if(degree==250){
    19a0:	80 91 16 03 	lds	r24, 0x0316
    19a4:	90 91 17 03 	lds	r25, 0x0317
    19a8:	8a 3f       	cpi	r24, 0xFA	; 250
    19aa:	91 05       	cpc	r25, r1
    19ac:	09 f0       	breq	.+2      	; 0x19b0 <__vector_25+0xa0>
    19ae:	77 c0       	rjmp	.+238    	; 0x1a9e <__vector_25+0x18e>
		buzzer_on();
    19b0:	0e 94 42 0c 	call	0x1884	; 0x1884 <buzzer_on>
    19b4:	80 e0       	ldi	r24, 0x00	; 0
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	aa ef       	ldi	r26, 0xFA	; 250
    19ba:	b3 e4       	ldi	r27, 0x43	; 67
    19bc:	89 8f       	std	Y+25, r24	; 0x19
    19be:	9a 8f       	std	Y+26, r25	; 0x1a
    19c0:	ab 8f       	std	Y+27, r26	; 0x1b
    19c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19c4:	69 8d       	ldd	r22, Y+25	; 0x19
    19c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19cc:	2d ec       	ldi	r18, 0xCD	; 205
    19ce:	3c ec       	ldi	r19, 0xCC	; 204
    19d0:	4c e2       	ldi	r20, 0x2C	; 44
    19d2:	55 e4       	ldi	r21, 0x45	; 69
    19d4:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    19d8:	dc 01       	movw	r26, r24
    19da:	cb 01       	movw	r24, r22
    19dc:	8d 8b       	std	Y+21, r24	; 0x15
    19de:	9e 8b       	std	Y+22, r25	; 0x16
    19e0:	af 8b       	std	Y+23, r26	; 0x17
    19e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19e4:	6d 89       	ldd	r22, Y+21	; 0x15
    19e6:	7e 89       	ldd	r23, Y+22	; 0x16
    19e8:	8f 89       	ldd	r24, Y+23	; 0x17
    19ea:	98 8d       	ldd	r25, Y+24	; 0x18
    19ec:	20 e0       	ldi	r18, 0x00	; 0
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	40 e8       	ldi	r20, 0x80	; 128
    19f2:	5f e3       	ldi	r21, 0x3F	; 63
    19f4:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
    19f8:	88 23       	and	r24, r24
    19fa:	2c f4       	brge	.+10     	; 0x1a06 <__vector_25+0xf6>
		__ticks = 1;
    19fc:	81 e0       	ldi	r24, 0x01	; 1
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	9c 8b       	std	Y+20, r25	; 0x14
    1a02:	8b 8b       	std	Y+19, r24	; 0x13
    1a04:	3f c0       	rjmp	.+126    	; 0x1a84 <__vector_25+0x174>
	else if (__tmp > 65535)
    1a06:	6d 89       	ldd	r22, Y+21	; 0x15
    1a08:	7e 89       	ldd	r23, Y+22	; 0x16
    1a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    1a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    1a0e:	20 e0       	ldi	r18, 0x00	; 0
    1a10:	3f ef       	ldi	r19, 0xFF	; 255
    1a12:	4f e7       	ldi	r20, 0x7F	; 127
    1a14:	57 e4       	ldi	r21, 0x47	; 71
    1a16:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
    1a1a:	18 16       	cp	r1, r24
    1a1c:	4c f5       	brge	.+82     	; 0x1a70 <__vector_25+0x160>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    1a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a26:	20 e0       	ldi	r18, 0x00	; 0
    1a28:	30 e0       	ldi	r19, 0x00	; 0
    1a2a:	40 e2       	ldi	r20, 0x20	; 32
    1a2c:	51 e4       	ldi	r21, 0x41	; 65
    1a2e:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	bc 01       	movw	r22, r24
    1a38:	cd 01       	movw	r24, r26
    1a3a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    1a3e:	dc 01       	movw	r26, r24
    1a40:	cb 01       	movw	r24, r22
    1a42:	9c 8b       	std	Y+20, r25	; 0x14
    1a44:	8b 8b       	std	Y+19, r24	; 0x13
    1a46:	0f c0       	rjmp	.+30     	; 0x1a66 <__vector_25+0x156>
    1a48:	84 e1       	ldi	r24, 0x14	; 20
    1a4a:	91 e0       	ldi	r25, 0x01	; 1
    1a4c:	9a 8b       	std	Y+18, r25	; 0x12
    1a4e:	89 8b       	std	Y+17, r24	; 0x11
    1a50:	89 89       	ldd	r24, Y+17	; 0x11
    1a52:	9a 89       	ldd	r25, Y+18	; 0x12
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <__vector_25+0x144>
    1a58:	9a 8b       	std	Y+18, r25	; 0x12
    1a5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    1a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    1a60:	01 97       	sbiw	r24, 0x01	; 1
    1a62:	9c 8b       	std	Y+20, r25	; 0x14
    1a64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a66:	8b 89       	ldd	r24, Y+19	; 0x13
    1a68:	9c 89       	ldd	r25, Y+20	; 0x14
    1a6a:	00 97       	sbiw	r24, 0x00	; 0
    1a6c:	69 f7       	brne	.-38     	; 0x1a48 <__vector_25+0x138>
    1a6e:	14 c0       	rjmp	.+40     	; 0x1a98 <__vector_25+0x188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a70:	6d 89       	ldd	r22, Y+21	; 0x15
    1a72:	7e 89       	ldd	r23, Y+22	; 0x16
    1a74:	8f 89       	ldd	r24, Y+23	; 0x17
    1a76:	98 8d       	ldd	r25, Y+24	; 0x18
    1a78:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	cb 01       	movw	r24, r22
    1a80:	9c 8b       	std	Y+20, r25	; 0x14
    1a82:	8b 8b       	std	Y+19, r24	; 0x13
    1a84:	8b 89       	ldd	r24, Y+19	; 0x13
    1a86:	9c 89       	ldd	r25, Y+20	; 0x14
    1a88:	98 8b       	std	Y+16, r25	; 0x10
    1a8a:	8f 87       	std	Y+15, r24	; 0x0f
    1a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a8e:	98 89       	ldd	r25, Y+16	; 0x10
    1a90:	01 97       	sbiw	r24, 0x01	; 1
    1a92:	f1 f7       	brne	.-4      	; 0x1a90 <__vector_25+0x180>
    1a94:	98 8b       	std	Y+16, r25	; 0x10
    1a96:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(500);
		buzzer_off();
    1a98:	0e 94 57 0c 	call	0x18ae	; 0x18ae <buzzer_off>
    1a9c:	07 c1       	rjmp	.+526    	; 0x1cac <__vector_25+0x39c>
	}
	else{
		if(degree>207) {
    1a9e:	80 91 16 03 	lds	r24, 0x0316
    1aa2:	90 91 17 03 	lds	r25, 0x0317
    1aa6:	80 3d       	cpi	r24, 0xD0	; 208
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	54 f0       	brlt	.+20     	; 0x1ac0 <__vector_25+0x1b0>
		degree=degree-80;
    1aac:	80 91 16 03 	lds	r24, 0x0316
    1ab0:	90 91 17 03 	lds	r25, 0x0317
    1ab4:	80 55       	subi	r24, 0x50	; 80
    1ab6:	90 40       	sbci	r25, 0x00	; 0
    1ab8:	90 93 17 03 	sts	0x0317, r25
    1abc:	80 93 16 03 	sts	0x0316, r24
		}
		lcd_print ((char)1, (char)12,(int)degree, 3);
    1ac0:	80 91 16 03 	lds	r24, 0x0316
    1ac4:	90 91 17 03 	lds	r25, 0x0317
    1ac8:	9c 01       	movw	r18, r24
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	6c e0       	ldi	r22, 0x0C	; 12
    1ace:	a9 01       	movw	r20, r18
    1ad0:	23 e0       	ldi	r18, 0x03	; 3
    1ad2:	30 e0       	ldi	r19, 0x00	; 0
    1ad4:	0e 94 10 0b 	call	0x1620	; 0x1620 <lcd_print>
		 degree=(degree*2)%360;
    1ad8:	80 91 16 03 	lds	r24, 0x0316
    1adc:	90 91 17 03 	lds	r25, 0x0317
    1ae0:	88 0f       	add	r24, r24
    1ae2:	99 1f       	adc	r25, r25
    1ae4:	28 e6       	ldi	r18, 0x68	; 104
    1ae6:	31 e0       	ldi	r19, 0x01	; 1
    1ae8:	b9 01       	movw	r22, r18
    1aea:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <__divmodhi4>
    1aee:	90 93 17 03 	sts	0x0317, r25
    1af2:	80 93 16 03 	sts	0x0316, r24
		 lcd_print ((char)1, (char)8,(int)degree, 3);
    1af6:	80 91 16 03 	lds	r24, 0x0316
    1afa:	90 91 17 03 	lds	r25, 0x0317
    1afe:	9c 01       	movw	r18, r24
    1b00:	81 e0       	ldi	r24, 0x01	; 1
    1b02:	68 e0       	ldi	r22, 0x08	; 8
    1b04:	a9 01       	movw	r20, r18
    1b06:	23 e0       	ldi	r18, 0x03	; 3
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	0e 94 10 0b 	call	0x1620	; 0x1620 <lcd_print>
		degree=(degree>=8)?(degree-8):0;
    1b0e:	80 91 16 03 	lds	r24, 0x0316
    1b12:	90 91 17 03 	lds	r25, 0x0317
    1b16:	88 30       	cpi	r24, 0x08	; 8
    1b18:	91 05       	cpc	r25, r1
    1b1a:	54 f0       	brlt	.+20     	; 0x1b30 <__vector_25+0x220>
    1b1c:	80 91 16 03 	lds	r24, 0x0316
    1b20:	90 91 17 03 	lds	r25, 0x0317
    1b24:	9c 01       	movw	r18, r24
    1b26:	28 50       	subi	r18, 0x08	; 8
    1b28:	30 40       	sbci	r19, 0x00	; 0
    1b2a:	3e 8f       	std	Y+30, r19	; 0x1e
    1b2c:	2d 8f       	std	Y+29, r18	; 0x1d
    1b2e:	02 c0       	rjmp	.+4      	; 0x1b34 <__vector_25+0x224>
    1b30:	1e 8e       	std	Y+30, r1	; 0x1e
    1b32:	1d 8e       	std	Y+29, r1	; 0x1d
    1b34:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1b36:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1b38:	90 93 17 03 	sts	0x0317, r25
    1b3c:	80 93 16 03 	sts	0x0316, r24
		for(p=0;p<10 && degree<355;p++){
    1b40:	10 92 19 03 	sts	0x0319, r1
    1b44:	10 92 18 03 	sts	0x0318, r1
    1b48:	a1 c0       	rjmp	.+322    	; 0x1c8c <__vector_25+0x37c>
			 if(degree <=175 ){
    1b4a:	80 91 16 03 	lds	r24, 0x0316
    1b4e:	90 91 17 03 	lds	r25, 0x0317
    1b52:	80 3b       	cpi	r24, 0xB0	; 176
    1b54:	91 05       	cpc	r25, r1
    1b56:	54 f4       	brge	.+20     	; 0x1b6c <__vector_25+0x25c>
		      servo_1(degree);
    1b58:	80 91 16 03 	lds	r24, 0x0316
    1b5c:	90 91 17 03 	lds	r25, 0x0317
    1b60:	0e 94 2b 01 	call	0x256	; 0x256 <servo_1>
		      servo_2(180);
    1b64:	84 eb       	ldi	r24, 0xB4	; 180
    1b66:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
    1b6a:	0c c0       	rjmp	.+24     	; 0x1b84 <__vector_25+0x274>
		    }
		    else{
		      servo_1(175);
    1b6c:	8f ea       	ldi	r24, 0xAF	; 175
    1b6e:	0e 94 2b 01 	call	0x256	; 0x256 <servo_1>
		     servo_2(360-degree);	
    1b72:	80 91 16 03 	lds	r24, 0x0316
    1b76:	90 91 17 03 	lds	r25, 0x0317
    1b7a:	98 2f       	mov	r25, r24
    1b7c:	88 e6       	ldi	r24, 0x68	; 104
    1b7e:	89 1b       	sub	r24, r25
    1b80:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
		    }
			degree+=2;
    1b84:	80 91 16 03 	lds	r24, 0x0316
    1b88:	90 91 17 03 	lds	r25, 0x0317
    1b8c:	02 96       	adiw	r24, 0x02	; 2
    1b8e:	90 93 17 03 	sts	0x0317, r25
    1b92:	80 93 16 03 	sts	0x0316, r24
    1b96:	80 e0       	ldi	r24, 0x00	; 0
    1b98:	90 e0       	ldi	r25, 0x00	; 0
    1b9a:	a8 ec       	ldi	r26, 0xC8	; 200
    1b9c:	b2 e4       	ldi	r27, 0x42	; 66
    1b9e:	8b 87       	std	Y+11, r24	; 0x0b
    1ba0:	9c 87       	std	Y+12, r25	; 0x0c
    1ba2:	ad 87       	std	Y+13, r26	; 0x0d
    1ba4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ba6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ba8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1baa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bae:	2d ec       	ldi	r18, 0xCD	; 205
    1bb0:	3c ec       	ldi	r19, 0xCC	; 204
    1bb2:	4c e2       	ldi	r20, 0x2C	; 44
    1bb4:	55 e4       	ldi	r21, 0x45	; 69
    1bb6:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1bba:	dc 01       	movw	r26, r24
    1bbc:	cb 01       	movw	r24, r22
    1bbe:	8f 83       	std	Y+7, r24	; 0x07
    1bc0:	98 87       	std	Y+8, r25	; 0x08
    1bc2:	a9 87       	std	Y+9, r26	; 0x09
    1bc4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bc6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bc8:	78 85       	ldd	r23, Y+8	; 0x08
    1bca:	89 85       	ldd	r24, Y+9	; 0x09
    1bcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bce:	20 e0       	ldi	r18, 0x00	; 0
    1bd0:	30 e0       	ldi	r19, 0x00	; 0
    1bd2:	40 e8       	ldi	r20, 0x80	; 128
    1bd4:	5f e3       	ldi	r21, 0x3F	; 63
    1bd6:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
    1bda:	88 23       	and	r24, r24
    1bdc:	2c f4       	brge	.+10     	; 0x1be8 <__vector_25+0x2d8>
		__ticks = 1;
    1bde:	81 e0       	ldi	r24, 0x01	; 1
    1be0:	90 e0       	ldi	r25, 0x00	; 0
    1be2:	9e 83       	std	Y+6, r25	; 0x06
    1be4:	8d 83       	std	Y+5, r24	; 0x05
    1be6:	3f c0       	rjmp	.+126    	; 0x1c66 <__vector_25+0x356>
	else if (__tmp > 65535)
    1be8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bea:	78 85       	ldd	r23, Y+8	; 0x08
    1bec:	89 85       	ldd	r24, Y+9	; 0x09
    1bee:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bf0:	20 e0       	ldi	r18, 0x00	; 0
    1bf2:	3f ef       	ldi	r19, 0xFF	; 255
    1bf4:	4f e7       	ldi	r20, 0x7F	; 127
    1bf6:	57 e4       	ldi	r21, 0x47	; 71
    1bf8:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
    1bfc:	18 16       	cp	r1, r24
    1bfe:	4c f5       	brge	.+82     	; 0x1c52 <__vector_25+0x342>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c00:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c02:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c04:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c06:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c08:	20 e0       	ldi	r18, 0x00	; 0
    1c0a:	30 e0       	ldi	r19, 0x00	; 0
    1c0c:	40 e2       	ldi	r20, 0x20	; 32
    1c0e:	51 e4       	ldi	r21, 0x41	; 65
    1c10:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1c14:	dc 01       	movw	r26, r24
    1c16:	cb 01       	movw	r24, r22
    1c18:	bc 01       	movw	r22, r24
    1c1a:	cd 01       	movw	r24, r26
    1c1c:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    1c20:	dc 01       	movw	r26, r24
    1c22:	cb 01       	movw	r24, r22
    1c24:	9e 83       	std	Y+6, r25	; 0x06
    1c26:	8d 83       	std	Y+5, r24	; 0x05
    1c28:	0f c0       	rjmp	.+30     	; 0x1c48 <__vector_25+0x338>
    1c2a:	84 e1       	ldi	r24, 0x14	; 20
    1c2c:	91 e0       	ldi	r25, 0x01	; 1
    1c2e:	9c 83       	std	Y+4, r25	; 0x04
    1c30:	8b 83       	std	Y+3, r24	; 0x03
    1c32:	8b 81       	ldd	r24, Y+3	; 0x03
    1c34:	9c 81       	ldd	r25, Y+4	; 0x04
    1c36:	01 97       	sbiw	r24, 0x01	; 1
    1c38:	f1 f7       	brne	.-4      	; 0x1c36 <__vector_25+0x326>
    1c3a:	9c 83       	std	Y+4, r25	; 0x04
    1c3c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	01 97       	sbiw	r24, 0x01	; 1
    1c44:	9e 83       	std	Y+6, r25	; 0x06
    1c46:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c48:	8d 81       	ldd	r24, Y+5	; 0x05
    1c4a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4c:	00 97       	sbiw	r24, 0x00	; 0
    1c4e:	69 f7       	brne	.-38     	; 0x1c2a <__vector_25+0x31a>
    1c50:	14 c0       	rjmp	.+40     	; 0x1c7a <__vector_25+0x36a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c52:	6f 81       	ldd	r22, Y+7	; 0x07
    1c54:	78 85       	ldd	r23, Y+8	; 0x08
    1c56:	89 85       	ldd	r24, Y+9	; 0x09
    1c58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c5a:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	9e 83       	std	Y+6, r25	; 0x06
    1c64:	8d 83       	std	Y+5, r24	; 0x05
    1c66:	8d 81       	ldd	r24, Y+5	; 0x05
    1c68:	9e 81       	ldd	r25, Y+6	; 0x06
    1c6a:	9a 83       	std	Y+2, r25	; 0x02
    1c6c:	89 83       	std	Y+1, r24	; 0x01
    1c6e:	89 81       	ldd	r24, Y+1	; 0x01
    1c70:	9a 81       	ldd	r25, Y+2	; 0x02
    1c72:	01 97       	sbiw	r24, 0x01	; 1
    1c74:	f1 f7       	brne	.-4      	; 0x1c72 <__vector_25+0x362>
    1c76:	9a 83       	std	Y+2, r25	; 0x02
    1c78:	89 83       	std	Y+1, r24	; 0x01
		}
		lcd_print ((char)1, (char)12,(int)degree, 3);
		 degree=(degree*2)%360;
		 lcd_print ((char)1, (char)8,(int)degree, 3);
		degree=(degree>=8)?(degree-8):0;
		for(p=0;p<10 && degree<355;p++){
    1c7a:	80 91 18 03 	lds	r24, 0x0318
    1c7e:	90 91 19 03 	lds	r25, 0x0319
    1c82:	01 96       	adiw	r24, 0x01	; 1
    1c84:	90 93 19 03 	sts	0x0319, r25
    1c88:	80 93 18 03 	sts	0x0318, r24
    1c8c:	80 91 18 03 	lds	r24, 0x0318
    1c90:	90 91 19 03 	lds	r25, 0x0319
    1c94:	8a 30       	cpi	r24, 0x0A	; 10
    1c96:	91 05       	cpc	r25, r1
    1c98:	4c f4       	brge	.+18     	; 0x1cac <__vector_25+0x39c>
    1c9a:	80 91 16 03 	lds	r24, 0x0316
    1c9e:	90 91 17 03 	lds	r25, 0x0317
    1ca2:	21 e0       	ldi	r18, 0x01	; 1
    1ca4:	83 36       	cpi	r24, 0x63	; 99
    1ca6:	92 07       	cpc	r25, r18
    1ca8:	0c f4       	brge	.+2      	; 0x1cac <__vector_25+0x39c>
    1caa:	4f cf       	rjmp	.-354    	; 0x1b4a <__vector_25+0x23a>
		    }
			degree+=2;
			_delay_ms(100);
		}
	}
    count=1;
    1cac:	81 e0       	ldi	r24, 0x01	; 1
    1cae:	90 e0       	ldi	r25, 0x00	; 0
    1cb0:	90 93 15 03 	sts	0x0315, r25
    1cb4:	80 93 14 03 	sts	0x0314, r24
     // servo_2(360-degree);	
    //}
    //degree=0;
  //}		
  
}
    1cb8:	6e 96       	adiw	r28, 0x1e	; 30
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	cd bf       	out	0x3d, r28	; 61
    1cbe:	cf 91       	pop	r28
    1cc0:	df 91       	pop	r29
    1cc2:	ff 91       	pop	r31
    1cc4:	ef 91       	pop	r30
    1cc6:	bf 91       	pop	r27
    1cc8:	af 91       	pop	r26
    1cca:	9f 91       	pop	r25
    1ccc:	8f 91       	pop	r24
    1cce:	7f 91       	pop	r23
    1cd0:	6f 91       	pop	r22
    1cd2:	5f 91       	pop	r21
    1cd4:	4f 91       	pop	r20
    1cd6:	3f 91       	pop	r19
    1cd8:	2f 91       	pop	r18
    1cda:	0f 90       	pop	r0
    1cdc:	00 92 5b 00 	sts	0x005B, r0
    1ce0:	0f 90       	pop	r0
    1ce2:	0f be       	out	0x3f, r0	; 63
    1ce4:	0f 90       	pop	r0
    1ce6:	1f 90       	pop	r1
    1ce8:	18 95       	reti

00001cea <init_devices>:


//Function To Initialize all The Devices
void init_devices()
{
    1cea:	df 93       	push	r29
    1cec:	cf 93       	push	r28
    1cee:	cd b7       	in	r28, 0x3d	; 61
    1cf0:	de b7       	in	r29, 0x3e	; 62
  cli(); //Clears the global interrupts
    1cf2:	f8 94       	cli
  port_init();  //Initializes all the ports
    1cf4:	0e 94 37 0c 	call	0x186e	; 0x186e <port_init>
  uart0_init(); //Initailize UART1 for serial communiaction
    1cf8:	0e 94 6c 0c 	call	0x18d8	; 0x18d8 <uart0_init>
  sei();   //Enables the global interrupts
    1cfc:	78 94       	sei
}
    1cfe:	cf 91       	pop	r28
    1d00:	df 91       	pop	r29
    1d02:	08 95       	ret

00001d04 <main>:

//Main Function
int main(void)
{
    1d04:	df 93       	push	r29
    1d06:	cf 93       	push	r28
    1d08:	cd b7       	in	r28, 0x3d	; 61
    1d0a:	de b7       	in	r29, 0x3e	; 62
    1d0c:	6c 97       	sbiw	r28, 0x1c	; 28
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
  init_devices();
    1d18:	0e 94 75 0e 	call	0x1cea	; 0x1cea <init_devices>
  init_servo();
    1d1c:	0e 94 1e 01 	call	0x23c	; 0x23c <init_servo>
  init_lcd();
    1d20:	0e 94 f4 0b 	call	0x17e8	; 0x17e8 <init_lcd>

  lcd_set_4bit();
    1d24:	0e 94 60 02 	call	0x4c0	; 0x4c0 <lcd_set_4bit>
  lcd_init();
    1d28:	0e 94 5f 07 	call	0xebe	; 0xebe <lcd_init>
  lcd_cursor(2,1);
    1d2c:	82 e0       	ldi	r24, 0x02	; 2
    1d2e:	61 e0       	ldi	r22, 0x01	; 1
    1d30:	0e 94 ce 0a 	call	0x159c	; 0x159c <lcd_cursor>
  lcd_string("FIRING BOT");
    1d34:	80 e0       	ldi	r24, 0x00	; 0
    1d36:	92 e0       	ldi	r25, 0x02	; 2
    1d38:	0e 94 b1 0a 	call	0x1562	; 0x1562 <lcd_string>
  servo_1(0);
    1d3c:	80 e0       	ldi	r24, 0x00	; 0
    1d3e:	0e 94 2b 01 	call	0x256	; 0x256 <servo_1>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e8       	ldi	r25, 0x80	; 128
    1d46:	ab e3       	ldi	r26, 0x3B	; 59
    1d48:	b4 e4       	ldi	r27, 0x44	; 68
    1d4a:	89 8f       	std	Y+25, r24	; 0x19
    1d4c:	9a 8f       	std	Y+26, r25	; 0x1a
    1d4e:	ab 8f       	std	Y+27, r26	; 0x1b
    1d50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	69 8d       	ldd	r22, Y+25	; 0x19
    1d54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d5a:	2d ec       	ldi	r18, 0xCD	; 205
    1d5c:	3c ec       	ldi	r19, 0xCC	; 204
    1d5e:	4c e2       	ldi	r20, 0x2C	; 44
    1d60:	55 e4       	ldi	r21, 0x45	; 69
    1d62:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8d 8b       	std	Y+21, r24	; 0x15
    1d6c:	9e 8b       	std	Y+22, r25	; 0x16
    1d6e:	af 8b       	std	Y+23, r26	; 0x17
    1d70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1d72:	6d 89       	ldd	r22, Y+21	; 0x15
    1d74:	7e 89       	ldd	r23, Y+22	; 0x16
    1d76:	8f 89       	ldd	r24, Y+23	; 0x17
    1d78:	98 8d       	ldd	r25, Y+24	; 0x18
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <main+0x90>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9c 8b       	std	Y+20, r25	; 0x14
    1d90:	8b 8b       	std	Y+19, r24	; 0x13
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <main+0x10e>
	else if (__tmp > 65535)
    1d94:	6d 89       	ldd	r22, Y+21	; 0x15
    1d96:	7e 89       	ldd	r23, Y+22	; 0x16
    1d98:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9a:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	69 8d       	ldd	r22, Y+25	; 0x19
    1dae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1db0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1db2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9c 8b       	std	Y+20, r25	; 0x14
    1dd2:	8b 8b       	std	Y+19, r24	; 0x13
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <main+0xf0>
    1dd6:	84 e1       	ldi	r24, 0x14	; 20
    1dd8:	91 e0       	ldi	r25, 0x01	; 1
    1dda:	9a 8b       	std	Y+18, r25	; 0x12
    1ddc:	89 8b       	std	Y+17, r24	; 0x11
    1dde:	89 89       	ldd	r24, Y+17	; 0x11
    1de0:	9a 89       	ldd	r25, Y+18	; 0x12
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <main+0xde>
    1de6:	9a 8b       	std	Y+18, r25	; 0x12
    1de8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8b 89       	ldd	r24, Y+19	; 0x13
    1dec:	9c 89       	ldd	r25, Y+20	; 0x14
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	9c 8b       	std	Y+20, r25	; 0x14
    1df2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8b 89       	ldd	r24, Y+19	; 0x13
    1df6:	9c 89       	ldd	r25, Y+20	; 0x14
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <main+0xd2>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	6d 89       	ldd	r22, Y+21	; 0x15
    1e00:	7e 89       	ldd	r23, Y+22	; 0x16
    1e02:	8f 89       	ldd	r24, Y+23	; 0x17
    1e04:	98 8d       	ldd	r25, Y+24	; 0x18
    1e06:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9c 8b       	std	Y+20, r25	; 0x14
    1e10:	8b 8b       	std	Y+19, r24	; 0x13
    1e12:	8b 89       	ldd	r24, Y+19	; 0x13
    1e14:	9c 89       	ldd	r25, Y+20	; 0x14
    1e16:	98 8b       	std	Y+16, r25	; 0x10
    1e18:	8f 87       	std	Y+15, r24	; 0x0f
    1e1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    1e1c:	98 89       	ldd	r25, Y+16	; 0x10
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <main+0x11a>
    1e22:	98 8b       	std	Y+16, r25	; 0x10
    1e24:	8f 87       	std	Y+15, r24	; 0x0f
  _delay_ms(750);
  servo_2(180);
    1e26:	84 eb       	ldi	r24, 0xB4	; 180
    1e28:	0e 94 79 01 	call	0x2f2	; 0x2f2 <servo_2>
  count=0;
    1e2c:	10 92 15 03 	sts	0x0315, r1
    1e30:	10 92 14 03 	sts	0x0314, r1
  degree=0;
    1e34:	10 92 17 03 	sts	0x0317, r1
    1e38:	10 92 16 03 	sts	0x0316, r1
    1e3c:	80 e0       	ldi	r24, 0x00	; 0
    1e3e:	90 e0       	ldi	r25, 0x00	; 0
    1e40:	aa e7       	ldi	r26, 0x7A	; 122
    1e42:	b4 e4       	ldi	r27, 0x44	; 68
    1e44:	8b 87       	std	Y+11, r24	; 0x0b
    1e46:	9c 87       	std	Y+12, r25	; 0x0c
    1e48:	ad 87       	std	Y+13, r26	; 0x0d
    1e4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e54:	2d ec       	ldi	r18, 0xCD	; 205
    1e56:	3c ec       	ldi	r19, 0xCC	; 204
    1e58:	4c e2       	ldi	r20, 0x2C	; 44
    1e5a:	55 e4       	ldi	r21, 0x45	; 69
    1e5c:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1e60:	dc 01       	movw	r26, r24
    1e62:	cb 01       	movw	r24, r22
    1e64:	8f 83       	std	Y+7, r24	; 0x07
    1e66:	98 87       	std	Y+8, r25	; 0x08
    1e68:	a9 87       	std	Y+9, r26	; 0x09
    1e6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1e6c:	6f 81       	ldd	r22, Y+7	; 0x07
    1e6e:	78 85       	ldd	r23, Y+8	; 0x08
    1e70:	89 85       	ldd	r24, Y+9	; 0x09
    1e72:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e74:	20 e0       	ldi	r18, 0x00	; 0
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	40 e8       	ldi	r20, 0x80	; 128
    1e7a:	5f e3       	ldi	r21, 0x3F	; 63
    1e7c:	0e 94 6d 13 	call	0x26da	; 0x26da <__ltsf2>
    1e80:	88 23       	and	r24, r24
    1e82:	2c f4       	brge	.+10     	; 0x1e8e <main+0x18a>
		__ticks = 1;
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	90 e0       	ldi	r25, 0x00	; 0
    1e88:	9e 83       	std	Y+6, r25	; 0x06
    1e8a:	8d 83       	std	Y+5, r24	; 0x05
    1e8c:	3f c0       	rjmp	.+126    	; 0x1f0c <main+0x208>
	else if (__tmp > 65535)
    1e8e:	6f 81       	ldd	r22, Y+7	; 0x07
    1e90:	78 85       	ldd	r23, Y+8	; 0x08
    1e92:	89 85       	ldd	r24, Y+9	; 0x09
    1e94:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e96:	20 e0       	ldi	r18, 0x00	; 0
    1e98:	3f ef       	ldi	r19, 0xFF	; 255
    1e9a:	4f e7       	ldi	r20, 0x7F	; 127
    1e9c:	57 e4       	ldi	r21, 0x47	; 71
    1e9e:	0e 94 0d 13 	call	0x261a	; 0x261a <__gtsf2>
    1ea2:	18 16       	cp	r1, r24
    1ea4:	4c f5       	brge	.+82     	; 0x1ef8 <main+0x1f4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ea6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ea8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1eaa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1eac:	9e 85       	ldd	r25, Y+14	; 0x0e
    1eae:	20 e0       	ldi	r18, 0x00	; 0
    1eb0:	30 e0       	ldi	r19, 0x00	; 0
    1eb2:	40 e2       	ldi	r20, 0x20	; 32
    1eb4:	51 e4       	ldi	r21, 0x41	; 65
    1eb6:	0e 94 67 11 	call	0x22ce	; 0x22ce <__mulsf3>
    1eba:	dc 01       	movw	r26, r24
    1ebc:	cb 01       	movw	r24, r22
    1ebe:	bc 01       	movw	r22, r24
    1ec0:	cd 01       	movw	r24, r26
    1ec2:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	cb 01       	movw	r24, r22
    1eca:	9e 83       	std	Y+6, r25	; 0x06
    1ecc:	8d 83       	std	Y+5, r24	; 0x05
    1ece:	0f c0       	rjmp	.+30     	; 0x1eee <main+0x1ea>
    1ed0:	84 e1       	ldi	r24, 0x14	; 20
    1ed2:	91 e0       	ldi	r25, 0x01	; 1
    1ed4:	9c 83       	std	Y+4, r25	; 0x04
    1ed6:	8b 83       	std	Y+3, r24	; 0x03
    1ed8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eda:	9c 81       	ldd	r25, Y+4	; 0x04
    1edc:	01 97       	sbiw	r24, 0x01	; 1
    1ede:	f1 f7       	brne	.-4      	; 0x1edc <main+0x1d8>
    1ee0:	9c 83       	std	Y+4, r25	; 0x04
    1ee2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ee4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ee6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ee8:	01 97       	sbiw	r24, 0x01	; 1
    1eea:	9e 83       	std	Y+6, r25	; 0x06
    1eec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1eee:	8d 81       	ldd	r24, Y+5	; 0x05
    1ef0:	9e 81       	ldd	r25, Y+6	; 0x06
    1ef2:	00 97       	sbiw	r24, 0x00	; 0
    1ef4:	69 f7       	brne	.-38     	; 0x1ed0 <main+0x1cc>
    1ef6:	14 c0       	rjmp	.+40     	; 0x1f20 <main+0x21c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ef8:	6f 81       	ldd	r22, Y+7	; 0x07
    1efa:	78 85       	ldd	r23, Y+8	; 0x08
    1efc:	89 85       	ldd	r24, Y+9	; 0x09
    1efe:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f00:	0e 94 91 0f 	call	0x1f22	; 0x1f22 <__fixunssfsi>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	9e 83       	std	Y+6, r25	; 0x06
    1f0a:	8d 83       	std	Y+5, r24	; 0x05
    1f0c:	8d 81       	ldd	r24, Y+5	; 0x05
    1f0e:	9e 81       	ldd	r25, Y+6	; 0x06
    1f10:	9a 83       	std	Y+2, r25	; 0x02
    1f12:	89 83       	std	Y+1, r24	; 0x01
    1f14:	89 81       	ldd	r24, Y+1	; 0x01
    1f16:	9a 81       	ldd	r25, Y+2	; 0x02
    1f18:	01 97       	sbiw	r24, 0x01	; 1
    1f1a:	f1 f7       	brne	.-4      	; 0x1f18 <main+0x214>
    1f1c:	9a 83       	std	Y+2, r25	; 0x02
    1f1e:	89 83       	std	Y+1, r24	; 0x01
    1f20:	ff cf       	rjmp	.-2      	; 0x1f20 <main+0x21c>

00001f22 <__fixunssfsi>:
    1f22:	ef 92       	push	r14
    1f24:	ff 92       	push	r15
    1f26:	0f 93       	push	r16
    1f28:	1f 93       	push	r17
    1f2a:	7b 01       	movw	r14, r22
    1f2c:	8c 01       	movw	r16, r24
    1f2e:	20 e0       	ldi	r18, 0x00	; 0
    1f30:	30 e0       	ldi	r19, 0x00	; 0
    1f32:	40 e0       	ldi	r20, 0x00	; 0
    1f34:	5f e4       	ldi	r21, 0x4F	; 79
    1f36:	0e 94 3d 13 	call	0x267a	; 0x267a <__gesf2>
    1f3a:	88 23       	and	r24, r24
    1f3c:	8c f0       	brlt	.+34     	; 0x1f60 <__fixunssfsi+0x3e>
    1f3e:	c8 01       	movw	r24, r16
    1f40:	b7 01       	movw	r22, r14
    1f42:	20 e0       	ldi	r18, 0x00	; 0
    1f44:	30 e0       	ldi	r19, 0x00	; 0
    1f46:	40 e0       	ldi	r20, 0x00	; 0
    1f48:	5f e4       	ldi	r21, 0x4F	; 79
    1f4a:	0e 94 09 11 	call	0x2212	; 0x2212 <__subsf3>
    1f4e:	0e 94 9d 13 	call	0x273a	; 0x273a <__fixsfsi>
    1f52:	9b 01       	movw	r18, r22
    1f54:	ac 01       	movw	r20, r24
    1f56:	20 50       	subi	r18, 0x00	; 0
    1f58:	30 40       	sbci	r19, 0x00	; 0
    1f5a:	40 40       	sbci	r20, 0x00	; 0
    1f5c:	50 48       	sbci	r21, 0x80	; 128
    1f5e:	06 c0       	rjmp	.+12     	; 0x1f6c <__fixunssfsi+0x4a>
    1f60:	c8 01       	movw	r24, r16
    1f62:	b7 01       	movw	r22, r14
    1f64:	0e 94 9d 13 	call	0x273a	; 0x273a <__fixsfsi>
    1f68:	9b 01       	movw	r18, r22
    1f6a:	ac 01       	movw	r20, r24
    1f6c:	b9 01       	movw	r22, r18
    1f6e:	ca 01       	movw	r24, r20
    1f70:	1f 91       	pop	r17
    1f72:	0f 91       	pop	r16
    1f74:	ff 90       	pop	r15
    1f76:	ef 90       	pop	r14
    1f78:	08 95       	ret

00001f7a <_fpadd_parts>:
    1f7a:	a0 e0       	ldi	r26, 0x00	; 0
    1f7c:	b0 e0       	ldi	r27, 0x00	; 0
    1f7e:	e3 ec       	ldi	r30, 0xC3	; 195
    1f80:	ff e0       	ldi	r31, 0x0F	; 15
    1f82:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__prologue_saves__>
    1f86:	dc 01       	movw	r26, r24
    1f88:	2b 01       	movw	r4, r22
    1f8a:	fa 01       	movw	r30, r20
    1f8c:	9c 91       	ld	r25, X
    1f8e:	92 30       	cpi	r25, 0x02	; 2
    1f90:	08 f4       	brcc	.+2      	; 0x1f94 <_fpadd_parts+0x1a>
    1f92:	39 c1       	rjmp	.+626    	; 0x2206 <__stack+0x7>
    1f94:	eb 01       	movw	r28, r22
    1f96:	88 81       	ld	r24, Y
    1f98:	82 30       	cpi	r24, 0x02	; 2
    1f9a:	08 f4       	brcc	.+2      	; 0x1f9e <_fpadd_parts+0x24>
    1f9c:	33 c1       	rjmp	.+614    	; 0x2204 <__stack+0x5>
    1f9e:	94 30       	cpi	r25, 0x04	; 4
    1fa0:	69 f4       	brne	.+26     	; 0x1fbc <_fpadd_parts+0x42>
    1fa2:	84 30       	cpi	r24, 0x04	; 4
    1fa4:	09 f0       	breq	.+2      	; 0x1fa8 <_fpadd_parts+0x2e>
    1fa6:	2f c1       	rjmp	.+606    	; 0x2206 <__stack+0x7>
    1fa8:	11 96       	adiw	r26, 0x01	; 1
    1faa:	9c 91       	ld	r25, X
    1fac:	11 97       	sbiw	r26, 0x01	; 1
    1fae:	89 81       	ldd	r24, Y+1	; 0x01
    1fb0:	98 17       	cp	r25, r24
    1fb2:	09 f4       	brne	.+2      	; 0x1fb6 <_fpadd_parts+0x3c>
    1fb4:	28 c1       	rjmp	.+592    	; 0x2206 <__stack+0x7>
    1fb6:	ab e0       	ldi	r26, 0x0B	; 11
    1fb8:	b2 e0       	ldi	r27, 0x02	; 2
    1fba:	25 c1       	rjmp	.+586    	; 0x2206 <__stack+0x7>
    1fbc:	84 30       	cpi	r24, 0x04	; 4
    1fbe:	09 f4       	brne	.+2      	; 0x1fc2 <_fpadd_parts+0x48>
    1fc0:	21 c1       	rjmp	.+578    	; 0x2204 <__stack+0x5>
    1fc2:	82 30       	cpi	r24, 0x02	; 2
    1fc4:	a9 f4       	brne	.+42     	; 0x1ff0 <_fpadd_parts+0x76>
    1fc6:	92 30       	cpi	r25, 0x02	; 2
    1fc8:	09 f0       	breq	.+2      	; 0x1fcc <_fpadd_parts+0x52>
    1fca:	1d c1       	rjmp	.+570    	; 0x2206 <__stack+0x7>
    1fcc:	9a 01       	movw	r18, r20
    1fce:	ad 01       	movw	r20, r26
    1fd0:	88 e0       	ldi	r24, 0x08	; 8
    1fd2:	ea 01       	movw	r28, r20
    1fd4:	09 90       	ld	r0, Y+
    1fd6:	ae 01       	movw	r20, r28
    1fd8:	e9 01       	movw	r28, r18
    1fda:	09 92       	st	Y+, r0
    1fdc:	9e 01       	movw	r18, r28
    1fde:	81 50       	subi	r24, 0x01	; 1
    1fe0:	c1 f7       	brne	.-16     	; 0x1fd2 <_fpadd_parts+0x58>
    1fe2:	e2 01       	movw	r28, r4
    1fe4:	89 81       	ldd	r24, Y+1	; 0x01
    1fe6:	11 96       	adiw	r26, 0x01	; 1
    1fe8:	9c 91       	ld	r25, X
    1fea:	89 23       	and	r24, r25
    1fec:	81 83       	std	Z+1, r24	; 0x01
    1fee:	08 c1       	rjmp	.+528    	; 0x2200 <__stack+0x1>
    1ff0:	92 30       	cpi	r25, 0x02	; 2
    1ff2:	09 f4       	brne	.+2      	; 0x1ff6 <_fpadd_parts+0x7c>
    1ff4:	07 c1       	rjmp	.+526    	; 0x2204 <__stack+0x5>
    1ff6:	12 96       	adiw	r26, 0x02	; 2
    1ff8:	2d 90       	ld	r2, X+
    1ffa:	3c 90       	ld	r3, X
    1ffc:	13 97       	sbiw	r26, 0x03	; 3
    1ffe:	eb 01       	movw	r28, r22
    2000:	8a 81       	ldd	r24, Y+2	; 0x02
    2002:	9b 81       	ldd	r25, Y+3	; 0x03
    2004:	14 96       	adiw	r26, 0x04	; 4
    2006:	ad 90       	ld	r10, X+
    2008:	bd 90       	ld	r11, X+
    200a:	cd 90       	ld	r12, X+
    200c:	dc 90       	ld	r13, X
    200e:	17 97       	sbiw	r26, 0x07	; 7
    2010:	ec 80       	ldd	r14, Y+4	; 0x04
    2012:	fd 80       	ldd	r15, Y+5	; 0x05
    2014:	0e 81       	ldd	r16, Y+6	; 0x06
    2016:	1f 81       	ldd	r17, Y+7	; 0x07
    2018:	91 01       	movw	r18, r2
    201a:	28 1b       	sub	r18, r24
    201c:	39 0b       	sbc	r19, r25
    201e:	b9 01       	movw	r22, r18
    2020:	37 ff       	sbrs	r19, 7
    2022:	04 c0       	rjmp	.+8      	; 0x202c <_fpadd_parts+0xb2>
    2024:	66 27       	eor	r22, r22
    2026:	77 27       	eor	r23, r23
    2028:	62 1b       	sub	r22, r18
    202a:	73 0b       	sbc	r23, r19
    202c:	60 32       	cpi	r22, 0x20	; 32
    202e:	71 05       	cpc	r23, r1
    2030:	0c f0       	brlt	.+2      	; 0x2034 <_fpadd_parts+0xba>
    2032:	61 c0       	rjmp	.+194    	; 0x20f6 <_fpadd_parts+0x17c>
    2034:	12 16       	cp	r1, r18
    2036:	13 06       	cpc	r1, r19
    2038:	6c f5       	brge	.+90     	; 0x2094 <_fpadd_parts+0x11a>
    203a:	37 01       	movw	r6, r14
    203c:	48 01       	movw	r8, r16
    203e:	06 2e       	mov	r0, r22
    2040:	04 c0       	rjmp	.+8      	; 0x204a <_fpadd_parts+0xd0>
    2042:	96 94       	lsr	r9
    2044:	87 94       	ror	r8
    2046:	77 94       	ror	r7
    2048:	67 94       	ror	r6
    204a:	0a 94       	dec	r0
    204c:	d2 f7       	brpl	.-12     	; 0x2042 <_fpadd_parts+0xc8>
    204e:	21 e0       	ldi	r18, 0x01	; 1
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	40 e0       	ldi	r20, 0x00	; 0
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	04 c0       	rjmp	.+8      	; 0x2060 <_fpadd_parts+0xe6>
    2058:	22 0f       	add	r18, r18
    205a:	33 1f       	adc	r19, r19
    205c:	44 1f       	adc	r20, r20
    205e:	55 1f       	adc	r21, r21
    2060:	6a 95       	dec	r22
    2062:	d2 f7       	brpl	.-12     	; 0x2058 <_fpadd_parts+0xde>
    2064:	21 50       	subi	r18, 0x01	; 1
    2066:	30 40       	sbci	r19, 0x00	; 0
    2068:	40 40       	sbci	r20, 0x00	; 0
    206a:	50 40       	sbci	r21, 0x00	; 0
    206c:	2e 21       	and	r18, r14
    206e:	3f 21       	and	r19, r15
    2070:	40 23       	and	r20, r16
    2072:	51 23       	and	r21, r17
    2074:	21 15       	cp	r18, r1
    2076:	31 05       	cpc	r19, r1
    2078:	41 05       	cpc	r20, r1
    207a:	51 05       	cpc	r21, r1
    207c:	21 f0       	breq	.+8      	; 0x2086 <_fpadd_parts+0x10c>
    207e:	21 e0       	ldi	r18, 0x01	; 1
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	40 e0       	ldi	r20, 0x00	; 0
    2084:	50 e0       	ldi	r21, 0x00	; 0
    2086:	79 01       	movw	r14, r18
    2088:	8a 01       	movw	r16, r20
    208a:	e6 28       	or	r14, r6
    208c:	f7 28       	or	r15, r7
    208e:	08 29       	or	r16, r8
    2090:	19 29       	or	r17, r9
    2092:	3c c0       	rjmp	.+120    	; 0x210c <_fpadd_parts+0x192>
    2094:	23 2b       	or	r18, r19
    2096:	d1 f1       	breq	.+116    	; 0x210c <_fpadd_parts+0x192>
    2098:	26 0e       	add	r2, r22
    209a:	37 1e       	adc	r3, r23
    209c:	35 01       	movw	r6, r10
    209e:	46 01       	movw	r8, r12
    20a0:	06 2e       	mov	r0, r22
    20a2:	04 c0       	rjmp	.+8      	; 0x20ac <_fpadd_parts+0x132>
    20a4:	96 94       	lsr	r9
    20a6:	87 94       	ror	r8
    20a8:	77 94       	ror	r7
    20aa:	67 94       	ror	r6
    20ac:	0a 94       	dec	r0
    20ae:	d2 f7       	brpl	.-12     	; 0x20a4 <_fpadd_parts+0x12a>
    20b0:	21 e0       	ldi	r18, 0x01	; 1
    20b2:	30 e0       	ldi	r19, 0x00	; 0
    20b4:	40 e0       	ldi	r20, 0x00	; 0
    20b6:	50 e0       	ldi	r21, 0x00	; 0
    20b8:	04 c0       	rjmp	.+8      	; 0x20c2 <_fpadd_parts+0x148>
    20ba:	22 0f       	add	r18, r18
    20bc:	33 1f       	adc	r19, r19
    20be:	44 1f       	adc	r20, r20
    20c0:	55 1f       	adc	r21, r21
    20c2:	6a 95       	dec	r22
    20c4:	d2 f7       	brpl	.-12     	; 0x20ba <_fpadd_parts+0x140>
    20c6:	21 50       	subi	r18, 0x01	; 1
    20c8:	30 40       	sbci	r19, 0x00	; 0
    20ca:	40 40       	sbci	r20, 0x00	; 0
    20cc:	50 40       	sbci	r21, 0x00	; 0
    20ce:	2a 21       	and	r18, r10
    20d0:	3b 21       	and	r19, r11
    20d2:	4c 21       	and	r20, r12
    20d4:	5d 21       	and	r21, r13
    20d6:	21 15       	cp	r18, r1
    20d8:	31 05       	cpc	r19, r1
    20da:	41 05       	cpc	r20, r1
    20dc:	51 05       	cpc	r21, r1
    20de:	21 f0       	breq	.+8      	; 0x20e8 <_fpadd_parts+0x16e>
    20e0:	21 e0       	ldi	r18, 0x01	; 1
    20e2:	30 e0       	ldi	r19, 0x00	; 0
    20e4:	40 e0       	ldi	r20, 0x00	; 0
    20e6:	50 e0       	ldi	r21, 0x00	; 0
    20e8:	59 01       	movw	r10, r18
    20ea:	6a 01       	movw	r12, r20
    20ec:	a6 28       	or	r10, r6
    20ee:	b7 28       	or	r11, r7
    20f0:	c8 28       	or	r12, r8
    20f2:	d9 28       	or	r13, r9
    20f4:	0b c0       	rjmp	.+22     	; 0x210c <_fpadd_parts+0x192>
    20f6:	82 15       	cp	r24, r2
    20f8:	93 05       	cpc	r25, r3
    20fa:	2c f0       	brlt	.+10     	; 0x2106 <_fpadd_parts+0x18c>
    20fc:	1c 01       	movw	r2, r24
    20fe:	aa 24       	eor	r10, r10
    2100:	bb 24       	eor	r11, r11
    2102:	65 01       	movw	r12, r10
    2104:	03 c0       	rjmp	.+6      	; 0x210c <_fpadd_parts+0x192>
    2106:	ee 24       	eor	r14, r14
    2108:	ff 24       	eor	r15, r15
    210a:	87 01       	movw	r16, r14
    210c:	11 96       	adiw	r26, 0x01	; 1
    210e:	9c 91       	ld	r25, X
    2110:	d2 01       	movw	r26, r4
    2112:	11 96       	adiw	r26, 0x01	; 1
    2114:	8c 91       	ld	r24, X
    2116:	98 17       	cp	r25, r24
    2118:	09 f4       	brne	.+2      	; 0x211c <_fpadd_parts+0x1a2>
    211a:	45 c0       	rjmp	.+138    	; 0x21a6 <_fpadd_parts+0x22c>
    211c:	99 23       	and	r25, r25
    211e:	39 f0       	breq	.+14     	; 0x212e <_fpadd_parts+0x1b4>
    2120:	a8 01       	movw	r20, r16
    2122:	97 01       	movw	r18, r14
    2124:	2a 19       	sub	r18, r10
    2126:	3b 09       	sbc	r19, r11
    2128:	4c 09       	sbc	r20, r12
    212a:	5d 09       	sbc	r21, r13
    212c:	06 c0       	rjmp	.+12     	; 0x213a <_fpadd_parts+0x1c0>
    212e:	a6 01       	movw	r20, r12
    2130:	95 01       	movw	r18, r10
    2132:	2e 19       	sub	r18, r14
    2134:	3f 09       	sbc	r19, r15
    2136:	40 0b       	sbc	r20, r16
    2138:	51 0b       	sbc	r21, r17
    213a:	57 fd       	sbrc	r21, 7
    213c:	08 c0       	rjmp	.+16     	; 0x214e <_fpadd_parts+0x1d4>
    213e:	11 82       	std	Z+1, r1	; 0x01
    2140:	33 82       	std	Z+3, r3	; 0x03
    2142:	22 82       	std	Z+2, r2	; 0x02
    2144:	24 83       	std	Z+4, r18	; 0x04
    2146:	35 83       	std	Z+5, r19	; 0x05
    2148:	46 83       	std	Z+6, r20	; 0x06
    214a:	57 83       	std	Z+7, r21	; 0x07
    214c:	1d c0       	rjmp	.+58     	; 0x2188 <_fpadd_parts+0x20e>
    214e:	81 e0       	ldi	r24, 0x01	; 1
    2150:	81 83       	std	Z+1, r24	; 0x01
    2152:	33 82       	std	Z+3, r3	; 0x03
    2154:	22 82       	std	Z+2, r2	; 0x02
    2156:	88 27       	eor	r24, r24
    2158:	99 27       	eor	r25, r25
    215a:	dc 01       	movw	r26, r24
    215c:	82 1b       	sub	r24, r18
    215e:	93 0b       	sbc	r25, r19
    2160:	a4 0b       	sbc	r26, r20
    2162:	b5 0b       	sbc	r27, r21
    2164:	84 83       	std	Z+4, r24	; 0x04
    2166:	95 83       	std	Z+5, r25	; 0x05
    2168:	a6 83       	std	Z+6, r26	; 0x06
    216a:	b7 83       	std	Z+7, r27	; 0x07
    216c:	0d c0       	rjmp	.+26     	; 0x2188 <_fpadd_parts+0x20e>
    216e:	22 0f       	add	r18, r18
    2170:	33 1f       	adc	r19, r19
    2172:	44 1f       	adc	r20, r20
    2174:	55 1f       	adc	r21, r21
    2176:	24 83       	std	Z+4, r18	; 0x04
    2178:	35 83       	std	Z+5, r19	; 0x05
    217a:	46 83       	std	Z+6, r20	; 0x06
    217c:	57 83       	std	Z+7, r21	; 0x07
    217e:	82 81       	ldd	r24, Z+2	; 0x02
    2180:	93 81       	ldd	r25, Z+3	; 0x03
    2182:	01 97       	sbiw	r24, 0x01	; 1
    2184:	93 83       	std	Z+3, r25	; 0x03
    2186:	82 83       	std	Z+2, r24	; 0x02
    2188:	24 81       	ldd	r18, Z+4	; 0x04
    218a:	35 81       	ldd	r19, Z+5	; 0x05
    218c:	46 81       	ldd	r20, Z+6	; 0x06
    218e:	57 81       	ldd	r21, Z+7	; 0x07
    2190:	da 01       	movw	r26, r20
    2192:	c9 01       	movw	r24, r18
    2194:	01 97       	sbiw	r24, 0x01	; 1
    2196:	a1 09       	sbc	r26, r1
    2198:	b1 09       	sbc	r27, r1
    219a:	8f 5f       	subi	r24, 0xFF	; 255
    219c:	9f 4f       	sbci	r25, 0xFF	; 255
    219e:	af 4f       	sbci	r26, 0xFF	; 255
    21a0:	bf 43       	sbci	r27, 0x3F	; 63
    21a2:	28 f3       	brcs	.-54     	; 0x216e <_fpadd_parts+0x1f4>
    21a4:	0b c0       	rjmp	.+22     	; 0x21bc <_fpadd_parts+0x242>
    21a6:	91 83       	std	Z+1, r25	; 0x01
    21a8:	33 82       	std	Z+3, r3	; 0x03
    21aa:	22 82       	std	Z+2, r2	; 0x02
    21ac:	ea 0c       	add	r14, r10
    21ae:	fb 1c       	adc	r15, r11
    21b0:	0c 1d       	adc	r16, r12
    21b2:	1d 1d       	adc	r17, r13
    21b4:	e4 82       	std	Z+4, r14	; 0x04
    21b6:	f5 82       	std	Z+5, r15	; 0x05
    21b8:	06 83       	std	Z+6, r16	; 0x06
    21ba:	17 83       	std	Z+7, r17	; 0x07
    21bc:	83 e0       	ldi	r24, 0x03	; 3
    21be:	80 83       	st	Z, r24
    21c0:	24 81       	ldd	r18, Z+4	; 0x04
    21c2:	35 81       	ldd	r19, Z+5	; 0x05
    21c4:	46 81       	ldd	r20, Z+6	; 0x06
    21c6:	57 81       	ldd	r21, Z+7	; 0x07
    21c8:	57 ff       	sbrs	r21, 7
    21ca:	1a c0       	rjmp	.+52     	; 0x2200 <__stack+0x1>
    21cc:	c9 01       	movw	r24, r18
    21ce:	aa 27       	eor	r26, r26
    21d0:	97 fd       	sbrc	r25, 7
    21d2:	a0 95       	com	r26
    21d4:	ba 2f       	mov	r27, r26
    21d6:	81 70       	andi	r24, 0x01	; 1
    21d8:	90 70       	andi	r25, 0x00	; 0
    21da:	a0 70       	andi	r26, 0x00	; 0
    21dc:	b0 70       	andi	r27, 0x00	; 0
    21de:	56 95       	lsr	r21
    21e0:	47 95       	ror	r20
    21e2:	37 95       	ror	r19
    21e4:	27 95       	ror	r18
    21e6:	82 2b       	or	r24, r18
    21e8:	93 2b       	or	r25, r19
    21ea:	a4 2b       	or	r26, r20
    21ec:	b5 2b       	or	r27, r21
    21ee:	84 83       	std	Z+4, r24	; 0x04
    21f0:	95 83       	std	Z+5, r25	; 0x05
    21f2:	a6 83       	std	Z+6, r26	; 0x06
    21f4:	b7 83       	std	Z+7, r27	; 0x07
    21f6:	82 81       	ldd	r24, Z+2	; 0x02
    21f8:	93 81       	ldd	r25, Z+3	; 0x03
    21fa:	01 96       	adiw	r24, 0x01	; 1
    21fc:	93 83       	std	Z+3, r25	; 0x03
    21fe:	82 83       	std	Z+2, r24	; 0x02
    2200:	df 01       	movw	r26, r30
    2202:	01 c0       	rjmp	.+2      	; 0x2206 <__stack+0x7>
    2204:	d2 01       	movw	r26, r4
    2206:	cd 01       	movw	r24, r26
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
    220c:	e2 e1       	ldi	r30, 0x12	; 18
    220e:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__epilogue_restores__>

00002212 <__subsf3>:
    2212:	a0 e2       	ldi	r26, 0x20	; 32
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	ef e0       	ldi	r30, 0x0F	; 15
    2218:	f1 e1       	ldi	r31, 0x11	; 17
    221a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
    221e:	69 83       	std	Y+1, r22	; 0x01
    2220:	7a 83       	std	Y+2, r23	; 0x02
    2222:	8b 83       	std	Y+3, r24	; 0x03
    2224:	9c 83       	std	Y+4, r25	; 0x04
    2226:	2d 83       	std	Y+5, r18	; 0x05
    2228:	3e 83       	std	Y+6, r19	; 0x06
    222a:	4f 83       	std	Y+7, r20	; 0x07
    222c:	58 87       	std	Y+8, r21	; 0x08
    222e:	e9 e0       	ldi	r30, 0x09	; 9
    2230:	ee 2e       	mov	r14, r30
    2232:	f1 2c       	mov	r15, r1
    2234:	ec 0e       	add	r14, r28
    2236:	fd 1e       	adc	r15, r29
    2238:	ce 01       	movw	r24, r28
    223a:	01 96       	adiw	r24, 0x01	; 1
    223c:	b7 01       	movw	r22, r14
    223e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    2242:	8e 01       	movw	r16, r28
    2244:	0f 5e       	subi	r16, 0xEF	; 239
    2246:	1f 4f       	sbci	r17, 0xFF	; 255
    2248:	ce 01       	movw	r24, r28
    224a:	05 96       	adiw	r24, 0x05	; 5
    224c:	b8 01       	movw	r22, r16
    224e:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    2252:	8a 89       	ldd	r24, Y+18	; 0x12
    2254:	91 e0       	ldi	r25, 0x01	; 1
    2256:	89 27       	eor	r24, r25
    2258:	8a 8b       	std	Y+18, r24	; 0x12
    225a:	c7 01       	movw	r24, r14
    225c:	b8 01       	movw	r22, r16
    225e:	ae 01       	movw	r20, r28
    2260:	47 5e       	subi	r20, 0xE7	; 231
    2262:	5f 4f       	sbci	r21, 0xFF	; 255
    2264:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_fpadd_parts>
    2268:	0e 94 b9 14 	call	0x2972	; 0x2972 <__pack_f>
    226c:	a0 96       	adiw	r28, 0x20	; 32
    226e:	e6 e0       	ldi	r30, 0x06	; 6
    2270:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

00002274 <__addsf3>:
    2274:	a0 e2       	ldi	r26, 0x20	; 32
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e0 e4       	ldi	r30, 0x40	; 64
    227a:	f1 e1       	ldi	r31, 0x11	; 17
    227c:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
    2280:	69 83       	std	Y+1, r22	; 0x01
    2282:	7a 83       	std	Y+2, r23	; 0x02
    2284:	8b 83       	std	Y+3, r24	; 0x03
    2286:	9c 83       	std	Y+4, r25	; 0x04
    2288:	2d 83       	std	Y+5, r18	; 0x05
    228a:	3e 83       	std	Y+6, r19	; 0x06
    228c:	4f 83       	std	Y+7, r20	; 0x07
    228e:	58 87       	std	Y+8, r21	; 0x08
    2290:	f9 e0       	ldi	r31, 0x09	; 9
    2292:	ef 2e       	mov	r14, r31
    2294:	f1 2c       	mov	r15, r1
    2296:	ec 0e       	add	r14, r28
    2298:	fd 1e       	adc	r15, r29
    229a:	ce 01       	movw	r24, r28
    229c:	01 96       	adiw	r24, 0x01	; 1
    229e:	b7 01       	movw	r22, r14
    22a0:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    22a4:	8e 01       	movw	r16, r28
    22a6:	0f 5e       	subi	r16, 0xEF	; 239
    22a8:	1f 4f       	sbci	r17, 0xFF	; 255
    22aa:	ce 01       	movw	r24, r28
    22ac:	05 96       	adiw	r24, 0x05	; 5
    22ae:	b8 01       	movw	r22, r16
    22b0:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    22b4:	c7 01       	movw	r24, r14
    22b6:	b8 01       	movw	r22, r16
    22b8:	ae 01       	movw	r20, r28
    22ba:	47 5e       	subi	r20, 0xE7	; 231
    22bc:	5f 4f       	sbci	r21, 0xFF	; 255
    22be:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <_fpadd_parts>
    22c2:	0e 94 b9 14 	call	0x2972	; 0x2972 <__pack_f>
    22c6:	a0 96       	adiw	r28, 0x20	; 32
    22c8:	e6 e0       	ldi	r30, 0x06	; 6
    22ca:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

000022ce <__mulsf3>:
    22ce:	a0 e2       	ldi	r26, 0x20	; 32
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	ed e6       	ldi	r30, 0x6D	; 109
    22d4:	f1 e1       	ldi	r31, 0x11	; 17
    22d6:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__prologue_saves__>
    22da:	69 83       	std	Y+1, r22	; 0x01
    22dc:	7a 83       	std	Y+2, r23	; 0x02
    22de:	8b 83       	std	Y+3, r24	; 0x03
    22e0:	9c 83       	std	Y+4, r25	; 0x04
    22e2:	2d 83       	std	Y+5, r18	; 0x05
    22e4:	3e 83       	std	Y+6, r19	; 0x06
    22e6:	4f 83       	std	Y+7, r20	; 0x07
    22e8:	58 87       	std	Y+8, r21	; 0x08
    22ea:	ce 01       	movw	r24, r28
    22ec:	01 96       	adiw	r24, 0x01	; 1
    22ee:	be 01       	movw	r22, r28
    22f0:	67 5f       	subi	r22, 0xF7	; 247
    22f2:	7f 4f       	sbci	r23, 0xFF	; 255
    22f4:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    22f8:	ce 01       	movw	r24, r28
    22fa:	05 96       	adiw	r24, 0x05	; 5
    22fc:	be 01       	movw	r22, r28
    22fe:	6f 5e       	subi	r22, 0xEF	; 239
    2300:	7f 4f       	sbci	r23, 0xFF	; 255
    2302:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    2306:	99 85       	ldd	r25, Y+9	; 0x09
    2308:	92 30       	cpi	r25, 0x02	; 2
    230a:	88 f0       	brcs	.+34     	; 0x232e <__mulsf3+0x60>
    230c:	89 89       	ldd	r24, Y+17	; 0x11
    230e:	82 30       	cpi	r24, 0x02	; 2
    2310:	c8 f0       	brcs	.+50     	; 0x2344 <__mulsf3+0x76>
    2312:	94 30       	cpi	r25, 0x04	; 4
    2314:	19 f4       	brne	.+6      	; 0x231c <__mulsf3+0x4e>
    2316:	82 30       	cpi	r24, 0x02	; 2
    2318:	51 f4       	brne	.+20     	; 0x232e <__mulsf3+0x60>
    231a:	04 c0       	rjmp	.+8      	; 0x2324 <__mulsf3+0x56>
    231c:	84 30       	cpi	r24, 0x04	; 4
    231e:	29 f4       	brne	.+10     	; 0x232a <__mulsf3+0x5c>
    2320:	92 30       	cpi	r25, 0x02	; 2
    2322:	81 f4       	brne	.+32     	; 0x2344 <__mulsf3+0x76>
    2324:	8b e0       	ldi	r24, 0x0B	; 11
    2326:	92 e0       	ldi	r25, 0x02	; 2
    2328:	c6 c0       	rjmp	.+396    	; 0x24b6 <__mulsf3+0x1e8>
    232a:	92 30       	cpi	r25, 0x02	; 2
    232c:	49 f4       	brne	.+18     	; 0x2340 <__mulsf3+0x72>
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	9a 85       	ldd	r25, Y+10	; 0x0a
    2332:	8a 89       	ldd	r24, Y+18	; 0x12
    2334:	98 13       	cpse	r25, r24
    2336:	21 e0       	ldi	r18, 0x01	; 1
    2338:	2a 87       	std	Y+10, r18	; 0x0a
    233a:	ce 01       	movw	r24, r28
    233c:	09 96       	adiw	r24, 0x09	; 9
    233e:	bb c0       	rjmp	.+374    	; 0x24b6 <__mulsf3+0x1e8>
    2340:	82 30       	cpi	r24, 0x02	; 2
    2342:	49 f4       	brne	.+18     	; 0x2356 <__mulsf3+0x88>
    2344:	20 e0       	ldi	r18, 0x00	; 0
    2346:	9a 85       	ldd	r25, Y+10	; 0x0a
    2348:	8a 89       	ldd	r24, Y+18	; 0x12
    234a:	98 13       	cpse	r25, r24
    234c:	21 e0       	ldi	r18, 0x01	; 1
    234e:	2a 8b       	std	Y+18, r18	; 0x12
    2350:	ce 01       	movw	r24, r28
    2352:	41 96       	adiw	r24, 0x11	; 17
    2354:	b0 c0       	rjmp	.+352    	; 0x24b6 <__mulsf3+0x1e8>
    2356:	2d 84       	ldd	r2, Y+13	; 0x0d
    2358:	3e 84       	ldd	r3, Y+14	; 0x0e
    235a:	4f 84       	ldd	r4, Y+15	; 0x0f
    235c:	58 88       	ldd	r5, Y+16	; 0x10
    235e:	6d 88       	ldd	r6, Y+21	; 0x15
    2360:	7e 88       	ldd	r7, Y+22	; 0x16
    2362:	8f 88       	ldd	r8, Y+23	; 0x17
    2364:	98 8c       	ldd	r9, Y+24	; 0x18
    2366:	ee 24       	eor	r14, r14
    2368:	ff 24       	eor	r15, r15
    236a:	87 01       	movw	r16, r14
    236c:	aa 24       	eor	r10, r10
    236e:	bb 24       	eor	r11, r11
    2370:	65 01       	movw	r12, r10
    2372:	40 e0       	ldi	r20, 0x00	; 0
    2374:	50 e0       	ldi	r21, 0x00	; 0
    2376:	60 e0       	ldi	r22, 0x00	; 0
    2378:	70 e0       	ldi	r23, 0x00	; 0
    237a:	e0 e0       	ldi	r30, 0x00	; 0
    237c:	f0 e0       	ldi	r31, 0x00	; 0
    237e:	c1 01       	movw	r24, r2
    2380:	81 70       	andi	r24, 0x01	; 1
    2382:	90 70       	andi	r25, 0x00	; 0
    2384:	89 2b       	or	r24, r25
    2386:	e9 f0       	breq	.+58     	; 0x23c2 <__mulsf3+0xf4>
    2388:	e6 0c       	add	r14, r6
    238a:	f7 1c       	adc	r15, r7
    238c:	08 1d       	adc	r16, r8
    238e:	19 1d       	adc	r17, r9
    2390:	9a 01       	movw	r18, r20
    2392:	ab 01       	movw	r20, r22
    2394:	2a 0d       	add	r18, r10
    2396:	3b 1d       	adc	r19, r11
    2398:	4c 1d       	adc	r20, r12
    239a:	5d 1d       	adc	r21, r13
    239c:	80 e0       	ldi	r24, 0x00	; 0
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	a0 e0       	ldi	r26, 0x00	; 0
    23a2:	b0 e0       	ldi	r27, 0x00	; 0
    23a4:	e6 14       	cp	r14, r6
    23a6:	f7 04       	cpc	r15, r7
    23a8:	08 05       	cpc	r16, r8
    23aa:	19 05       	cpc	r17, r9
    23ac:	20 f4       	brcc	.+8      	; 0x23b6 <__mulsf3+0xe8>
    23ae:	81 e0       	ldi	r24, 0x01	; 1
    23b0:	90 e0       	ldi	r25, 0x00	; 0
    23b2:	a0 e0       	ldi	r26, 0x00	; 0
    23b4:	b0 e0       	ldi	r27, 0x00	; 0
    23b6:	ba 01       	movw	r22, r20
    23b8:	a9 01       	movw	r20, r18
    23ba:	48 0f       	add	r20, r24
    23bc:	59 1f       	adc	r21, r25
    23be:	6a 1f       	adc	r22, r26
    23c0:	7b 1f       	adc	r23, r27
    23c2:	aa 0c       	add	r10, r10
    23c4:	bb 1c       	adc	r11, r11
    23c6:	cc 1c       	adc	r12, r12
    23c8:	dd 1c       	adc	r13, r13
    23ca:	97 fe       	sbrs	r9, 7
    23cc:	08 c0       	rjmp	.+16     	; 0x23de <__mulsf3+0x110>
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	a0 e0       	ldi	r26, 0x00	; 0
    23d4:	b0 e0       	ldi	r27, 0x00	; 0
    23d6:	a8 2a       	or	r10, r24
    23d8:	b9 2a       	or	r11, r25
    23da:	ca 2a       	or	r12, r26
    23dc:	db 2a       	or	r13, r27
    23de:	31 96       	adiw	r30, 0x01	; 1
    23e0:	e0 32       	cpi	r30, 0x20	; 32
    23e2:	f1 05       	cpc	r31, r1
    23e4:	49 f0       	breq	.+18     	; 0x23f8 <__mulsf3+0x12a>
    23e6:	66 0c       	add	r6, r6
    23e8:	77 1c       	adc	r7, r7
    23ea:	88 1c       	adc	r8, r8
    23ec:	99 1c       	adc	r9, r9
    23ee:	56 94       	lsr	r5
    23f0:	47 94       	ror	r4
    23f2:	37 94       	ror	r3
    23f4:	27 94       	ror	r2
    23f6:	c3 cf       	rjmp	.-122    	; 0x237e <__mulsf3+0xb0>
    23f8:	fa 85       	ldd	r31, Y+10	; 0x0a
    23fa:	ea 89       	ldd	r30, Y+18	; 0x12
    23fc:	2b 89       	ldd	r18, Y+19	; 0x13
    23fe:	3c 89       	ldd	r19, Y+20	; 0x14
    2400:	8b 85       	ldd	r24, Y+11	; 0x0b
    2402:	9c 85       	ldd	r25, Y+12	; 0x0c
    2404:	28 0f       	add	r18, r24
    2406:	39 1f       	adc	r19, r25
    2408:	2e 5f       	subi	r18, 0xFE	; 254
    240a:	3f 4f       	sbci	r19, 0xFF	; 255
    240c:	17 c0       	rjmp	.+46     	; 0x243c <__mulsf3+0x16e>
    240e:	ca 01       	movw	r24, r20
    2410:	81 70       	andi	r24, 0x01	; 1
    2412:	90 70       	andi	r25, 0x00	; 0
    2414:	89 2b       	or	r24, r25
    2416:	61 f0       	breq	.+24     	; 0x2430 <__mulsf3+0x162>
    2418:	16 95       	lsr	r17
    241a:	07 95       	ror	r16
    241c:	f7 94       	ror	r15
    241e:	e7 94       	ror	r14
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	a0 e0       	ldi	r26, 0x00	; 0
    2426:	b0 e8       	ldi	r27, 0x80	; 128
    2428:	e8 2a       	or	r14, r24
    242a:	f9 2a       	or	r15, r25
    242c:	0a 2b       	or	r16, r26
    242e:	1b 2b       	or	r17, r27
    2430:	76 95       	lsr	r23
    2432:	67 95       	ror	r22
    2434:	57 95       	ror	r21
    2436:	47 95       	ror	r20
    2438:	2f 5f       	subi	r18, 0xFF	; 255
    243a:	3f 4f       	sbci	r19, 0xFF	; 255
    243c:	77 fd       	sbrc	r23, 7
    243e:	e7 cf       	rjmp	.-50     	; 0x240e <__mulsf3+0x140>
    2440:	0c c0       	rjmp	.+24     	; 0x245a <__mulsf3+0x18c>
    2442:	44 0f       	add	r20, r20
    2444:	55 1f       	adc	r21, r21
    2446:	66 1f       	adc	r22, r22
    2448:	77 1f       	adc	r23, r23
    244a:	17 fd       	sbrc	r17, 7
    244c:	41 60       	ori	r20, 0x01	; 1
    244e:	ee 0c       	add	r14, r14
    2450:	ff 1c       	adc	r15, r15
    2452:	00 1f       	adc	r16, r16
    2454:	11 1f       	adc	r17, r17
    2456:	21 50       	subi	r18, 0x01	; 1
    2458:	30 40       	sbci	r19, 0x00	; 0
    245a:	40 30       	cpi	r20, 0x00	; 0
    245c:	90 e0       	ldi	r25, 0x00	; 0
    245e:	59 07       	cpc	r21, r25
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	69 07       	cpc	r22, r25
    2464:	90 e4       	ldi	r25, 0x40	; 64
    2466:	79 07       	cpc	r23, r25
    2468:	60 f3       	brcs	.-40     	; 0x2442 <__mulsf3+0x174>
    246a:	2b 8f       	std	Y+27, r18	; 0x1b
    246c:	3c 8f       	std	Y+28, r19	; 0x1c
    246e:	db 01       	movw	r26, r22
    2470:	ca 01       	movw	r24, r20
    2472:	8f 77       	andi	r24, 0x7F	; 127
    2474:	90 70       	andi	r25, 0x00	; 0
    2476:	a0 70       	andi	r26, 0x00	; 0
    2478:	b0 70       	andi	r27, 0x00	; 0
    247a:	80 34       	cpi	r24, 0x40	; 64
    247c:	91 05       	cpc	r25, r1
    247e:	a1 05       	cpc	r26, r1
    2480:	b1 05       	cpc	r27, r1
    2482:	61 f4       	brne	.+24     	; 0x249c <__mulsf3+0x1ce>
    2484:	47 fd       	sbrc	r20, 7
    2486:	0a c0       	rjmp	.+20     	; 0x249c <__mulsf3+0x1ce>
    2488:	e1 14       	cp	r14, r1
    248a:	f1 04       	cpc	r15, r1
    248c:	01 05       	cpc	r16, r1
    248e:	11 05       	cpc	r17, r1
    2490:	29 f0       	breq	.+10     	; 0x249c <__mulsf3+0x1ce>
    2492:	40 5c       	subi	r20, 0xC0	; 192
    2494:	5f 4f       	sbci	r21, 0xFF	; 255
    2496:	6f 4f       	sbci	r22, 0xFF	; 255
    2498:	7f 4f       	sbci	r23, 0xFF	; 255
    249a:	40 78       	andi	r20, 0x80	; 128
    249c:	1a 8e       	std	Y+26, r1	; 0x1a
    249e:	fe 17       	cp	r31, r30
    24a0:	11 f0       	breq	.+4      	; 0x24a6 <__mulsf3+0x1d8>
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	8a 8f       	std	Y+26, r24	; 0x1a
    24a6:	4d 8f       	std	Y+29, r20	; 0x1d
    24a8:	5e 8f       	std	Y+30, r21	; 0x1e
    24aa:	6f 8f       	std	Y+31, r22	; 0x1f
    24ac:	78 a3       	std	Y+32, r23	; 0x20
    24ae:	83 e0       	ldi	r24, 0x03	; 3
    24b0:	89 8f       	std	Y+25, r24	; 0x19
    24b2:	ce 01       	movw	r24, r28
    24b4:	49 96       	adiw	r24, 0x19	; 25
    24b6:	0e 94 b9 14 	call	0x2972	; 0x2972 <__pack_f>
    24ba:	a0 96       	adiw	r28, 0x20	; 32
    24bc:	e2 e1       	ldi	r30, 0x12	; 18
    24be:	0c 94 a2 16 	jmp	0x2d44	; 0x2d44 <__epilogue_restores__>

000024c2 <__divsf3>:
    24c2:	a8 e1       	ldi	r26, 0x18	; 24
    24c4:	b0 e0       	ldi	r27, 0x00	; 0
    24c6:	e7 e6       	ldi	r30, 0x67	; 103
    24c8:	f2 e1       	ldi	r31, 0x12	; 18
    24ca:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x10>
    24ce:	69 83       	std	Y+1, r22	; 0x01
    24d0:	7a 83       	std	Y+2, r23	; 0x02
    24d2:	8b 83       	std	Y+3, r24	; 0x03
    24d4:	9c 83       	std	Y+4, r25	; 0x04
    24d6:	2d 83       	std	Y+5, r18	; 0x05
    24d8:	3e 83       	std	Y+6, r19	; 0x06
    24da:	4f 83       	std	Y+7, r20	; 0x07
    24dc:	58 87       	std	Y+8, r21	; 0x08
    24de:	b9 e0       	ldi	r27, 0x09	; 9
    24e0:	eb 2e       	mov	r14, r27
    24e2:	f1 2c       	mov	r15, r1
    24e4:	ec 0e       	add	r14, r28
    24e6:	fd 1e       	adc	r15, r29
    24e8:	ce 01       	movw	r24, r28
    24ea:	01 96       	adiw	r24, 0x01	; 1
    24ec:	b7 01       	movw	r22, r14
    24ee:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    24f2:	8e 01       	movw	r16, r28
    24f4:	0f 5e       	subi	r16, 0xEF	; 239
    24f6:	1f 4f       	sbci	r17, 0xFF	; 255
    24f8:	ce 01       	movw	r24, r28
    24fa:	05 96       	adiw	r24, 0x05	; 5
    24fc:	b8 01       	movw	r22, r16
    24fe:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    2502:	29 85       	ldd	r18, Y+9	; 0x09
    2504:	22 30       	cpi	r18, 0x02	; 2
    2506:	08 f4       	brcc	.+2      	; 0x250a <__divsf3+0x48>
    2508:	7e c0       	rjmp	.+252    	; 0x2606 <__divsf3+0x144>
    250a:	39 89       	ldd	r19, Y+17	; 0x11
    250c:	32 30       	cpi	r19, 0x02	; 2
    250e:	10 f4       	brcc	.+4      	; 0x2514 <__divsf3+0x52>
    2510:	b8 01       	movw	r22, r16
    2512:	7c c0       	rjmp	.+248    	; 0x260c <__divsf3+0x14a>
    2514:	8a 85       	ldd	r24, Y+10	; 0x0a
    2516:	9a 89       	ldd	r25, Y+18	; 0x12
    2518:	89 27       	eor	r24, r25
    251a:	8a 87       	std	Y+10, r24	; 0x0a
    251c:	24 30       	cpi	r18, 0x04	; 4
    251e:	11 f0       	breq	.+4      	; 0x2524 <__divsf3+0x62>
    2520:	22 30       	cpi	r18, 0x02	; 2
    2522:	31 f4       	brne	.+12     	; 0x2530 <__divsf3+0x6e>
    2524:	23 17       	cp	r18, r19
    2526:	09 f0       	breq	.+2      	; 0x252a <__divsf3+0x68>
    2528:	6e c0       	rjmp	.+220    	; 0x2606 <__divsf3+0x144>
    252a:	6b e0       	ldi	r22, 0x0B	; 11
    252c:	72 e0       	ldi	r23, 0x02	; 2
    252e:	6e c0       	rjmp	.+220    	; 0x260c <__divsf3+0x14a>
    2530:	34 30       	cpi	r19, 0x04	; 4
    2532:	39 f4       	brne	.+14     	; 0x2542 <__divsf3+0x80>
    2534:	1d 86       	std	Y+13, r1	; 0x0d
    2536:	1e 86       	std	Y+14, r1	; 0x0e
    2538:	1f 86       	std	Y+15, r1	; 0x0f
    253a:	18 8a       	std	Y+16, r1	; 0x10
    253c:	1c 86       	std	Y+12, r1	; 0x0c
    253e:	1b 86       	std	Y+11, r1	; 0x0b
    2540:	04 c0       	rjmp	.+8      	; 0x254a <__divsf3+0x88>
    2542:	32 30       	cpi	r19, 0x02	; 2
    2544:	21 f4       	brne	.+8      	; 0x254e <__divsf3+0x8c>
    2546:	84 e0       	ldi	r24, 0x04	; 4
    2548:	89 87       	std	Y+9, r24	; 0x09
    254a:	b7 01       	movw	r22, r14
    254c:	5f c0       	rjmp	.+190    	; 0x260c <__divsf3+0x14a>
    254e:	2b 85       	ldd	r18, Y+11	; 0x0b
    2550:	3c 85       	ldd	r19, Y+12	; 0x0c
    2552:	8b 89       	ldd	r24, Y+19	; 0x13
    2554:	9c 89       	ldd	r25, Y+20	; 0x14
    2556:	28 1b       	sub	r18, r24
    2558:	39 0b       	sbc	r19, r25
    255a:	3c 87       	std	Y+12, r19	; 0x0c
    255c:	2b 87       	std	Y+11, r18	; 0x0b
    255e:	ed 84       	ldd	r14, Y+13	; 0x0d
    2560:	fe 84       	ldd	r15, Y+14	; 0x0e
    2562:	0f 85       	ldd	r16, Y+15	; 0x0f
    2564:	18 89       	ldd	r17, Y+16	; 0x10
    2566:	ad 88       	ldd	r10, Y+21	; 0x15
    2568:	be 88       	ldd	r11, Y+22	; 0x16
    256a:	cf 88       	ldd	r12, Y+23	; 0x17
    256c:	d8 8c       	ldd	r13, Y+24	; 0x18
    256e:	ea 14       	cp	r14, r10
    2570:	fb 04       	cpc	r15, r11
    2572:	0c 05       	cpc	r16, r12
    2574:	1d 05       	cpc	r17, r13
    2576:	40 f4       	brcc	.+16     	; 0x2588 <__divsf3+0xc6>
    2578:	ee 0c       	add	r14, r14
    257a:	ff 1c       	adc	r15, r15
    257c:	00 1f       	adc	r16, r16
    257e:	11 1f       	adc	r17, r17
    2580:	21 50       	subi	r18, 0x01	; 1
    2582:	30 40       	sbci	r19, 0x00	; 0
    2584:	3c 87       	std	Y+12, r19	; 0x0c
    2586:	2b 87       	std	Y+11, r18	; 0x0b
    2588:	20 e0       	ldi	r18, 0x00	; 0
    258a:	30 e0       	ldi	r19, 0x00	; 0
    258c:	40 e0       	ldi	r20, 0x00	; 0
    258e:	50 e0       	ldi	r21, 0x00	; 0
    2590:	80 e0       	ldi	r24, 0x00	; 0
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	a0 e0       	ldi	r26, 0x00	; 0
    2596:	b0 e4       	ldi	r27, 0x40	; 64
    2598:	60 e0       	ldi	r22, 0x00	; 0
    259a:	70 e0       	ldi	r23, 0x00	; 0
    259c:	ea 14       	cp	r14, r10
    259e:	fb 04       	cpc	r15, r11
    25a0:	0c 05       	cpc	r16, r12
    25a2:	1d 05       	cpc	r17, r13
    25a4:	40 f0       	brcs	.+16     	; 0x25b6 <__divsf3+0xf4>
    25a6:	28 2b       	or	r18, r24
    25a8:	39 2b       	or	r19, r25
    25aa:	4a 2b       	or	r20, r26
    25ac:	5b 2b       	or	r21, r27
    25ae:	ea 18       	sub	r14, r10
    25b0:	fb 08       	sbc	r15, r11
    25b2:	0c 09       	sbc	r16, r12
    25b4:	1d 09       	sbc	r17, r13
    25b6:	b6 95       	lsr	r27
    25b8:	a7 95       	ror	r26
    25ba:	97 95       	ror	r25
    25bc:	87 95       	ror	r24
    25be:	ee 0c       	add	r14, r14
    25c0:	ff 1c       	adc	r15, r15
    25c2:	00 1f       	adc	r16, r16
    25c4:	11 1f       	adc	r17, r17
    25c6:	6f 5f       	subi	r22, 0xFF	; 255
    25c8:	7f 4f       	sbci	r23, 0xFF	; 255
    25ca:	6f 31       	cpi	r22, 0x1F	; 31
    25cc:	71 05       	cpc	r23, r1
    25ce:	31 f7       	brne	.-52     	; 0x259c <__divsf3+0xda>
    25d0:	da 01       	movw	r26, r20
    25d2:	c9 01       	movw	r24, r18
    25d4:	8f 77       	andi	r24, 0x7F	; 127
    25d6:	90 70       	andi	r25, 0x00	; 0
    25d8:	a0 70       	andi	r26, 0x00	; 0
    25da:	b0 70       	andi	r27, 0x00	; 0
    25dc:	80 34       	cpi	r24, 0x40	; 64
    25de:	91 05       	cpc	r25, r1
    25e0:	a1 05       	cpc	r26, r1
    25e2:	b1 05       	cpc	r27, r1
    25e4:	61 f4       	brne	.+24     	; 0x25fe <__divsf3+0x13c>
    25e6:	27 fd       	sbrc	r18, 7
    25e8:	0a c0       	rjmp	.+20     	; 0x25fe <__divsf3+0x13c>
    25ea:	e1 14       	cp	r14, r1
    25ec:	f1 04       	cpc	r15, r1
    25ee:	01 05       	cpc	r16, r1
    25f0:	11 05       	cpc	r17, r1
    25f2:	29 f0       	breq	.+10     	; 0x25fe <__divsf3+0x13c>
    25f4:	20 5c       	subi	r18, 0xC0	; 192
    25f6:	3f 4f       	sbci	r19, 0xFF	; 255
    25f8:	4f 4f       	sbci	r20, 0xFF	; 255
    25fa:	5f 4f       	sbci	r21, 0xFF	; 255
    25fc:	20 78       	andi	r18, 0x80	; 128
    25fe:	2d 87       	std	Y+13, r18	; 0x0d
    2600:	3e 87       	std	Y+14, r19	; 0x0e
    2602:	4f 87       	std	Y+15, r20	; 0x0f
    2604:	58 8b       	std	Y+16, r21	; 0x10
    2606:	be 01       	movw	r22, r28
    2608:	67 5f       	subi	r22, 0xF7	; 247
    260a:	7f 4f       	sbci	r23, 0xFF	; 255
    260c:	cb 01       	movw	r24, r22
    260e:	0e 94 b9 14 	call	0x2972	; 0x2972 <__pack_f>
    2612:	68 96       	adiw	r28, 0x18	; 24
    2614:	ea e0       	ldi	r30, 0x0A	; 10
    2616:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x10>

0000261a <__gtsf2>:
    261a:	a8 e1       	ldi	r26, 0x18	; 24
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	e3 e1       	ldi	r30, 0x13	; 19
    2620:	f3 e1       	ldi	r31, 0x13	; 19
    2622:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
    2626:	69 83       	std	Y+1, r22	; 0x01
    2628:	7a 83       	std	Y+2, r23	; 0x02
    262a:	8b 83       	std	Y+3, r24	; 0x03
    262c:	9c 83       	std	Y+4, r25	; 0x04
    262e:	2d 83       	std	Y+5, r18	; 0x05
    2630:	3e 83       	std	Y+6, r19	; 0x06
    2632:	4f 83       	std	Y+7, r20	; 0x07
    2634:	58 87       	std	Y+8, r21	; 0x08
    2636:	89 e0       	ldi	r24, 0x09	; 9
    2638:	e8 2e       	mov	r14, r24
    263a:	f1 2c       	mov	r15, r1
    263c:	ec 0e       	add	r14, r28
    263e:	fd 1e       	adc	r15, r29
    2640:	ce 01       	movw	r24, r28
    2642:	01 96       	adiw	r24, 0x01	; 1
    2644:	b7 01       	movw	r22, r14
    2646:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    264a:	8e 01       	movw	r16, r28
    264c:	0f 5e       	subi	r16, 0xEF	; 239
    264e:	1f 4f       	sbci	r17, 0xFF	; 255
    2650:	ce 01       	movw	r24, r28
    2652:	05 96       	adiw	r24, 0x05	; 5
    2654:	b8 01       	movw	r22, r16
    2656:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    265a:	89 85       	ldd	r24, Y+9	; 0x09
    265c:	82 30       	cpi	r24, 0x02	; 2
    265e:	40 f0       	brcs	.+16     	; 0x2670 <__gtsf2+0x56>
    2660:	89 89       	ldd	r24, Y+17	; 0x11
    2662:	82 30       	cpi	r24, 0x02	; 2
    2664:	28 f0       	brcs	.+10     	; 0x2670 <__gtsf2+0x56>
    2666:	c7 01       	movw	r24, r14
    2668:	b8 01       	movw	r22, r16
    266a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__fpcmp_parts_f>
    266e:	01 c0       	rjmp	.+2      	; 0x2672 <__gtsf2+0x58>
    2670:	8f ef       	ldi	r24, 0xFF	; 255
    2672:	68 96       	adiw	r28, 0x18	; 24
    2674:	e6 e0       	ldi	r30, 0x06	; 6
    2676:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

0000267a <__gesf2>:
    267a:	a8 e1       	ldi	r26, 0x18	; 24
    267c:	b0 e0       	ldi	r27, 0x00	; 0
    267e:	e3 e4       	ldi	r30, 0x43	; 67
    2680:	f3 e1       	ldi	r31, 0x13	; 19
    2682:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
    2686:	69 83       	std	Y+1, r22	; 0x01
    2688:	7a 83       	std	Y+2, r23	; 0x02
    268a:	8b 83       	std	Y+3, r24	; 0x03
    268c:	9c 83       	std	Y+4, r25	; 0x04
    268e:	2d 83       	std	Y+5, r18	; 0x05
    2690:	3e 83       	std	Y+6, r19	; 0x06
    2692:	4f 83       	std	Y+7, r20	; 0x07
    2694:	58 87       	std	Y+8, r21	; 0x08
    2696:	89 e0       	ldi	r24, 0x09	; 9
    2698:	e8 2e       	mov	r14, r24
    269a:	f1 2c       	mov	r15, r1
    269c:	ec 0e       	add	r14, r28
    269e:	fd 1e       	adc	r15, r29
    26a0:	ce 01       	movw	r24, r28
    26a2:	01 96       	adiw	r24, 0x01	; 1
    26a4:	b7 01       	movw	r22, r14
    26a6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    26aa:	8e 01       	movw	r16, r28
    26ac:	0f 5e       	subi	r16, 0xEF	; 239
    26ae:	1f 4f       	sbci	r17, 0xFF	; 255
    26b0:	ce 01       	movw	r24, r28
    26b2:	05 96       	adiw	r24, 0x05	; 5
    26b4:	b8 01       	movw	r22, r16
    26b6:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    26ba:	89 85       	ldd	r24, Y+9	; 0x09
    26bc:	82 30       	cpi	r24, 0x02	; 2
    26be:	40 f0       	brcs	.+16     	; 0x26d0 <__gesf2+0x56>
    26c0:	89 89       	ldd	r24, Y+17	; 0x11
    26c2:	82 30       	cpi	r24, 0x02	; 2
    26c4:	28 f0       	brcs	.+10     	; 0x26d0 <__gesf2+0x56>
    26c6:	c7 01       	movw	r24, r14
    26c8:	b8 01       	movw	r22, r16
    26ca:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__fpcmp_parts_f>
    26ce:	01 c0       	rjmp	.+2      	; 0x26d2 <__gesf2+0x58>
    26d0:	8f ef       	ldi	r24, 0xFF	; 255
    26d2:	68 96       	adiw	r28, 0x18	; 24
    26d4:	e6 e0       	ldi	r30, 0x06	; 6
    26d6:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

000026da <__ltsf2>:
    26da:	a8 e1       	ldi	r26, 0x18	; 24
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e3 e7       	ldi	r30, 0x73	; 115
    26e0:	f3 e1       	ldi	r31, 0x13	; 19
    26e2:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__prologue_saves__+0x18>
    26e6:	69 83       	std	Y+1, r22	; 0x01
    26e8:	7a 83       	std	Y+2, r23	; 0x02
    26ea:	8b 83       	std	Y+3, r24	; 0x03
    26ec:	9c 83       	std	Y+4, r25	; 0x04
    26ee:	2d 83       	std	Y+5, r18	; 0x05
    26f0:	3e 83       	std	Y+6, r19	; 0x06
    26f2:	4f 83       	std	Y+7, r20	; 0x07
    26f4:	58 87       	std	Y+8, r21	; 0x08
    26f6:	89 e0       	ldi	r24, 0x09	; 9
    26f8:	e8 2e       	mov	r14, r24
    26fa:	f1 2c       	mov	r15, r1
    26fc:	ec 0e       	add	r14, r28
    26fe:	fd 1e       	adc	r15, r29
    2700:	ce 01       	movw	r24, r28
    2702:	01 96       	adiw	r24, 0x01	; 1
    2704:	b7 01       	movw	r22, r14
    2706:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    270a:	8e 01       	movw	r16, r28
    270c:	0f 5e       	subi	r16, 0xEF	; 239
    270e:	1f 4f       	sbci	r17, 0xFF	; 255
    2710:	ce 01       	movw	r24, r28
    2712:	05 96       	adiw	r24, 0x05	; 5
    2714:	b8 01       	movw	r22, r16
    2716:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    271a:	89 85       	ldd	r24, Y+9	; 0x09
    271c:	82 30       	cpi	r24, 0x02	; 2
    271e:	40 f0       	brcs	.+16     	; 0x2730 <__ltsf2+0x56>
    2720:	89 89       	ldd	r24, Y+17	; 0x11
    2722:	82 30       	cpi	r24, 0x02	; 2
    2724:	28 f0       	brcs	.+10     	; 0x2730 <__ltsf2+0x56>
    2726:	c7 01       	movw	r24, r14
    2728:	b8 01       	movw	r22, r16
    272a:	0e 94 06 16 	call	0x2c0c	; 0x2c0c <__fpcmp_parts_f>
    272e:	01 c0       	rjmp	.+2      	; 0x2732 <__ltsf2+0x58>
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	68 96       	adiw	r28, 0x18	; 24
    2734:	e6 e0       	ldi	r30, 0x06	; 6
    2736:	0c 94 ae 16 	jmp	0x2d5c	; 0x2d5c <__epilogue_restores__+0x18>

0000273a <__fixsfsi>:
    273a:	ac e0       	ldi	r26, 0x0C	; 12
    273c:	b0 e0       	ldi	r27, 0x00	; 0
    273e:	e3 ea       	ldi	r30, 0xA3	; 163
    2740:	f3 e1       	ldi	r31, 0x13	; 19
    2742:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__prologue_saves__+0x20>
    2746:	69 83       	std	Y+1, r22	; 0x01
    2748:	7a 83       	std	Y+2, r23	; 0x02
    274a:	8b 83       	std	Y+3, r24	; 0x03
    274c:	9c 83       	std	Y+4, r25	; 0x04
    274e:	ce 01       	movw	r24, r28
    2750:	01 96       	adiw	r24, 0x01	; 1
    2752:	be 01       	movw	r22, r28
    2754:	6b 5f       	subi	r22, 0xFB	; 251
    2756:	7f 4f       	sbci	r23, 0xFF	; 255
    2758:	0e 94 8e 15 	call	0x2b1c	; 0x2b1c <__unpack_f>
    275c:	8d 81       	ldd	r24, Y+5	; 0x05
    275e:	82 30       	cpi	r24, 0x02	; 2
    2760:	61 f1       	breq	.+88     	; 0x27ba <__fixsfsi+0x80>
    2762:	82 30       	cpi	r24, 0x02	; 2
    2764:	50 f1       	brcs	.+84     	; 0x27ba <__fixsfsi+0x80>
    2766:	84 30       	cpi	r24, 0x04	; 4
    2768:	21 f4       	brne	.+8      	; 0x2772 <__fixsfsi+0x38>
    276a:	8e 81       	ldd	r24, Y+6	; 0x06
    276c:	88 23       	and	r24, r24
    276e:	51 f1       	breq	.+84     	; 0x27c4 <__fixsfsi+0x8a>
    2770:	2e c0       	rjmp	.+92     	; 0x27ce <__fixsfsi+0x94>
    2772:	2f 81       	ldd	r18, Y+7	; 0x07
    2774:	38 85       	ldd	r19, Y+8	; 0x08
    2776:	37 fd       	sbrc	r19, 7
    2778:	20 c0       	rjmp	.+64     	; 0x27ba <__fixsfsi+0x80>
    277a:	6e 81       	ldd	r22, Y+6	; 0x06
    277c:	2f 31       	cpi	r18, 0x1F	; 31
    277e:	31 05       	cpc	r19, r1
    2780:	1c f0       	brlt	.+6      	; 0x2788 <__fixsfsi+0x4e>
    2782:	66 23       	and	r22, r22
    2784:	f9 f0       	breq	.+62     	; 0x27c4 <__fixsfsi+0x8a>
    2786:	23 c0       	rjmp	.+70     	; 0x27ce <__fixsfsi+0x94>
    2788:	8e e1       	ldi	r24, 0x1E	; 30
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	82 1b       	sub	r24, r18
    278e:	93 0b       	sbc	r25, r19
    2790:	29 85       	ldd	r18, Y+9	; 0x09
    2792:	3a 85       	ldd	r19, Y+10	; 0x0a
    2794:	4b 85       	ldd	r20, Y+11	; 0x0b
    2796:	5c 85       	ldd	r21, Y+12	; 0x0c
    2798:	04 c0       	rjmp	.+8      	; 0x27a2 <__fixsfsi+0x68>
    279a:	56 95       	lsr	r21
    279c:	47 95       	ror	r20
    279e:	37 95       	ror	r19
    27a0:	27 95       	ror	r18
    27a2:	8a 95       	dec	r24
    27a4:	d2 f7       	brpl	.-12     	; 0x279a <__fixsfsi+0x60>
    27a6:	66 23       	and	r22, r22
    27a8:	b1 f0       	breq	.+44     	; 0x27d6 <__fixsfsi+0x9c>
    27aa:	50 95       	com	r21
    27ac:	40 95       	com	r20
    27ae:	30 95       	com	r19
    27b0:	21 95       	neg	r18
    27b2:	3f 4f       	sbci	r19, 0xFF	; 255
    27b4:	4f 4f       	sbci	r20, 0xFF	; 255
    27b6:	5f 4f       	sbci	r21, 0xFF	; 255
    27b8:	0e c0       	rjmp	.+28     	; 0x27d6 <__fixsfsi+0x9c>
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	30 e0       	ldi	r19, 0x00	; 0
    27be:	40 e0       	ldi	r20, 0x00	; 0
    27c0:	50 e0       	ldi	r21, 0x00	; 0
    27c2:	09 c0       	rjmp	.+18     	; 0x27d6 <__fixsfsi+0x9c>
    27c4:	2f ef       	ldi	r18, 0xFF	; 255
    27c6:	3f ef       	ldi	r19, 0xFF	; 255
    27c8:	4f ef       	ldi	r20, 0xFF	; 255
    27ca:	5f e7       	ldi	r21, 0x7F	; 127
    27cc:	04 c0       	rjmp	.+8      	; 0x27d6 <__fixsfsi+0x9c>
    27ce:	20 e0       	ldi	r18, 0x00	; 0
    27d0:	30 e0       	ldi	r19, 0x00	; 0
    27d2:	40 e0       	ldi	r20, 0x00	; 0
    27d4:	50 e8       	ldi	r21, 0x80	; 128
    27d6:	b9 01       	movw	r22, r18
    27d8:	ca 01       	movw	r24, r20
    27da:	2c 96       	adiw	r28, 0x0c	; 12
    27dc:	e2 e0       	ldi	r30, 0x02	; 2
    27de:	0c 94 b2 16 	jmp	0x2d64	; 0x2d64 <__epilogue_restores__+0x20>

000027e2 <__floatunsisf>:
    27e2:	a8 e0       	ldi	r26, 0x08	; 8
    27e4:	b0 e0       	ldi	r27, 0x00	; 0
    27e6:	e7 ef       	ldi	r30, 0xF7	; 247
    27e8:	f3 e1       	ldi	r31, 0x13	; 19
    27ea:	0c 94 8e 16 	jmp	0x2d1c	; 0x2d1c <__prologue_saves__+0x10>
    27ee:	7b 01       	movw	r14, r22
    27f0:	8c 01       	movw	r16, r24
    27f2:	61 15       	cp	r22, r1
    27f4:	71 05       	cpc	r23, r1
    27f6:	81 05       	cpc	r24, r1
    27f8:	91 05       	cpc	r25, r1
    27fa:	19 f4       	brne	.+6      	; 0x2802 <__floatunsisf+0x20>
    27fc:	82 e0       	ldi	r24, 0x02	; 2
    27fe:	89 83       	std	Y+1, r24	; 0x01
    2800:	60 c0       	rjmp	.+192    	; 0x28c2 <__floatunsisf+0xe0>
    2802:	83 e0       	ldi	r24, 0x03	; 3
    2804:	89 83       	std	Y+1, r24	; 0x01
    2806:	8e e1       	ldi	r24, 0x1E	; 30
    2808:	c8 2e       	mov	r12, r24
    280a:	d1 2c       	mov	r13, r1
    280c:	dc 82       	std	Y+4, r13	; 0x04
    280e:	cb 82       	std	Y+3, r12	; 0x03
    2810:	ed 82       	std	Y+5, r14	; 0x05
    2812:	fe 82       	std	Y+6, r15	; 0x06
    2814:	0f 83       	std	Y+7, r16	; 0x07
    2816:	18 87       	std	Y+8, r17	; 0x08
    2818:	c8 01       	movw	r24, r16
    281a:	b7 01       	movw	r22, r14
    281c:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <__clzsi2>
    2820:	fc 01       	movw	r30, r24
    2822:	31 97       	sbiw	r30, 0x01	; 1
    2824:	f7 ff       	sbrs	r31, 7
    2826:	3b c0       	rjmp	.+118    	; 0x289e <__floatunsisf+0xbc>
    2828:	22 27       	eor	r18, r18
    282a:	33 27       	eor	r19, r19
    282c:	2e 1b       	sub	r18, r30
    282e:	3f 0b       	sbc	r19, r31
    2830:	57 01       	movw	r10, r14
    2832:	68 01       	movw	r12, r16
    2834:	02 2e       	mov	r0, r18
    2836:	04 c0       	rjmp	.+8      	; 0x2840 <__floatunsisf+0x5e>
    2838:	d6 94       	lsr	r13
    283a:	c7 94       	ror	r12
    283c:	b7 94       	ror	r11
    283e:	a7 94       	ror	r10
    2840:	0a 94       	dec	r0
    2842:	d2 f7       	brpl	.-12     	; 0x2838 <__floatunsisf+0x56>
    2844:	40 e0       	ldi	r20, 0x00	; 0
    2846:	50 e0       	ldi	r21, 0x00	; 0
    2848:	60 e0       	ldi	r22, 0x00	; 0
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	81 e0       	ldi	r24, 0x01	; 1
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	a0 e0       	ldi	r26, 0x00	; 0
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	04 c0       	rjmp	.+8      	; 0x285e <__floatunsisf+0x7c>
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	aa 1f       	adc	r26, r26
    285c:	bb 1f       	adc	r27, r27
    285e:	2a 95       	dec	r18
    2860:	d2 f7       	brpl	.-12     	; 0x2856 <__floatunsisf+0x74>
    2862:	01 97       	sbiw	r24, 0x01	; 1
    2864:	a1 09       	sbc	r26, r1
    2866:	b1 09       	sbc	r27, r1
    2868:	8e 21       	and	r24, r14
    286a:	9f 21       	and	r25, r15
    286c:	a0 23       	and	r26, r16
    286e:	b1 23       	and	r27, r17
    2870:	00 97       	sbiw	r24, 0x00	; 0
    2872:	a1 05       	cpc	r26, r1
    2874:	b1 05       	cpc	r27, r1
    2876:	21 f0       	breq	.+8      	; 0x2880 <__floatunsisf+0x9e>
    2878:	41 e0       	ldi	r20, 0x01	; 1
    287a:	50 e0       	ldi	r21, 0x00	; 0
    287c:	60 e0       	ldi	r22, 0x00	; 0
    287e:	70 e0       	ldi	r23, 0x00	; 0
    2880:	4a 29       	or	r20, r10
    2882:	5b 29       	or	r21, r11
    2884:	6c 29       	or	r22, r12
    2886:	7d 29       	or	r23, r13
    2888:	4d 83       	std	Y+5, r20	; 0x05
    288a:	5e 83       	std	Y+6, r21	; 0x06
    288c:	6f 83       	std	Y+7, r22	; 0x07
    288e:	78 87       	std	Y+8, r23	; 0x08
    2890:	8e e1       	ldi	r24, 0x1E	; 30
    2892:	90 e0       	ldi	r25, 0x00	; 0
    2894:	8e 1b       	sub	r24, r30
    2896:	9f 0b       	sbc	r25, r31
    2898:	9c 83       	std	Y+4, r25	; 0x04
    289a:	8b 83       	std	Y+3, r24	; 0x03
    289c:	12 c0       	rjmp	.+36     	; 0x28c2 <__floatunsisf+0xe0>
    289e:	30 97       	sbiw	r30, 0x00	; 0
    28a0:	81 f0       	breq	.+32     	; 0x28c2 <__floatunsisf+0xe0>
    28a2:	0e 2e       	mov	r0, r30
    28a4:	04 c0       	rjmp	.+8      	; 0x28ae <__floatunsisf+0xcc>
    28a6:	ee 0c       	add	r14, r14
    28a8:	ff 1c       	adc	r15, r15
    28aa:	00 1f       	adc	r16, r16
    28ac:	11 1f       	adc	r17, r17
    28ae:	0a 94       	dec	r0
    28b0:	d2 f7       	brpl	.-12     	; 0x28a6 <__floatunsisf+0xc4>
    28b2:	ed 82       	std	Y+5, r14	; 0x05
    28b4:	fe 82       	std	Y+6, r15	; 0x06
    28b6:	0f 83       	std	Y+7, r16	; 0x07
    28b8:	18 87       	std	Y+8, r17	; 0x08
    28ba:	ce 1a       	sub	r12, r30
    28bc:	df 0a       	sbc	r13, r31
    28be:	dc 82       	std	Y+4, r13	; 0x04
    28c0:	cb 82       	std	Y+3, r12	; 0x03
    28c2:	1a 82       	std	Y+2, r1	; 0x02
    28c4:	ce 01       	movw	r24, r28
    28c6:	01 96       	adiw	r24, 0x01	; 1
    28c8:	0e 94 b9 14 	call	0x2972	; 0x2972 <__pack_f>
    28cc:	28 96       	adiw	r28, 0x08	; 8
    28ce:	ea e0       	ldi	r30, 0x0A	; 10
    28d0:	0c 94 aa 16 	jmp	0x2d54	; 0x2d54 <__epilogue_restores__+0x10>

000028d4 <__clzsi2>:
    28d4:	ef 92       	push	r14
    28d6:	ff 92       	push	r15
    28d8:	0f 93       	push	r16
    28da:	1f 93       	push	r17
    28dc:	7b 01       	movw	r14, r22
    28de:	8c 01       	movw	r16, r24
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	e8 16       	cp	r14, r24
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	f8 06       	cpc	r15, r24
    28e8:	81 e0       	ldi	r24, 0x01	; 1
    28ea:	08 07       	cpc	r16, r24
    28ec:	80 e0       	ldi	r24, 0x00	; 0
    28ee:	18 07       	cpc	r17, r24
    28f0:	88 f4       	brcc	.+34     	; 0x2914 <__clzsi2+0x40>
    28f2:	8f ef       	ldi	r24, 0xFF	; 255
    28f4:	e8 16       	cp	r14, r24
    28f6:	f1 04       	cpc	r15, r1
    28f8:	01 05       	cpc	r16, r1
    28fa:	11 05       	cpc	r17, r1
    28fc:	31 f0       	breq	.+12     	; 0x290a <__clzsi2+0x36>
    28fe:	28 f0       	brcs	.+10     	; 0x290a <__clzsi2+0x36>
    2900:	88 e0       	ldi	r24, 0x08	; 8
    2902:	90 e0       	ldi	r25, 0x00	; 0
    2904:	a0 e0       	ldi	r26, 0x00	; 0
    2906:	b0 e0       	ldi	r27, 0x00	; 0
    2908:	17 c0       	rjmp	.+46     	; 0x2938 <__clzsi2+0x64>
    290a:	80 e0       	ldi	r24, 0x00	; 0
    290c:	90 e0       	ldi	r25, 0x00	; 0
    290e:	a0 e0       	ldi	r26, 0x00	; 0
    2910:	b0 e0       	ldi	r27, 0x00	; 0
    2912:	12 c0       	rjmp	.+36     	; 0x2938 <__clzsi2+0x64>
    2914:	80 e0       	ldi	r24, 0x00	; 0
    2916:	e8 16       	cp	r14, r24
    2918:	80 e0       	ldi	r24, 0x00	; 0
    291a:	f8 06       	cpc	r15, r24
    291c:	80 e0       	ldi	r24, 0x00	; 0
    291e:	08 07       	cpc	r16, r24
    2920:	81 e0       	ldi	r24, 0x01	; 1
    2922:	18 07       	cpc	r17, r24
    2924:	28 f0       	brcs	.+10     	; 0x2930 <__clzsi2+0x5c>
    2926:	88 e1       	ldi	r24, 0x18	; 24
    2928:	90 e0       	ldi	r25, 0x00	; 0
    292a:	a0 e0       	ldi	r26, 0x00	; 0
    292c:	b0 e0       	ldi	r27, 0x00	; 0
    292e:	04 c0       	rjmp	.+8      	; 0x2938 <__clzsi2+0x64>
    2930:	80 e1       	ldi	r24, 0x10	; 16
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	a0 e0       	ldi	r26, 0x00	; 0
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	20 e2       	ldi	r18, 0x20	; 32
    293a:	30 e0       	ldi	r19, 0x00	; 0
    293c:	40 e0       	ldi	r20, 0x00	; 0
    293e:	50 e0       	ldi	r21, 0x00	; 0
    2940:	28 1b       	sub	r18, r24
    2942:	39 0b       	sbc	r19, r25
    2944:	4a 0b       	sbc	r20, r26
    2946:	5b 0b       	sbc	r21, r27
    2948:	04 c0       	rjmp	.+8      	; 0x2952 <__clzsi2+0x7e>
    294a:	16 95       	lsr	r17
    294c:	07 95       	ror	r16
    294e:	f7 94       	ror	r15
    2950:	e7 94       	ror	r14
    2952:	8a 95       	dec	r24
    2954:	d2 f7       	brpl	.-12     	; 0x294a <__clzsi2+0x76>
    2956:	f7 01       	movw	r30, r14
    2958:	ed 5e       	subi	r30, 0xED	; 237
    295a:	fd 4f       	sbci	r31, 0xFD	; 253
    295c:	80 81       	ld	r24, Z
    295e:	28 1b       	sub	r18, r24
    2960:	31 09       	sbc	r19, r1
    2962:	41 09       	sbc	r20, r1
    2964:	51 09       	sbc	r21, r1
    2966:	c9 01       	movw	r24, r18
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	ff 90       	pop	r15
    296e:	ef 90       	pop	r14
    2970:	08 95       	ret

00002972 <__pack_f>:
    2972:	df 92       	push	r13
    2974:	ef 92       	push	r14
    2976:	ff 92       	push	r15
    2978:	0f 93       	push	r16
    297a:	1f 93       	push	r17
    297c:	fc 01       	movw	r30, r24
    297e:	e4 80       	ldd	r14, Z+4	; 0x04
    2980:	f5 80       	ldd	r15, Z+5	; 0x05
    2982:	06 81       	ldd	r16, Z+6	; 0x06
    2984:	17 81       	ldd	r17, Z+7	; 0x07
    2986:	d1 80       	ldd	r13, Z+1	; 0x01
    2988:	80 81       	ld	r24, Z
    298a:	82 30       	cpi	r24, 0x02	; 2
    298c:	48 f4       	brcc	.+18     	; 0x29a0 <__pack_f+0x2e>
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	a0 e1       	ldi	r26, 0x10	; 16
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e8 2a       	or	r14, r24
    2998:	f9 2a       	or	r15, r25
    299a:	0a 2b       	or	r16, r26
    299c:	1b 2b       	or	r17, r27
    299e:	a5 c0       	rjmp	.+330    	; 0x2aea <__pack_f+0x178>
    29a0:	84 30       	cpi	r24, 0x04	; 4
    29a2:	09 f4       	brne	.+2      	; 0x29a6 <__pack_f+0x34>
    29a4:	9f c0       	rjmp	.+318    	; 0x2ae4 <__pack_f+0x172>
    29a6:	82 30       	cpi	r24, 0x02	; 2
    29a8:	21 f4       	brne	.+8      	; 0x29b2 <__pack_f+0x40>
    29aa:	ee 24       	eor	r14, r14
    29ac:	ff 24       	eor	r15, r15
    29ae:	87 01       	movw	r16, r14
    29b0:	05 c0       	rjmp	.+10     	; 0x29bc <__pack_f+0x4a>
    29b2:	e1 14       	cp	r14, r1
    29b4:	f1 04       	cpc	r15, r1
    29b6:	01 05       	cpc	r16, r1
    29b8:	11 05       	cpc	r17, r1
    29ba:	19 f4       	brne	.+6      	; 0x29c2 <__pack_f+0x50>
    29bc:	e0 e0       	ldi	r30, 0x00	; 0
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	96 c0       	rjmp	.+300    	; 0x2aee <__pack_f+0x17c>
    29c2:	62 81       	ldd	r22, Z+2	; 0x02
    29c4:	73 81       	ldd	r23, Z+3	; 0x03
    29c6:	9f ef       	ldi	r25, 0xFF	; 255
    29c8:	62 38       	cpi	r22, 0x82	; 130
    29ca:	79 07       	cpc	r23, r25
    29cc:	0c f0       	brlt	.+2      	; 0x29d0 <__pack_f+0x5e>
    29ce:	5b c0       	rjmp	.+182    	; 0x2a86 <__pack_f+0x114>
    29d0:	22 e8       	ldi	r18, 0x82	; 130
    29d2:	3f ef       	ldi	r19, 0xFF	; 255
    29d4:	26 1b       	sub	r18, r22
    29d6:	37 0b       	sbc	r19, r23
    29d8:	2a 31       	cpi	r18, 0x1A	; 26
    29da:	31 05       	cpc	r19, r1
    29dc:	2c f0       	brlt	.+10     	; 0x29e8 <__pack_f+0x76>
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e0       	ldi	r20, 0x00	; 0
    29e4:	50 e0       	ldi	r21, 0x00	; 0
    29e6:	2a c0       	rjmp	.+84     	; 0x2a3c <__pack_f+0xca>
    29e8:	b8 01       	movw	r22, r16
    29ea:	a7 01       	movw	r20, r14
    29ec:	02 2e       	mov	r0, r18
    29ee:	04 c0       	rjmp	.+8      	; 0x29f8 <__pack_f+0x86>
    29f0:	76 95       	lsr	r23
    29f2:	67 95       	ror	r22
    29f4:	57 95       	ror	r21
    29f6:	47 95       	ror	r20
    29f8:	0a 94       	dec	r0
    29fa:	d2 f7       	brpl	.-12     	; 0x29f0 <__pack_f+0x7e>
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	a0 e0       	ldi	r26, 0x00	; 0
    2a02:	b0 e0       	ldi	r27, 0x00	; 0
    2a04:	04 c0       	rjmp	.+8      	; 0x2a0e <__pack_f+0x9c>
    2a06:	88 0f       	add	r24, r24
    2a08:	99 1f       	adc	r25, r25
    2a0a:	aa 1f       	adc	r26, r26
    2a0c:	bb 1f       	adc	r27, r27
    2a0e:	2a 95       	dec	r18
    2a10:	d2 f7       	brpl	.-12     	; 0x2a06 <__pack_f+0x94>
    2a12:	01 97       	sbiw	r24, 0x01	; 1
    2a14:	a1 09       	sbc	r26, r1
    2a16:	b1 09       	sbc	r27, r1
    2a18:	8e 21       	and	r24, r14
    2a1a:	9f 21       	and	r25, r15
    2a1c:	a0 23       	and	r26, r16
    2a1e:	b1 23       	and	r27, r17
    2a20:	00 97       	sbiw	r24, 0x00	; 0
    2a22:	a1 05       	cpc	r26, r1
    2a24:	b1 05       	cpc	r27, r1
    2a26:	21 f0       	breq	.+8      	; 0x2a30 <__pack_f+0xbe>
    2a28:	81 e0       	ldi	r24, 0x01	; 1
    2a2a:	90 e0       	ldi	r25, 0x00	; 0
    2a2c:	a0 e0       	ldi	r26, 0x00	; 0
    2a2e:	b0 e0       	ldi	r27, 0x00	; 0
    2a30:	9a 01       	movw	r18, r20
    2a32:	ab 01       	movw	r20, r22
    2a34:	28 2b       	or	r18, r24
    2a36:	39 2b       	or	r19, r25
    2a38:	4a 2b       	or	r20, r26
    2a3a:	5b 2b       	or	r21, r27
    2a3c:	da 01       	movw	r26, r20
    2a3e:	c9 01       	movw	r24, r18
    2a40:	8f 77       	andi	r24, 0x7F	; 127
    2a42:	90 70       	andi	r25, 0x00	; 0
    2a44:	a0 70       	andi	r26, 0x00	; 0
    2a46:	b0 70       	andi	r27, 0x00	; 0
    2a48:	80 34       	cpi	r24, 0x40	; 64
    2a4a:	91 05       	cpc	r25, r1
    2a4c:	a1 05       	cpc	r26, r1
    2a4e:	b1 05       	cpc	r27, r1
    2a50:	39 f4       	brne	.+14     	; 0x2a60 <__pack_f+0xee>
    2a52:	27 ff       	sbrs	r18, 7
    2a54:	09 c0       	rjmp	.+18     	; 0x2a68 <__pack_f+0xf6>
    2a56:	20 5c       	subi	r18, 0xC0	; 192
    2a58:	3f 4f       	sbci	r19, 0xFF	; 255
    2a5a:	4f 4f       	sbci	r20, 0xFF	; 255
    2a5c:	5f 4f       	sbci	r21, 0xFF	; 255
    2a5e:	04 c0       	rjmp	.+8      	; 0x2a68 <__pack_f+0xf6>
    2a60:	21 5c       	subi	r18, 0xC1	; 193
    2a62:	3f 4f       	sbci	r19, 0xFF	; 255
    2a64:	4f 4f       	sbci	r20, 0xFF	; 255
    2a66:	5f 4f       	sbci	r21, 0xFF	; 255
    2a68:	e0 e0       	ldi	r30, 0x00	; 0
    2a6a:	f0 e0       	ldi	r31, 0x00	; 0
    2a6c:	20 30       	cpi	r18, 0x00	; 0
    2a6e:	a0 e0       	ldi	r26, 0x00	; 0
    2a70:	3a 07       	cpc	r19, r26
    2a72:	a0 e0       	ldi	r26, 0x00	; 0
    2a74:	4a 07       	cpc	r20, r26
    2a76:	a0 e4       	ldi	r26, 0x40	; 64
    2a78:	5a 07       	cpc	r21, r26
    2a7a:	10 f0       	brcs	.+4      	; 0x2a80 <__pack_f+0x10e>
    2a7c:	e1 e0       	ldi	r30, 0x01	; 1
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	79 01       	movw	r14, r18
    2a82:	8a 01       	movw	r16, r20
    2a84:	27 c0       	rjmp	.+78     	; 0x2ad4 <__pack_f+0x162>
    2a86:	60 38       	cpi	r22, 0x80	; 128
    2a88:	71 05       	cpc	r23, r1
    2a8a:	64 f5       	brge	.+88     	; 0x2ae4 <__pack_f+0x172>
    2a8c:	fb 01       	movw	r30, r22
    2a8e:	e1 58       	subi	r30, 0x81	; 129
    2a90:	ff 4f       	sbci	r31, 0xFF	; 255
    2a92:	d8 01       	movw	r26, r16
    2a94:	c7 01       	movw	r24, r14
    2a96:	8f 77       	andi	r24, 0x7F	; 127
    2a98:	90 70       	andi	r25, 0x00	; 0
    2a9a:	a0 70       	andi	r26, 0x00	; 0
    2a9c:	b0 70       	andi	r27, 0x00	; 0
    2a9e:	80 34       	cpi	r24, 0x40	; 64
    2aa0:	91 05       	cpc	r25, r1
    2aa2:	a1 05       	cpc	r26, r1
    2aa4:	b1 05       	cpc	r27, r1
    2aa6:	39 f4       	brne	.+14     	; 0x2ab6 <__pack_f+0x144>
    2aa8:	e7 fe       	sbrs	r14, 7
    2aaa:	0d c0       	rjmp	.+26     	; 0x2ac6 <__pack_f+0x154>
    2aac:	80 e4       	ldi	r24, 0x40	; 64
    2aae:	90 e0       	ldi	r25, 0x00	; 0
    2ab0:	a0 e0       	ldi	r26, 0x00	; 0
    2ab2:	b0 e0       	ldi	r27, 0x00	; 0
    2ab4:	04 c0       	rjmp	.+8      	; 0x2abe <__pack_f+0x14c>
    2ab6:	8f e3       	ldi	r24, 0x3F	; 63
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	a0 e0       	ldi	r26, 0x00	; 0
    2abc:	b0 e0       	ldi	r27, 0x00	; 0
    2abe:	e8 0e       	add	r14, r24
    2ac0:	f9 1e       	adc	r15, r25
    2ac2:	0a 1f       	adc	r16, r26
    2ac4:	1b 1f       	adc	r17, r27
    2ac6:	17 ff       	sbrs	r17, 7
    2ac8:	05 c0       	rjmp	.+10     	; 0x2ad4 <__pack_f+0x162>
    2aca:	16 95       	lsr	r17
    2acc:	07 95       	ror	r16
    2ace:	f7 94       	ror	r15
    2ad0:	e7 94       	ror	r14
    2ad2:	31 96       	adiw	r30, 0x01	; 1
    2ad4:	87 e0       	ldi	r24, 0x07	; 7
    2ad6:	16 95       	lsr	r17
    2ad8:	07 95       	ror	r16
    2ada:	f7 94       	ror	r15
    2adc:	e7 94       	ror	r14
    2ade:	8a 95       	dec	r24
    2ae0:	d1 f7       	brne	.-12     	; 0x2ad6 <__pack_f+0x164>
    2ae2:	05 c0       	rjmp	.+10     	; 0x2aee <__pack_f+0x17c>
    2ae4:	ee 24       	eor	r14, r14
    2ae6:	ff 24       	eor	r15, r15
    2ae8:	87 01       	movw	r16, r14
    2aea:	ef ef       	ldi	r30, 0xFF	; 255
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	6e 2f       	mov	r22, r30
    2af0:	67 95       	ror	r22
    2af2:	66 27       	eor	r22, r22
    2af4:	67 95       	ror	r22
    2af6:	90 2f       	mov	r25, r16
    2af8:	9f 77       	andi	r25, 0x7F	; 127
    2afa:	d7 94       	ror	r13
    2afc:	dd 24       	eor	r13, r13
    2afe:	d7 94       	ror	r13
    2b00:	8e 2f       	mov	r24, r30
    2b02:	86 95       	lsr	r24
    2b04:	49 2f       	mov	r20, r25
    2b06:	46 2b       	or	r20, r22
    2b08:	58 2f       	mov	r21, r24
    2b0a:	5d 29       	or	r21, r13
    2b0c:	b7 01       	movw	r22, r14
    2b0e:	ca 01       	movw	r24, r20
    2b10:	1f 91       	pop	r17
    2b12:	0f 91       	pop	r16
    2b14:	ff 90       	pop	r15
    2b16:	ef 90       	pop	r14
    2b18:	df 90       	pop	r13
    2b1a:	08 95       	ret

00002b1c <__unpack_f>:
    2b1c:	fc 01       	movw	r30, r24
    2b1e:	db 01       	movw	r26, r22
    2b20:	40 81       	ld	r20, Z
    2b22:	51 81       	ldd	r21, Z+1	; 0x01
    2b24:	22 81       	ldd	r18, Z+2	; 0x02
    2b26:	62 2f       	mov	r22, r18
    2b28:	6f 77       	andi	r22, 0x7F	; 127
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	22 1f       	adc	r18, r18
    2b2e:	22 27       	eor	r18, r18
    2b30:	22 1f       	adc	r18, r18
    2b32:	93 81       	ldd	r25, Z+3	; 0x03
    2b34:	89 2f       	mov	r24, r25
    2b36:	88 0f       	add	r24, r24
    2b38:	82 2b       	or	r24, r18
    2b3a:	28 2f       	mov	r18, r24
    2b3c:	30 e0       	ldi	r19, 0x00	; 0
    2b3e:	99 1f       	adc	r25, r25
    2b40:	99 27       	eor	r25, r25
    2b42:	99 1f       	adc	r25, r25
    2b44:	11 96       	adiw	r26, 0x01	; 1
    2b46:	9c 93       	st	X, r25
    2b48:	11 97       	sbiw	r26, 0x01	; 1
    2b4a:	21 15       	cp	r18, r1
    2b4c:	31 05       	cpc	r19, r1
    2b4e:	a9 f5       	brne	.+106    	; 0x2bba <__unpack_f+0x9e>
    2b50:	41 15       	cp	r20, r1
    2b52:	51 05       	cpc	r21, r1
    2b54:	61 05       	cpc	r22, r1
    2b56:	71 05       	cpc	r23, r1
    2b58:	11 f4       	brne	.+4      	; 0x2b5e <__unpack_f+0x42>
    2b5a:	82 e0       	ldi	r24, 0x02	; 2
    2b5c:	37 c0       	rjmp	.+110    	; 0x2bcc <__unpack_f+0xb0>
    2b5e:	82 e8       	ldi	r24, 0x82	; 130
    2b60:	9f ef       	ldi	r25, 0xFF	; 255
    2b62:	13 96       	adiw	r26, 0x03	; 3
    2b64:	9c 93       	st	X, r25
    2b66:	8e 93       	st	-X, r24
    2b68:	12 97       	sbiw	r26, 0x02	; 2
    2b6a:	9a 01       	movw	r18, r20
    2b6c:	ab 01       	movw	r20, r22
    2b6e:	67 e0       	ldi	r22, 0x07	; 7
    2b70:	22 0f       	add	r18, r18
    2b72:	33 1f       	adc	r19, r19
    2b74:	44 1f       	adc	r20, r20
    2b76:	55 1f       	adc	r21, r21
    2b78:	6a 95       	dec	r22
    2b7a:	d1 f7       	brne	.-12     	; 0x2b70 <__unpack_f+0x54>
    2b7c:	83 e0       	ldi	r24, 0x03	; 3
    2b7e:	8c 93       	st	X, r24
    2b80:	0d c0       	rjmp	.+26     	; 0x2b9c <__unpack_f+0x80>
    2b82:	22 0f       	add	r18, r18
    2b84:	33 1f       	adc	r19, r19
    2b86:	44 1f       	adc	r20, r20
    2b88:	55 1f       	adc	r21, r21
    2b8a:	12 96       	adiw	r26, 0x02	; 2
    2b8c:	8d 91       	ld	r24, X+
    2b8e:	9c 91       	ld	r25, X
    2b90:	13 97       	sbiw	r26, 0x03	; 3
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	13 96       	adiw	r26, 0x03	; 3
    2b96:	9c 93       	st	X, r25
    2b98:	8e 93       	st	-X, r24
    2b9a:	12 97       	sbiw	r26, 0x02	; 2
    2b9c:	20 30       	cpi	r18, 0x00	; 0
    2b9e:	80 e0       	ldi	r24, 0x00	; 0
    2ba0:	38 07       	cpc	r19, r24
    2ba2:	80 e0       	ldi	r24, 0x00	; 0
    2ba4:	48 07       	cpc	r20, r24
    2ba6:	80 e4       	ldi	r24, 0x40	; 64
    2ba8:	58 07       	cpc	r21, r24
    2baa:	58 f3       	brcs	.-42     	; 0x2b82 <__unpack_f+0x66>
    2bac:	14 96       	adiw	r26, 0x04	; 4
    2bae:	2d 93       	st	X+, r18
    2bb0:	3d 93       	st	X+, r19
    2bb2:	4d 93       	st	X+, r20
    2bb4:	5c 93       	st	X, r21
    2bb6:	17 97       	sbiw	r26, 0x07	; 7
    2bb8:	08 95       	ret
    2bba:	2f 3f       	cpi	r18, 0xFF	; 255
    2bbc:	31 05       	cpc	r19, r1
    2bbe:	79 f4       	brne	.+30     	; 0x2bde <__unpack_f+0xc2>
    2bc0:	41 15       	cp	r20, r1
    2bc2:	51 05       	cpc	r21, r1
    2bc4:	61 05       	cpc	r22, r1
    2bc6:	71 05       	cpc	r23, r1
    2bc8:	19 f4       	brne	.+6      	; 0x2bd0 <__unpack_f+0xb4>
    2bca:	84 e0       	ldi	r24, 0x04	; 4
    2bcc:	8c 93       	st	X, r24
    2bce:	08 95       	ret
    2bd0:	64 ff       	sbrs	r22, 4
    2bd2:	03 c0       	rjmp	.+6      	; 0x2bda <__unpack_f+0xbe>
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	8c 93       	st	X, r24
    2bd8:	12 c0       	rjmp	.+36     	; 0x2bfe <__unpack_f+0xe2>
    2bda:	1c 92       	st	X, r1
    2bdc:	10 c0       	rjmp	.+32     	; 0x2bfe <__unpack_f+0xe2>
    2bde:	2f 57       	subi	r18, 0x7F	; 127
    2be0:	30 40       	sbci	r19, 0x00	; 0
    2be2:	13 96       	adiw	r26, 0x03	; 3
    2be4:	3c 93       	st	X, r19
    2be6:	2e 93       	st	-X, r18
    2be8:	12 97       	sbiw	r26, 0x02	; 2
    2bea:	83 e0       	ldi	r24, 0x03	; 3
    2bec:	8c 93       	st	X, r24
    2bee:	87 e0       	ldi	r24, 0x07	; 7
    2bf0:	44 0f       	add	r20, r20
    2bf2:	55 1f       	adc	r21, r21
    2bf4:	66 1f       	adc	r22, r22
    2bf6:	77 1f       	adc	r23, r23
    2bf8:	8a 95       	dec	r24
    2bfa:	d1 f7       	brne	.-12     	; 0x2bf0 <__unpack_f+0xd4>
    2bfc:	70 64       	ori	r23, 0x40	; 64
    2bfe:	14 96       	adiw	r26, 0x04	; 4
    2c00:	4d 93       	st	X+, r20
    2c02:	5d 93       	st	X+, r21
    2c04:	6d 93       	st	X+, r22
    2c06:	7c 93       	st	X, r23
    2c08:	17 97       	sbiw	r26, 0x07	; 7
    2c0a:	08 95       	ret

00002c0c <__fpcmp_parts_f>:
    2c0c:	1f 93       	push	r17
    2c0e:	dc 01       	movw	r26, r24
    2c10:	fb 01       	movw	r30, r22
    2c12:	9c 91       	ld	r25, X
    2c14:	92 30       	cpi	r25, 0x02	; 2
    2c16:	08 f4       	brcc	.+2      	; 0x2c1a <__fpcmp_parts_f+0xe>
    2c18:	47 c0       	rjmp	.+142    	; 0x2ca8 <__fpcmp_parts_f+0x9c>
    2c1a:	80 81       	ld	r24, Z
    2c1c:	82 30       	cpi	r24, 0x02	; 2
    2c1e:	08 f4       	brcc	.+2      	; 0x2c22 <__fpcmp_parts_f+0x16>
    2c20:	43 c0       	rjmp	.+134    	; 0x2ca8 <__fpcmp_parts_f+0x9c>
    2c22:	94 30       	cpi	r25, 0x04	; 4
    2c24:	51 f4       	brne	.+20     	; 0x2c3a <__fpcmp_parts_f+0x2e>
    2c26:	11 96       	adiw	r26, 0x01	; 1
    2c28:	1c 91       	ld	r17, X
    2c2a:	84 30       	cpi	r24, 0x04	; 4
    2c2c:	99 f5       	brne	.+102    	; 0x2c94 <__fpcmp_parts_f+0x88>
    2c2e:	81 81       	ldd	r24, Z+1	; 0x01
    2c30:	68 2f       	mov	r22, r24
    2c32:	70 e0       	ldi	r23, 0x00	; 0
    2c34:	61 1b       	sub	r22, r17
    2c36:	71 09       	sbc	r23, r1
    2c38:	3f c0       	rjmp	.+126    	; 0x2cb8 <__fpcmp_parts_f+0xac>
    2c3a:	84 30       	cpi	r24, 0x04	; 4
    2c3c:	21 f0       	breq	.+8      	; 0x2c46 <__fpcmp_parts_f+0x3a>
    2c3e:	92 30       	cpi	r25, 0x02	; 2
    2c40:	31 f4       	brne	.+12     	; 0x2c4e <__fpcmp_parts_f+0x42>
    2c42:	82 30       	cpi	r24, 0x02	; 2
    2c44:	b9 f1       	breq	.+110    	; 0x2cb4 <__fpcmp_parts_f+0xa8>
    2c46:	81 81       	ldd	r24, Z+1	; 0x01
    2c48:	88 23       	and	r24, r24
    2c4a:	89 f1       	breq	.+98     	; 0x2cae <__fpcmp_parts_f+0xa2>
    2c4c:	2d c0       	rjmp	.+90     	; 0x2ca8 <__fpcmp_parts_f+0x9c>
    2c4e:	11 96       	adiw	r26, 0x01	; 1
    2c50:	1c 91       	ld	r17, X
    2c52:	11 97       	sbiw	r26, 0x01	; 1
    2c54:	82 30       	cpi	r24, 0x02	; 2
    2c56:	f1 f0       	breq	.+60     	; 0x2c94 <__fpcmp_parts_f+0x88>
    2c58:	81 81       	ldd	r24, Z+1	; 0x01
    2c5a:	18 17       	cp	r17, r24
    2c5c:	d9 f4       	brne	.+54     	; 0x2c94 <__fpcmp_parts_f+0x88>
    2c5e:	12 96       	adiw	r26, 0x02	; 2
    2c60:	2d 91       	ld	r18, X+
    2c62:	3c 91       	ld	r19, X
    2c64:	13 97       	sbiw	r26, 0x03	; 3
    2c66:	82 81       	ldd	r24, Z+2	; 0x02
    2c68:	93 81       	ldd	r25, Z+3	; 0x03
    2c6a:	82 17       	cp	r24, r18
    2c6c:	93 07       	cpc	r25, r19
    2c6e:	94 f0       	brlt	.+36     	; 0x2c94 <__fpcmp_parts_f+0x88>
    2c70:	28 17       	cp	r18, r24
    2c72:	39 07       	cpc	r19, r25
    2c74:	bc f0       	brlt	.+46     	; 0x2ca4 <__fpcmp_parts_f+0x98>
    2c76:	14 96       	adiw	r26, 0x04	; 4
    2c78:	8d 91       	ld	r24, X+
    2c7a:	9d 91       	ld	r25, X+
    2c7c:	0d 90       	ld	r0, X+
    2c7e:	bc 91       	ld	r27, X
    2c80:	a0 2d       	mov	r26, r0
    2c82:	24 81       	ldd	r18, Z+4	; 0x04
    2c84:	35 81       	ldd	r19, Z+5	; 0x05
    2c86:	46 81       	ldd	r20, Z+6	; 0x06
    2c88:	57 81       	ldd	r21, Z+7	; 0x07
    2c8a:	28 17       	cp	r18, r24
    2c8c:	39 07       	cpc	r19, r25
    2c8e:	4a 07       	cpc	r20, r26
    2c90:	5b 07       	cpc	r21, r27
    2c92:	18 f4       	brcc	.+6      	; 0x2c9a <__fpcmp_parts_f+0x8e>
    2c94:	11 23       	and	r17, r17
    2c96:	41 f0       	breq	.+16     	; 0x2ca8 <__fpcmp_parts_f+0x9c>
    2c98:	0a c0       	rjmp	.+20     	; 0x2cae <__fpcmp_parts_f+0xa2>
    2c9a:	82 17       	cp	r24, r18
    2c9c:	93 07       	cpc	r25, r19
    2c9e:	a4 07       	cpc	r26, r20
    2ca0:	b5 07       	cpc	r27, r21
    2ca2:	40 f4       	brcc	.+16     	; 0x2cb4 <__fpcmp_parts_f+0xa8>
    2ca4:	11 23       	and	r17, r17
    2ca6:	19 f0       	breq	.+6      	; 0x2cae <__fpcmp_parts_f+0xa2>
    2ca8:	61 e0       	ldi	r22, 0x01	; 1
    2caa:	70 e0       	ldi	r23, 0x00	; 0
    2cac:	05 c0       	rjmp	.+10     	; 0x2cb8 <__fpcmp_parts_f+0xac>
    2cae:	6f ef       	ldi	r22, 0xFF	; 255
    2cb0:	7f ef       	ldi	r23, 0xFF	; 255
    2cb2:	02 c0       	rjmp	.+4      	; 0x2cb8 <__fpcmp_parts_f+0xac>
    2cb4:	60 e0       	ldi	r22, 0x00	; 0
    2cb6:	70 e0       	ldi	r23, 0x00	; 0
    2cb8:	cb 01       	movw	r24, r22
    2cba:	1f 91       	pop	r17
    2cbc:	08 95       	ret

00002cbe <__udivmodhi4>:
    2cbe:	aa 1b       	sub	r26, r26
    2cc0:	bb 1b       	sub	r27, r27
    2cc2:	51 e1       	ldi	r21, 0x11	; 17
    2cc4:	07 c0       	rjmp	.+14     	; 0x2cd4 <__udivmodhi4_ep>

00002cc6 <__udivmodhi4_loop>:
    2cc6:	aa 1f       	adc	r26, r26
    2cc8:	bb 1f       	adc	r27, r27
    2cca:	a6 17       	cp	r26, r22
    2ccc:	b7 07       	cpc	r27, r23
    2cce:	10 f0       	brcs	.+4      	; 0x2cd4 <__udivmodhi4_ep>
    2cd0:	a6 1b       	sub	r26, r22
    2cd2:	b7 0b       	sbc	r27, r23

00002cd4 <__udivmodhi4_ep>:
    2cd4:	88 1f       	adc	r24, r24
    2cd6:	99 1f       	adc	r25, r25
    2cd8:	5a 95       	dec	r21
    2cda:	a9 f7       	brne	.-22     	; 0x2cc6 <__udivmodhi4_loop>
    2cdc:	80 95       	com	r24
    2cde:	90 95       	com	r25
    2ce0:	bc 01       	movw	r22, r24
    2ce2:	cd 01       	movw	r24, r26
    2ce4:	08 95       	ret

00002ce6 <__divmodhi4>:
    2ce6:	97 fb       	bst	r25, 7
    2ce8:	09 2e       	mov	r0, r25
    2cea:	07 26       	eor	r0, r23
    2cec:	0a d0       	rcall	.+20     	; 0x2d02 <__divmodhi4_neg1>
    2cee:	77 fd       	sbrc	r23, 7
    2cf0:	04 d0       	rcall	.+8      	; 0x2cfa <__divmodhi4_neg2>
    2cf2:	e5 df       	rcall	.-54     	; 0x2cbe <__udivmodhi4>
    2cf4:	06 d0       	rcall	.+12     	; 0x2d02 <__divmodhi4_neg1>
    2cf6:	00 20       	and	r0, r0
    2cf8:	1a f4       	brpl	.+6      	; 0x2d00 <__divmodhi4_exit>

00002cfa <__divmodhi4_neg2>:
    2cfa:	70 95       	com	r23
    2cfc:	61 95       	neg	r22
    2cfe:	7f 4f       	sbci	r23, 0xFF	; 255

00002d00 <__divmodhi4_exit>:
    2d00:	08 95       	ret

00002d02 <__divmodhi4_neg1>:
    2d02:	f6 f7       	brtc	.-4      	; 0x2d00 <__divmodhi4_exit>
    2d04:	90 95       	com	r25
    2d06:	81 95       	neg	r24
    2d08:	9f 4f       	sbci	r25, 0xFF	; 255
    2d0a:	08 95       	ret

00002d0c <__prologue_saves__>:
    2d0c:	2f 92       	push	r2
    2d0e:	3f 92       	push	r3
    2d10:	4f 92       	push	r4
    2d12:	5f 92       	push	r5
    2d14:	6f 92       	push	r6
    2d16:	7f 92       	push	r7
    2d18:	8f 92       	push	r8
    2d1a:	9f 92       	push	r9
    2d1c:	af 92       	push	r10
    2d1e:	bf 92       	push	r11
    2d20:	cf 92       	push	r12
    2d22:	df 92       	push	r13
    2d24:	ef 92       	push	r14
    2d26:	ff 92       	push	r15
    2d28:	0f 93       	push	r16
    2d2a:	1f 93       	push	r17
    2d2c:	cf 93       	push	r28
    2d2e:	df 93       	push	r29
    2d30:	cd b7       	in	r28, 0x3d	; 61
    2d32:	de b7       	in	r29, 0x3e	; 62
    2d34:	ca 1b       	sub	r28, r26
    2d36:	db 0b       	sbc	r29, r27
    2d38:	0f b6       	in	r0, 0x3f	; 63
    2d3a:	f8 94       	cli
    2d3c:	de bf       	out	0x3e, r29	; 62
    2d3e:	0f be       	out	0x3f, r0	; 63
    2d40:	cd bf       	out	0x3d, r28	; 61
    2d42:	19 94       	eijmp

00002d44 <__epilogue_restores__>:
    2d44:	2a 88       	ldd	r2, Y+18	; 0x12
    2d46:	39 88       	ldd	r3, Y+17	; 0x11
    2d48:	48 88       	ldd	r4, Y+16	; 0x10
    2d4a:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d4c:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d4e:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d50:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d52:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d54:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d56:	b9 84       	ldd	r11, Y+9	; 0x09
    2d58:	c8 84       	ldd	r12, Y+8	; 0x08
    2d5a:	df 80       	ldd	r13, Y+7	; 0x07
    2d5c:	ee 80       	ldd	r14, Y+6	; 0x06
    2d5e:	fd 80       	ldd	r15, Y+5	; 0x05
    2d60:	0c 81       	ldd	r16, Y+4	; 0x04
    2d62:	1b 81       	ldd	r17, Y+3	; 0x03
    2d64:	aa 81       	ldd	r26, Y+2	; 0x02
    2d66:	b9 81       	ldd	r27, Y+1	; 0x01
    2d68:	ce 0f       	add	r28, r30
    2d6a:	d1 1d       	adc	r29, r1
    2d6c:	0f b6       	in	r0, 0x3f	; 63
    2d6e:	f8 94       	cli
    2d70:	de bf       	out	0x3e, r29	; 62
    2d72:	0f be       	out	0x3f, r0	; 63
    2d74:	cd bf       	out	0x3d, r28	; 61
    2d76:	ed 01       	movw	r28, r26
    2d78:	08 95       	ret

00002d7a <_exit>:
    2d7a:	f8 94       	cli

00002d7c <__stop_program>:
    2d7c:	ff cf       	rjmp	.-2      	; 0x2d7c <__stop_program>
